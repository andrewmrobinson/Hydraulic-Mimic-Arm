ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.syntax unified
  20              		.global _printf_float
  21              		.thumb
  22              		.syntax unified
  23              		.global	errorStatus
  24              		.bss
  25              		.type	errorStatus, %object
  26              		.size	errorStatus, 1
  27              	errorStatus:
  28 0000 00       		.space	1
  29              		.section	.text.writePWM,"ax",%progbits
  30              		.align	2
  31              		.global	writePWM
  32              		.thumb
  33              		.thumb_func
  34              		.type	writePWM, %function
  35              	writePWM:
  36              	.LFB64:
  37              		.file 1 "main.c"
   1:main.c        **** 
   2:main.c        **** #include <project.h>
   3:main.c        **** #include <stdio.h>
   4:main.c        **** #include "common.h"
   5:main.c        **** #include <math.h>
   6:main.c        **** #include <stdlib.h>     /* strtod */
   7:main.c        **** 
   8:main.c        **** #define	Frequency 1000000.0			// Frequency of PWMClock
   9:main.c        **** #define	One_ms (Frequency/1000.0)	// 1 ms constant
  10:main.c        **** #define filter_size 7
  11:main.c        **** #define CYL_NO 2                    // Number of connected cylinders
  12:main.c        **** 
  13:main.c        **** /* Add an explicit reference to the floating point printf library to allow
  14:main.c        **** the usage of floating point conversion specifier */
  15:main.c        **** #if defined (__GNUC__)
  16:main.c        ****     asm (".global _printf_float");
  17:main.c        **** #endif
  18:main.c        **** 
  19:main.c        **** uint8 errorStatus = 0u;
  20:main.c        **** 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 2


  21:main.c        **** void writePWM(int cylinder, int pulse){
  38              		.loc 1 21 0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 8
  41              		@ frame_needed = 1, uses_anonymous_args = 0
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 82B0     		sub	sp, sp, #8
  47              		.cfi_def_cfa_offset 16
  48 0004 00AF     		add	r7, sp, #0
  49              		.cfi_def_cfa_register 7
  50 0006 7860     		str	r0, [r7, #4]
  51 0008 3960     		str	r1, [r7]
  22:main.c        ****     switch(cylinder){
  52              		.loc 1 22 0
  53 000a 7B68     		ldr	r3, [r7, #4]
  54 000c 032B     		cmp	r3, #3
  55 000e 2FD8     		bhi	.L8
  56 0010 01A2     		adr	r2, .L4
  57 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  58 0016 00BF     		.p2align 2
  59              	.L4:
  60 0018 29000000 		.word	.L3+1
  61 001c 3B000000 		.word	.L5+1
  62 0020 4D000000 		.word	.L6+1
  63 0024 5F000000 		.word	.L7+1
  64              		.p2align 1
  65              	.L3:
  23:main.c        ****                 case 0:
  24:main.c        ****                     PWM_0_WriteCompare(pulse + 1500);
  66              		.loc 1 24 0
  67 0028 3B68     		ldr	r3, [r7]
  68 002a 9BB2     		uxth	r3, r3
  69 002c 03F2DC53 		addw	r3, r3, #1500
  70 0030 9BB2     		uxth	r3, r3
  71 0032 1846     		mov	r0, r3
  72 0034 FFF7FEFF 		bl	PWM_0_WriteCompare
  25:main.c        ****                     break;
  73              		.loc 1 25 0
  74 0038 1AE0     		b	.L2
  75              	.L5:
  26:main.c        ****                 case 1:
  27:main.c        ****                     PWM_1_WriteCompare(pulse + 1500);
  76              		.loc 1 27 0
  77 003a 3B68     		ldr	r3, [r7]
  78 003c 9BB2     		uxth	r3, r3
  79 003e 03F2DC53 		addw	r3, r3, #1500
  80 0042 9BB2     		uxth	r3, r3
  81 0044 1846     		mov	r0, r3
  82 0046 FFF7FEFF 		bl	PWM_1_WriteCompare
  28:main.c        ****                     break;
  83              		.loc 1 28 0
  84 004a 11E0     		b	.L2
  85              	.L6:
  29:main.c        ****                 case 2:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 3


  30:main.c        ****                     PWM_2_WriteCompare(pulse + 1500);
  86              		.loc 1 30 0
  87 004c 3B68     		ldr	r3, [r7]
  88 004e 9BB2     		uxth	r3, r3
  89 0050 03F2DC53 		addw	r3, r3, #1500
  90 0054 9BB2     		uxth	r3, r3
  91 0056 1846     		mov	r0, r3
  92 0058 FFF7FEFF 		bl	PWM_2_WriteCompare
  31:main.c        ****                     break;
  93              		.loc 1 31 0
  94 005c 08E0     		b	.L2
  95              	.L7:
  32:main.c        ****                 case 3:
  33:main.c        ****                     PWM_3_WriteCompare(pulse + 1500);
  96              		.loc 1 33 0
  97 005e 3B68     		ldr	r3, [r7]
  98 0060 9BB2     		uxth	r3, r3
  99 0062 03F2DC53 		addw	r3, r3, #1500
 100 0066 9BB2     		uxth	r3, r3
 101 0068 1846     		mov	r0, r3
 102 006a FFF7FEFF 		bl	PWM_3_WriteCompare
  34:main.c        ****                     break;
 103              		.loc 1 34 0
 104 006e 00BF     		nop
 105              	.L2:
 106              	.L8:
  35:main.c        ****             }  
  36:main.c        **** }
 107              		.loc 1 36 0
 108 0070 00BF     		nop
 109 0072 0837     		adds	r7, r7, #8
 110              		.cfi_def_cfa_offset 8
 111 0074 BD46     		mov	sp, r7
 112              		.cfi_def_cfa_register 13
 113              		@ sp needed
 114 0076 80BD     		pop	{r7, pc}
 115              		.cfi_endproc
 116              	.LFE64:
 117              		.size	writePWM, .-writePWM
 118              		.section	.text.pulseCheck,"ax",%progbits
 119              		.align	2
 120              		.global	pulseCheck
 121              		.thumb
 122              		.thumb_func
 123              		.type	pulseCheck, %function
 124              	pulseCheck:
 125              	.LFB65:
  37:main.c        **** 
  38:main.c        **** int pulseCheck(int pulse, int offset_upper, int offset_lower) {
 126              		.loc 1 38 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 16
 129              		@ frame_needed = 1, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131 0000 80B4     		push	{r7}
 132              		.cfi_def_cfa_offset 4
 133              		.cfi_offset 7, -4
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 4


 134 0002 85B0     		sub	sp, sp, #20
 135              		.cfi_def_cfa_offset 24
 136 0004 00AF     		add	r7, sp, #0
 137              		.cfi_def_cfa_register 7
 138 0006 F860     		str	r0, [r7, #12]
 139 0008 B960     		str	r1, [r7, #8]
 140 000a 7A60     		str	r2, [r7, #4]
  39:main.c        ****     if(pulse<0){pulse = pulse - offset_lower;}
 141              		.loc 1 39 0
 142 000c FB68     		ldr	r3, [r7, #12]
 143 000e 002B     		cmp	r3, #0
 144 0010 03DA     		bge	.L10
 145              		.loc 1 39 0 is_stmt 0 discriminator 1
 146 0012 FA68     		ldr	r2, [r7, #12]
 147 0014 7B68     		ldr	r3, [r7, #4]
 148 0016 D31A     		subs	r3, r2, r3
 149 0018 FB60     		str	r3, [r7, #12]
 150              	.L10:
  40:main.c        ****         if(pulse>0){pulse = pulse + offset_upper;}
 151              		.loc 1 40 0 is_stmt 1
 152 001a FB68     		ldr	r3, [r7, #12]
 153 001c 002B     		cmp	r3, #0
 154 001e 03DD     		ble	.L11
 155              		.loc 1 40 0 is_stmt 0 discriminator 1
 156 0020 FA68     		ldr	r2, [r7, #12]
 157 0022 BB68     		ldr	r3, [r7, #8]
 158 0024 1344     		add	r3, r3, r2
 159 0026 FB60     		str	r3, [r7, #12]
 160              	.L11:
  41:main.c        ****         if(pulse<-500){pulse=-500;}
 161              		.loc 1 41 0 is_stmt 1
 162 0028 FB68     		ldr	r3, [r7, #12]
 163 002a 13F5FA7F 		cmn	r3, #500
 164 002e 01DA     		bge	.L12
 165              		.loc 1 41 0 is_stmt 0 discriminator 1
 166 0030 074B     		ldr	r3, .L15
 167 0032 FB60     		str	r3, [r7, #12]
 168              	.L12:
  42:main.c        ****         if(pulse>500){pulse=500;}
 169              		.loc 1 42 0 is_stmt 1
 170 0034 FB68     		ldr	r3, [r7, #12]
 171 0036 B3F5FA7F 		cmp	r3, #500
 172 003a 02DD     		ble	.L13
 173              		.loc 1 42 0 is_stmt 0 discriminator 1
 174 003c 4FF4FA73 		mov	r3, #500
 175 0040 FB60     		str	r3, [r7, #12]
 176              	.L13:
  43:main.c        ****     return pulse;
 177              		.loc 1 43 0 is_stmt 1
 178 0042 FB68     		ldr	r3, [r7, #12]
  44:main.c        **** }
 179              		.loc 1 44 0
 180 0044 1846     		mov	r0, r3
 181 0046 1437     		adds	r7, r7, #20
 182              		.cfi_def_cfa_offset 4
 183 0048 BD46     		mov	sp, r7
 184              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 5


 185              		@ sp needed
 186 004a 80BC     		pop	{r7}
 187              		.cfi_restore 7
 188              		.cfi_def_cfa_offset 0
 189 004c 7047     		bx	lr
 190              	.L16:
 191 004e 00BF     		.align	2
 192              	.L15:
 193 0050 0CFEFFFF 		.word	-500
 194              		.cfi_endproc
 195              	.LFE65:
 196              		.size	pulseCheck, .-pulseCheck
 197              		.global	data_read_mode
 198              		.bss
 199 0001 000000   		.align	2
 200              		.type	data_read_mode, %object
 201              		.size	data_read_mode, 4
 202              	data_read_mode:
 203 0004 00000000 		.space	4
 204              		.global	new_pos_set
 205              		.align	2
 206              		.type	new_pos_set, %object
 207              		.size	new_pos_set, 8
 208              	new_pos_set:
 209 0008 00000000 		.space	8
 209      00000000 
 210              		.comm	new_pos,8,4
 211              		.global	pos
 212              		.data
 213              		.align	2
 214              		.type	pos, %object
 215              		.size	pos, 8
 216              	pos:
 217 0000 D0070000 		.word	2000
 218 0004 D0070000 		.word	2000
 219              		.global	pulse
 220              		.bss
 221              		.align	2
 222              		.type	pulse, %object
 223              		.size	pulse, 8
 224              	pulse:
 225 0010 00000000 		.space	8
 225      00000000 
 226              		.global	pulse_temp
 227              		.align	2
 228              		.type	pulse_temp, %object
 229              		.size	pulse_temp, 8
 230              	pulse_temp:
 231 0018 00000000 		.space	8
 231      00000000 
 232              		.comm	err,16,8
 233              		.comm	adcValue,4,4
 234              		.global	der
 235              		.align	3
 236              		.type	der, %object
 237              		.size	der, 16
 238              	der:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 6


 239 0020 00000000 		.space	16
 239      00000000 
 239      00000000 
 239      00000000 
 240              		.global	prev_err
 241              		.align	3
 242              		.type	prev_err, %object
 243              		.size	prev_err, 16
 244              	prev_err:
 245 0030 00000000 		.space	16
 245      00000000 
 245      00000000 
 245      00000000 
 246              		.global	pid_integral
 247              		.align	3
 248              		.type	pid_integral, %object
 249              		.size	pid_integral, 16
 250              	pid_integral:
 251 0040 00000000 		.space	16
 251      00000000 
 251      00000000 
 251      00000000 
 252              		.global	cyl_set
 253              		.align	2
 254              		.type	cyl_set, %object
 255              		.size	cyl_set, 4
 256              	cyl_set:
 257 0050 00000000 		.space	4
 258              		.comm	cyl_tmp,1,4
 259              		.global	offsets
 260              		.data
 261              		.align	2
 262              		.type	offsets, %object
 263              		.size	offsets, 32
 264              	offsets:
 265 0008 7D000000 		.word	125
 266 000c B3000000 		.word	179
 267 0010 7E000000 		.word	126
 268 0014 B0000000 		.word	176
 269 0018 00000000 		.word	0
 270 001c 00000000 		.word	0
 271 0020 00000000 		.word	0
 272 0024 00000000 		.word	0
 273              		.comm	sendValue,100,4
 274              		.comm	temp,20,4
 275              		.global	nn
 276              		.bss
 277              		.align	2
 278              		.type	nn, %object
 279              		.size	nn, 4
 280              	nn:
 281 0054 00000000 		.space	4
 282              		.global	pid
 283              		.data
 284              		.align	3
 285              		.type	pid, %object
 286              		.size	pid, 24
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 7


 287              	pid:
 288 0028 66666666 		.word	1717986918
 289 002c 6666E63F 		.word	1072064102
 290 0030 FCA9F1D2 		.word	-755914244
 291 0034 4D62503F 		.word	1062232653
 292 0038 7B14AE47 		.word	1202590843
 293 003c E17AA43F 		.word	1067743969
 294              		.comm	help,100,4
 295              		.global	tt
 296              		.bss
 297              		.align	2
 298              		.type	tt, %object
 299              		.size	tt, 4
 300              	tt:
 301 0058 00000000 		.space	4
 302              		.global	start_calib
 303              		.align	2
 304              		.type	start_calib, %object
 305              		.size	start_calib, 4
 306              	start_calib:
 307 005c 00000000 		.space	4
 308              		.global	cyl_no
 309              		.align	2
 310              		.type	cyl_no, %object
 311              		.size	cyl_no, 4
 312              	cyl_no:
 313 0060 00000000 		.space	4
 314              		.global	moving_median
 315              		.align	2
 316              		.type	moving_median, %object
 317              		.size	moving_median, 28
 318              	moving_median:
 319 0064 00000000 		.space	28
 319      00000000 
 319      00000000 
 319      00000000 
 319      00000000 
 320              		.comm	tempArray,14,4
 321              		.comm	tmp,2,2
 322              		.section	.text.adc_update,"ax",%progbits
 323              		.align	2
 324              		.global	adc_update
 325              		.thumb
 326              		.thumb_func
 327              		.type	adc_update, %function
 328              	adc_update:
 329              	.LFB66:
  45:main.c        **** 
  46:main.c        **** 
  47:main.c        **** int data_read_mode = 0;
  48:main.c        **** 
  49:main.c        **** volatile int new_pos_set[CYL_NO] = {0};
  50:main.c        **** int new_pos[CYL_NO];
  51:main.c        **** int pos[CYL_NO]={2000,2000};
  52:main.c        **** int pulse[CYL_NO] = {0};
  53:main.c        **** int pulse_temp[CYL_NO] = {0};
  54:main.c        **** double err[CYL_NO];
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 8


  55:main.c        **** uint16 adcValue[CYL_NO];
  56:main.c        **** double der[CYL_NO] = {0};
  57:main.c        **** double prev_err[CYL_NO] = {0};
  58:main.c        **** double pid_integral[CYL_NO] = {0};
  59:main.c        **** int cyl_set = 0;
  60:main.c        **** char cyl_tmp[1];
  61:main.c        **** 
  62:main.c        **** int offsets[4][2] = {{125,179},{126,176},{0,0},{0,0}}; //{lower,upper} - both positive
  63:main.c        **** 
  64:main.c        **** char sendValue[100];
  65:main.c        **** char temp[20];
  66:main.c        **** int nn=0;
  67:main.c        **** double pid[3] = {0.7,0.001,0.04};
  68:main.c        **** //double pid[3] = { -2.22,-0.0307,0.0 };
  69:main.c        **** char help[100];
  70:main.c        **** int tt = 0;
  71:main.c        **** 
  72:main.c        **** int start_calib = 0;
  73:main.c        **** int cyl_no = 0;
  74:main.c        **** 
  75:main.c        **** uint16 moving_median[CYL_NO][filter_size] = {0};
  76:main.c        **** uint16 tempArray[filter_size];
  77:main.c        **** uint16 tmp;
  78:main.c        **** 
  79:main.c        **** CY_ISR(adc_update){
 330              		.loc 1 79 0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 24
 333              		@ frame_needed = 1, uses_anonymous_args = 0
 334 0000 80B5     		push	{r7, lr}
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 7, -8
 337              		.cfi_offset 14, -4
 338 0002 86B0     		sub	sp, sp, #24
 339              		.cfi_def_cfa_offset 32
 340 0004 00AF     		add	r7, sp, #0
 341              		.cfi_def_cfa_register 7
 342              	.LBB2:
  80:main.c        ****     for(int c = 0;c<CYL_NO;c++){
 343              		.loc 1 80 0
 344 0006 0023     		movs	r3, #0
 345 0008 7B61     		str	r3, [r7, #20]
 346 000a 9DE0     		b	.L18
 347              	.L28:
  81:main.c        ****         AMux_0_FastSelect(c);
 348              		.loc 1 81 0
 349 000c 7B69     		ldr	r3, [r7, #20]
 350 000e DBB2     		uxtb	r3, r3
 351 0010 1846     		mov	r0, r3
 352 0012 FFF7FEFF 		bl	AMux_0_FastSelect
 353              	.LBB3:
  82:main.c        ****         
  83:main.c        ****         for(int j=0;j<filter_size-1;j++){
 354              		.loc 1 83 0
 355 0016 0023     		movs	r3, #0
 356 0018 3B61     		str	r3, [r7, #16]
 357 001a 16E0     		b	.L19
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 9


 358              	.L20:
  84:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 359              		.loc 1 84 0 discriminator 3
 360 001c 3B69     		ldr	r3, [r7, #16]
 361 001e 591C     		adds	r1, r3, #1
 362 0020 4E48     		ldr	r0, .L29
 363 0022 7A69     		ldr	r2, [r7, #20]
 364 0024 1346     		mov	r3, r2
 365 0026 DB00     		lsls	r3, r3, #3
 366 0028 9B1A     		subs	r3, r3, r2
 367 002a 0B44     		add	r3, r3, r1
 368 002c 30F81300 		ldrh	r0, [r0, r3, lsl #1]
 369 0030 4A49     		ldr	r1, .L29
 370 0032 7A69     		ldr	r2, [r7, #20]
 371 0034 1346     		mov	r3, r2
 372 0036 DB00     		lsls	r3, r3, #3
 373 0038 9B1A     		subs	r3, r3, r2
 374 003a 3A69     		ldr	r2, [r7, #16]
 375 003c 1344     		add	r3, r3, r2
 376 003e 0246     		mov	r2, r0	@ movhi
 377 0040 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
  83:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 378              		.loc 1 83 0 discriminator 3
 379 0044 3B69     		ldr	r3, [r7, #16]
 380 0046 0133     		adds	r3, r3, #1
 381 0048 3B61     		str	r3, [r7, #16]
 382              	.L19:
  83:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 383              		.loc 1 83 0 is_stmt 0 discriminator 1
 384 004a 3B69     		ldr	r3, [r7, #16]
 385 004c 052B     		cmp	r3, #5
 386 004e E5DD     		ble	.L20
 387              	.LBE3:
  85:main.c        ****         }
  86:main.c        ****         
  87:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 388              		.loc 1 87 0 is_stmt 1
 389 0050 FFF7FEFF 		bl	ADC_0_GetResult16
 390 0054 0346     		mov	r3, r0
 391 0056 98B2     		uxth	r0, r3
 392 0058 4049     		ldr	r1, .L29
 393 005a 7A69     		ldr	r2, [r7, #20]
 394 005c 1346     		mov	r3, r2
 395 005e DB00     		lsls	r3, r3, #3
 396 0060 9B1A     		subs	r3, r3, r2
 397 0062 5B00     		lsls	r3, r3, #1
 398 0064 0B44     		add	r3, r3, r1
 399 0066 0C33     		adds	r3, r3, #12
 400 0068 0246     		mov	r2, r0	@ movhi
 401 006a 1A80     		strh	r2, [r3]	@ movhi
  88:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 402              		.loc 1 88 0
 403 006c FFF7FEFF 		bl	ADC_0_GetResult16
 404 0070 0346     		mov	r3, r0
 405 0072 98B2     		uxth	r0, r3
 406 0074 3949     		ldr	r1, .L29
 407 0076 7A69     		ldr	r2, [r7, #20]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 10


 408 0078 1346     		mov	r3, r2
 409 007a DB00     		lsls	r3, r3, #3
 410 007c 9B1A     		subs	r3, r3, r2
 411 007e 5B00     		lsls	r3, r3, #1
 412 0080 0B44     		add	r3, r3, r1
 413 0082 0C33     		adds	r3, r3, #12
 414 0084 0246     		mov	r2, r0	@ movhi
 415 0086 1A80     		strh	r2, [r3]	@ movhi
  89:main.c        ****         ADC_0_IsEndConversion(ADC_0_WAIT_FOR_RESULT);
 416              		.loc 1 89 0
 417 0088 0020     		movs	r0, #0
 418 008a FFF7FEFF 		bl	ADC_0_IsEndConversion
  90:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 419              		.loc 1 90 0
 420 008e FFF7FEFF 		bl	ADC_0_GetResult16
 421 0092 0346     		mov	r3, r0
 422 0094 98B2     		uxth	r0, r3
 423 0096 3149     		ldr	r1, .L29
 424 0098 7A69     		ldr	r2, [r7, #20]
 425 009a 1346     		mov	r3, r2
 426 009c DB00     		lsls	r3, r3, #3
 427 009e 9B1A     		subs	r3, r3, r2
 428 00a0 5B00     		lsls	r3, r3, #1
 429 00a2 0B44     		add	r3, r3, r1
 430 00a4 0C33     		adds	r3, r3, #12
 431 00a6 0246     		mov	r2, r0	@ movhi
 432 00a8 1A80     		strh	r2, [r3]	@ movhi
 433              	.LBB4:
  91:main.c        ****         
  92:main.c        ****         for(int j=0;j<filter_size;j++){
 434              		.loc 1 92 0
 435 00aa 0023     		movs	r3, #0
 436 00ac FB60     		str	r3, [r7, #12]
 437 00ae 0FE0     		b	.L21
 438              	.L22:
  93:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 439              		.loc 1 93 0 discriminator 3
 440 00b0 2A49     		ldr	r1, .L29
 441 00b2 7A69     		ldr	r2, [r7, #20]
 442 00b4 1346     		mov	r3, r2
 443 00b6 DB00     		lsls	r3, r3, #3
 444 00b8 9B1A     		subs	r3, r3, r2
 445 00ba FA68     		ldr	r2, [r7, #12]
 446 00bc 1344     		add	r3, r3, r2
 447 00be 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 448 00c2 274A     		ldr	r2, .L29+4
 449 00c4 FB68     		ldr	r3, [r7, #12]
 450 00c6 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  92:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 451              		.loc 1 92 0 discriminator 3
 452 00ca FB68     		ldr	r3, [r7, #12]
 453 00cc 0133     		adds	r3, r3, #1
 454 00ce FB60     		str	r3, [r7, #12]
 455              	.L21:
  92:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 456              		.loc 1 92 0 is_stmt 0 discriminator 1
 457 00d0 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 11


 458 00d2 062B     		cmp	r3, #6
 459 00d4 ECDD     		ble	.L22
 460              	.LBE4:
 461              	.LBB5:
  94:main.c        ****         }
  95:main.c        ****         for(int i = 0; i < filter_size; i++){                     //Loop for ascending ordering
 462              		.loc 1 95 0 is_stmt 1
 463 00d6 0023     		movs	r3, #0
 464 00d8 BB60     		str	r3, [r7, #8]
 465 00da 29E0     		b	.L23
 466              	.L27:
 467              	.LBB6:
  96:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 468              		.loc 1 96 0
 469 00dc 0023     		movs	r3, #0
 470 00de 7B60     		str	r3, [r7, #4]
 471 00e0 20E0     		b	.L24
 472              	.L26:
  97:main.c        ****         	{
  98:main.c        ****         		if (tempArray[j] > tempArray[i])                //Comparing other array elements
 473              		.loc 1 98 0
 474 00e2 1F4A     		ldr	r2, .L29+4
 475 00e4 7B68     		ldr	r3, [r7, #4]
 476 00e6 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 477 00ea 1D49     		ldr	r1, .L29+4
 478 00ec BB68     		ldr	r3, [r7, #8]
 479 00ee 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 480 00f2 9A42     		cmp	r2, r3
 481 00f4 13D9     		bls	.L25
  99:main.c        ****         		{
 100:main.c        ****         			tmp = tempArray[i];         //Using temporary variable for storing last value
 482              		.loc 1 100 0
 483 00f6 1A4A     		ldr	r2, .L29+4
 484 00f8 BB68     		ldr	r3, [r7, #8]
 485 00fa 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 486 00fe 194B     		ldr	r3, .L29+8
 487 0100 1A80     		strh	r2, [r3]	@ movhi
 101:main.c        ****         			tempArray[i] = tempArray[j];            //replacing value
 488              		.loc 1 101 0
 489 0102 174A     		ldr	r2, .L29+4
 490 0104 7B68     		ldr	r3, [r7, #4]
 491 0106 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 492 010a 154A     		ldr	r2, .L29+4
 493 010c BB68     		ldr	r3, [r7, #8]
 494 010e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 102:main.c        ****         			tempArray[j] = tmp;             //storing last value
 495              		.loc 1 102 0
 496 0112 144B     		ldr	r3, .L29+8
 497 0114 1988     		ldrh	r1, [r3]
 498 0116 124A     		ldr	r2, .L29+4
 499 0118 7B68     		ldr	r3, [r7, #4]
 500 011a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 501              	.L25:
  96:main.c        ****         	{
 502              		.loc 1 96 0 discriminator 2
 503 011e 7B68     		ldr	r3, [r7, #4]
 504 0120 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 12


 505 0122 7B60     		str	r3, [r7, #4]
 506              	.L24:
  96:main.c        ****         	{
 507              		.loc 1 96 0 is_stmt 0 discriminator 1
 508 0124 7B68     		ldr	r3, [r7, #4]
 509 0126 062B     		cmp	r3, #6
 510 0128 DBDD     		ble	.L26
 511              	.LBE6:
  95:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 512              		.loc 1 95 0 is_stmt 1 discriminator 2
 513 012a BB68     		ldr	r3, [r7, #8]
 514 012c 0133     		adds	r3, r3, #1
 515 012e BB60     		str	r3, [r7, #8]
 516              	.L23:
  95:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 517              		.loc 1 95 0 is_stmt 0 discriminator 1
 518 0130 BB68     		ldr	r3, [r7, #8]
 519 0132 062B     		cmp	r3, #6
 520 0134 D2DD     		ble	.L27
 521              	.LBE5:
 103:main.c        ****         		}  
 104:main.c        ****         	}
 105:main.c        ****         }
 106:main.c        ****         adcValue[c] = tempArray[(filter_size-1)/2];
 522              		.loc 1 106 0 is_stmt 1 discriminator 2
 523 0136 0A4B     		ldr	r3, .L29+4
 524 0138 D988     		ldrh	r1, [r3, #6]
 525 013a 0B4A     		ldr	r2, .L29+12
 526 013c 7B69     		ldr	r3, [r7, #20]
 527 013e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  80:main.c        ****         AMux_0_FastSelect(c);
 528              		.loc 1 80 0 discriminator 2
 529 0142 7B69     		ldr	r3, [r7, #20]
 530 0144 0133     		adds	r3, r3, #1
 531 0146 7B61     		str	r3, [r7, #20]
 532              	.L18:
  80:main.c        ****         AMux_0_FastSelect(c);
 533              		.loc 1 80 0 is_stmt 0 discriminator 1
 534 0148 7B69     		ldr	r3, [r7, #20]
 535 014a 012B     		cmp	r3, #1
 536 014c 7FF75EAF 		ble	.L28
 537              	.LBE2:
 107:main.c        ****     }
 108:main.c        ****     update_median_isr_ClearPending();
 538              		.loc 1 108 0 is_stmt 1
 539 0150 FFF7FEFF 		bl	update_median_isr_ClearPending
 109:main.c        ****     
 110:main.c        **** }
 540              		.loc 1 110 0
 541 0154 00BF     		nop
 542 0156 1837     		adds	r7, r7, #24
 543              		.cfi_def_cfa_offset 8
 544 0158 BD46     		mov	sp, r7
 545              		.cfi_def_cfa_register 13
 546              		@ sp needed
 547 015a 80BD     		pop	{r7, pc}
 548              	.L30:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 13


 549              		.align	2
 550              	.L29:
 551 015c 00000000 		.word	moving_median
 552 0160 00000000 		.word	tempArray
 553 0164 00000000 		.word	tmp
 554 0168 00000000 		.word	adcValue
 555              		.cfi_endproc
 556              	.LFE66:
 557              		.size	adc_update, .-adc_update
 558              		.section	.rodata
 559              		.align	2
 560              	.LC0:
 561 0000 25303864 		.ascii	"%08d\011%08.2f\011%08d\011%08.2f\000"
 561      09253038 
 561      2E326609 
 561      25303864 
 561      09253038 
 562              		.section	.text.RxIsr,"ax",%progbits
 563              		.align	2
 564              		.global	RxIsr
 565              		.thumb
 566              		.thumb_func
 567              		.type	RxIsr, %function
 568              	RxIsr:
 569              	.LFB67:
 111:main.c        **** 
 112:main.c        **** 
 113:main.c        **** CY_ISR(RxIsr)
 114:main.c        **** {
 570              		.loc 1 114 0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 8
 573              		@ frame_needed = 1, uses_anonymous_args = 0
 574 0000 B0B5     		push	{r4, r5, r7, lr}
 575              		.cfi_def_cfa_offset 16
 576              		.cfi_offset 4, -16
 577              		.cfi_offset 5, -12
 578              		.cfi_offset 7, -8
 579              		.cfi_offset 14, -4
 580 0002 88B0     		sub	sp, sp, #32
 581              		.cfi_def_cfa_offset 48
 582 0004 06AF     		add	r7, sp, #24
 583              		.cfi_def_cfa 7, 24
 584              	.L63:
 115:main.c        ****     uint8 rxStatus;         
 116:main.c        ****     uint8 rxData;           
 117:main.c        ****     
 118:main.c        ****     do
 119:main.c        ****     {
 120:main.c        ****         /* Read receiver status register */
 121:main.c        ****         rxStatus = UART_RXSTATUS_REG;
 585              		.loc 1 121 0
 586 0006 9E4B     		ldr	r3, .L66
 587 0008 1B78     		ldrb	r3, [r3]
 588 000a FB70     		strb	r3, [r7, #3]
 122:main.c        **** 
 123:main.c        ****         if((rxStatus & (UART_RX_STS_BREAK      | UART_RX_STS_PAR_ERROR |
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 14


 124:main.c        ****                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 589              		.loc 1 124 0
 590 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 591 000e 03F01E03 		and	r3, r3, #30
 123:main.c        ****                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 592              		.loc 1 123 0
 593 0012 002B     		cmp	r3, #0
 594 0014 0CD0     		beq	.L32
 125:main.c        ****         {
 126:main.c        ****             /* ERROR handling. */
 127:main.c        ****             errorStatus |= rxStatus & ( UART_RX_STS_BREAK      | UART_RX_STS_PAR_ERROR | 
 595              		.loc 1 127 0
 596 0016 97F90330 		ldrsb	r3, [r7, #3]
 597 001a 03F01E03 		and	r3, r3, #30
 598 001e 5AB2     		sxtb	r2, r3
 599 0020 984B     		ldr	r3, .L66+4
 600 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 601 0024 5BB2     		sxtb	r3, r3
 602 0026 1343     		orrs	r3, r3, r2
 603 0028 5BB2     		sxtb	r3, r3
 604 002a DAB2     		uxtb	r2, r3
 605 002c 954B     		ldr	r3, .L66+4
 606 002e 1A70     		strb	r2, [r3]
 607              	.L32:
 128:main.c        ****                                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN);
 129:main.c        ****         }
 130:main.c        ****         
 131:main.c        ****         if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 608              		.loc 1 131 0
 609 0030 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 610 0032 03F02003 		and	r3, r3, #32
 611 0036 002B     		cmp	r3, #0
 612 0038 00F05A81 		beq	.L33
 132:main.c        ****         {
 133:main.c        ****             /* Read data from the RX data register */
 134:main.c        ****             rxData = UART_RXDATA_REG;
 613              		.loc 1 134 0
 614 003c 924B     		ldr	r3, .L66+8
 615 003e 1B78     		ldrb	r3, [r3]
 616 0040 BB70     		strb	r3, [r7, #2]
 135:main.c        ****             help[tt] = rxData;
 617              		.loc 1 135 0
 618 0042 924B     		ldr	r3, .L66+12
 619 0044 1B68     		ldr	r3, [r3]
 620 0046 9249     		ldr	r1, .L66+16
 621 0048 BA78     		ldrb	r2, [r7, #2]
 622 004a CA54     		strb	r2, [r1, r3]
 136:main.c        ****             tt++;
 623              		.loc 1 136 0
 624 004c 8F4B     		ldr	r3, .L66+12
 625 004e 1B68     		ldr	r3, [r3]
 626 0050 0133     		adds	r3, r3, #1
 627 0052 8E4A     		ldr	r2, .L66+12
 628 0054 1360     		str	r3, [r2]
 137:main.c        ****             if(tt==99){tt=0;}
 629              		.loc 1 137 0
 630 0056 8D4B     		ldr	r3, .L66+12
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 15


 631 0058 1B68     		ldr	r3, [r3]
 632 005a 632B     		cmp	r3, #99
 633 005c 02D1     		bne	.L34
 634              		.loc 1 137 0 is_stmt 0 discriminator 1
 635 005e 8B4B     		ldr	r3, .L66+12
 636 0060 0022     		movs	r2, #0
 637 0062 1A60     		str	r2, [r3]
 638              	.L34:
 138:main.c        ****             if(rxData=='b' ){start_calib=1;};
 639              		.loc 1 138 0 is_stmt 1
 640 0064 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 641 0066 622B     		cmp	r3, #98
 642 0068 02D1     		bne	.L35
 643              		.loc 1 138 0 is_stmt 0 discriminator 1
 644 006a 8A4B     		ldr	r3, .L66+20
 645 006c 0122     		movs	r2, #1
 646 006e 1A60     		str	r2, [r3]
 647              	.L35:
 139:main.c        ****             switch(data_read_mode)
 648              		.loc 1 139 0 is_stmt 1
 649 0070 894B     		ldr	r3, .L66+24
 650 0072 1B68     		ldr	r3, [r3]
 651 0074 062B     		cmp	r3, #6
 652 0076 00F23B81 		bhi	.L33
 653 007a 01A2     		adr	r2, .L38
 654 007c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 655              		.p2align 2
 656              	.L38:
 657 0080 9D000000 		.word	.L37+1
 658 0084 D3000000 		.word	.L39+1
 659 0088 1B010000 		.word	.L40+1
 660 008c 9D010000 		.word	.L41+1
 661 0090 DF010000 		.word	.L42+1
 662 0094 21020000 		.word	.L43+1
 663 0098 63020000 		.word	.L44+1
 664              		.p2align 1
 665              	.L37:
 140:main.c        ****             {
 141:main.c        ****                 case 0:
 142:main.c        ****                     if(rxData=='{' )
 666              		.loc 1 142 0
 667 009c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 668 009e 7B2B     		cmp	r3, #123
 669 00a0 40F02381 		bne	.L64
 670              	.LBB7:
 143:main.c        ****                     {
 144:main.c        ****                         //aaaa
 145:main.c        ****                         for(int pp=1;pp<20;pp++){
 671              		.loc 1 145 0
 672 00a4 0123     		movs	r3, #1
 673 00a6 7B60     		str	r3, [r7, #4]
 674 00a8 07E0     		b	.L46
 675              	.L47:
 146:main.c        ****                             temp[pp] = ' ';
 676              		.loc 1 146 0 discriminator 3
 677 00aa 7C4A     		ldr	r2, .L66+28
 678 00ac 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 16


 679 00ae 1344     		add	r3, r3, r2
 680 00b0 2022     		movs	r2, #32
 681 00b2 1A70     		strb	r2, [r3]
 145:main.c        ****                             temp[pp] = ' ';
 682              		.loc 1 145 0 discriminator 3
 683 00b4 7B68     		ldr	r3, [r7, #4]
 684 00b6 0133     		adds	r3, r3, #1
 685 00b8 7B60     		str	r3, [r7, #4]
 686              	.L46:
 145:main.c        ****                             temp[pp] = ' ';
 687              		.loc 1 145 0 is_stmt 0 discriminator 1
 688 00ba 7B68     		ldr	r3, [r7, #4]
 689 00bc 132B     		cmp	r3, #19
 690 00be F4DD     		ble	.L47
 691              	.LBE7:
 147:main.c        ****                         }
 148:main.c        ****                         temp[0] = '\0';
 692              		.loc 1 148 0 is_stmt 1
 693 00c0 764B     		ldr	r3, .L66+28
 694 00c2 0022     		movs	r2, #0
 695 00c4 1A70     		strb	r2, [r3]
 149:main.c        ****                         data_read_mode++;
 696              		.loc 1 149 0
 697 00c6 744B     		ldr	r3, .L66+24
 698 00c8 1B68     		ldr	r3, [r3]
 699 00ca 0133     		adds	r3, r3, #1
 700 00cc 724A     		ldr	r2, .L66+24
 701 00ce 1360     		str	r3, [r2]
 150:main.c        ****                     }
 151:main.c        ****                 break;
 702              		.loc 1 151 0
 703 00d0 0BE1     		b	.L64
 704              	.L39:
 152:main.c        ****                 case 1:
 153:main.c        ****                     if(rxData=='x'){
 705              		.loc 1 153 0
 706 00d2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 707 00d4 782B     		cmp	r3, #120
 708 00d6 03D1     		bne	.L48
 154:main.c        ****                         data_read_mode = 2;}
 709              		.loc 1 154 0
 710 00d8 6F4B     		ldr	r3, .L66+24
 711 00da 0222     		movs	r2, #2
 712 00dc 1A60     		str	r2, [r3]
 155:main.c        ****                     else if(rxData=='p'){
 156:main.c        ****                         data_read_mode = 3;}
 157:main.c        ****                     else if(rxData=='i'){
 158:main.c        ****                         data_read_mode = 4;}
 159:main.c        ****                     else if(rxData=='d'){
 160:main.c        ****                         data_read_mode = 5;}
 161:main.c        ****                     else if(rxData=='c'){
 162:main.c        ****                         data_read_mode = 6;}
 163:main.c        ****                 break;
 713              		.loc 1 163 0
 714 00de 06E1     		b	.L65
 715              	.L48:
 155:main.c        ****                     else if(rxData=='p'){
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 17


 716              		.loc 1 155 0
 717 00e0 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 718 00e2 702B     		cmp	r3, #112
 719 00e4 03D1     		bne	.L50
 156:main.c        ****                     else if(rxData=='i'){
 720              		.loc 1 156 0
 721 00e6 6C4B     		ldr	r3, .L66+24
 722 00e8 0322     		movs	r2, #3
 723 00ea 1A60     		str	r2, [r3]
 724              		.loc 1 163 0
 725 00ec FFE0     		b	.L65
 726              	.L50:
 157:main.c        ****                         data_read_mode = 4;}
 727              		.loc 1 157 0
 728 00ee BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 729 00f0 692B     		cmp	r3, #105
 730 00f2 03D1     		bne	.L51
 158:main.c        ****                     else if(rxData=='d'){
 731              		.loc 1 158 0
 732 00f4 684B     		ldr	r3, .L66+24
 733 00f6 0422     		movs	r2, #4
 734 00f8 1A60     		str	r2, [r3]
 735              		.loc 1 163 0
 736 00fa F8E0     		b	.L65
 737              	.L51:
 159:main.c        ****                         data_read_mode = 5;}
 738              		.loc 1 159 0
 739 00fc BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 740 00fe 642B     		cmp	r3, #100
 741 0100 03D1     		bne	.L52
 160:main.c        ****                     else if(rxData=='c'){
 742              		.loc 1 160 0
 743 0102 654B     		ldr	r3, .L66+24
 744 0104 0522     		movs	r2, #5
 745 0106 1A60     		str	r2, [r3]
 746              		.loc 1 163 0
 747 0108 F1E0     		b	.L65
 748              	.L52:
 161:main.c        ****                         data_read_mode = 6;}
 749              		.loc 1 161 0
 750 010a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 751 010c 632B     		cmp	r3, #99
 752 010e 40F0EE80 		bne	.L65
 162:main.c        ****                 break;
 753              		.loc 1 162 0
 754 0112 614B     		ldr	r3, .L66+24
 755 0114 0622     		movs	r2, #6
 756 0116 1A60     		str	r2, [r3]
 757              		.loc 1 163 0
 758 0118 E9E0     		b	.L65
 759              	.L40:
 164:main.c        ****                 case 2: //x
 165:main.c        ****                     if(rxData != '}'){
 760              		.loc 1 165 0
 761 011a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 762 011c 7D2B     		cmp	r3, #125
 763 011e 0AD0     		beq	.L53
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 18


 166:main.c        ****                         temp[nn] = rxData;
 764              		.loc 1 166 0
 765 0120 5F4B     		ldr	r3, .L66+32
 766 0122 1B68     		ldr	r3, [r3]
 767 0124 5D49     		ldr	r1, .L66+28
 768 0126 BA78     		ldrb	r2, [r7, #2]
 769 0128 CA54     		strb	r2, [r1, r3]
 167:main.c        ****                         nn++;
 770              		.loc 1 167 0
 771 012a 5D4B     		ldr	r3, .L66+32
 772 012c 1B68     		ldr	r3, [r3]
 773 012e 0133     		adds	r3, r3, #1
 774 0130 5B4A     		ldr	r2, .L66+32
 775 0132 1360     		str	r3, [r2]
 168:main.c        ****                     }
 169:main.c        ****                     else {
 170:main.c        ****                         
 171:main.c        ****                         new_pos[cyl_no] = (int) strtol(temp, (char **)NULL, 10);
 172:main.c        ****                         new_pos_set[cyl_no] = 1;
 173:main.c        ****                         nn=0; 
 174:main.c        ****                         temp[0] = '\0';
 175:main.c        ****                         data_read_mode = 0;
 176:main.c        ****                         sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[
 177:main.c        ****                         UART_PutString(sendValue);
 178:main.c        ****                     }
 179:main.c        ****                   
 180:main.c        ****                 break;
 776              		.loc 1 180 0
 777 0134 DCE0     		b	.L33
 778              	.L53:
 171:main.c        ****                         new_pos_set[cyl_no] = 1;
 779              		.loc 1 171 0
 780 0136 5B4B     		ldr	r3, .L66+36
 781 0138 1C68     		ldr	r4, [r3]
 782 013a 0A22     		movs	r2, #10
 783 013c 0021     		movs	r1, #0
 784 013e 5748     		ldr	r0, .L66+28
 785 0140 FFF7FEFF 		bl	strtol
 786 0144 0246     		mov	r2, r0
 787 0146 584B     		ldr	r3, .L66+40
 788 0148 43F82420 		str	r2, [r3, r4, lsl #2]
 172:main.c        ****                         nn=0; 
 789              		.loc 1 172 0
 790 014c 554B     		ldr	r3, .L66+36
 791 014e 1B68     		ldr	r3, [r3]
 792 0150 564A     		ldr	r2, .L66+44
 793 0152 0121     		movs	r1, #1
 794 0154 42F82310 		str	r1, [r2, r3, lsl #2]
 173:main.c        ****                         temp[0] = '\0';
 795              		.loc 1 173 0
 796 0158 514B     		ldr	r3, .L66+32
 797 015a 0022     		movs	r2, #0
 798 015c 1A60     		str	r2, [r3]
 174:main.c        ****                         data_read_mode = 0;
 799              		.loc 1 174 0
 800 015e 4F4B     		ldr	r3, .L66+28
 801 0160 0022     		movs	r2, #0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 19


 802 0162 1A70     		strb	r2, [r3]
 175:main.c        ****                         sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[
 803              		.loc 1 175 0
 804 0164 4C4B     		ldr	r3, .L66+24
 805 0166 0022     		movs	r2, #0
 806 0168 1A60     		str	r2, [r3]
 176:main.c        ****                         UART_PutString(sendValue);
 807              		.loc 1 176 0
 808 016a 514B     		ldr	r3, .L66+48
 809 016c 1B88     		ldrh	r3, [r3]
 810 016e 1D46     		mov	r5, r3
 811 0170 504B     		ldr	r3, .L66+52
 812 0172 18CB     		ldmia	r3, {r3-r4}
 813 0174 4E4A     		ldr	r2, .L66+48
 814 0176 5288     		ldrh	r2, [r2, #2]
 815 0178 1046     		mov	r0, r2
 816 017a 4E4A     		ldr	r2, .L66+52
 817 017c D2E90212 		ldrd	r1, [r2, #8]
 818 0180 CDE90412 		strd	r1, [sp, #16]
 819 0184 0290     		str	r0, [sp, #8]
 820 0186 CDE90034 		strd	r3, [sp]
 821 018a 2A46     		mov	r2, r5
 822 018c 4A49     		ldr	r1, .L66+56
 823 018e 4B48     		ldr	r0, .L66+60
 824 0190 FFF7FEFF 		bl	sprintf
 177:main.c        ****                     }
 825              		.loc 1 177 0
 826 0194 4948     		ldr	r0, .L66+60
 827 0196 FFF7FEFF 		bl	UART_PutString
 828              		.loc 1 180 0
 829 019a A9E0     		b	.L33
 830              	.L41:
 181:main.c        ****                 case 3: //p
 182:main.c        ****                     if(rxData != '}'){
 831              		.loc 1 182 0
 832 019c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 833 019e 7D2B     		cmp	r3, #125
 834 01a0 0AD0     		beq	.L55
 183:main.c        ****                         temp[nn] = rxData;
 835              		.loc 1 183 0
 836 01a2 3F4B     		ldr	r3, .L66+32
 837 01a4 1B68     		ldr	r3, [r3]
 838 01a6 3D49     		ldr	r1, .L66+28
 839 01a8 BA78     		ldrb	r2, [r7, #2]
 840 01aa CA54     		strb	r2, [r1, r3]
 184:main.c        ****                         nn++;
 841              		.loc 1 184 0
 842 01ac 3C4B     		ldr	r3, .L66+32
 843 01ae 1B68     		ldr	r3, [r3]
 844 01b0 0133     		adds	r3, r3, #1
 845 01b2 3B4A     		ldr	r2, .L66+32
 846 01b4 1360     		str	r3, [r2]
 185:main.c        ****                     }
 186:main.c        ****                     else {
 187:main.c        ****                         pid[0] = strtod(temp, NULL);
 188:main.c        ****                         nn=0;
 189:main.c        ****                         temp[0] = '\0';
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 20


 190:main.c        ****                         data_read_mode = 0;
 191:main.c        ****                     }
 192:main.c        ****                     
 193:main.c        ****                 break;
 847              		.loc 1 193 0
 848 01b6 9BE0     		b	.L33
 849              	.L55:
 187:main.c        ****                         nn=0;
 850              		.loc 1 187 0
 851 01b8 0021     		movs	r1, #0
 852 01ba 3848     		ldr	r0, .L66+28
 853 01bc FFF7FEFF 		bl	strtod
 854 01c0 0346     		mov	r3, r0
 855 01c2 0C46     		mov	r4, r1
 856 01c4 3E4A     		ldr	r2, .L66+64
 857 01c6 C2E90034 		strd	r3, [r2]
 188:main.c        ****                         temp[0] = '\0';
 858              		.loc 1 188 0
 859 01ca 354B     		ldr	r3, .L66+32
 860 01cc 0022     		movs	r2, #0
 861 01ce 1A60     		str	r2, [r3]
 189:main.c        ****                         data_read_mode = 0;
 862              		.loc 1 189 0
 863 01d0 324B     		ldr	r3, .L66+28
 864 01d2 0022     		movs	r2, #0
 865 01d4 1A70     		strb	r2, [r3]
 190:main.c        ****                     }
 866              		.loc 1 190 0
 867 01d6 304B     		ldr	r3, .L66+24
 868 01d8 0022     		movs	r2, #0
 869 01da 1A60     		str	r2, [r3]
 870              		.loc 1 193 0
 871 01dc 88E0     		b	.L33
 872              	.L42:
 194:main.c        ****                 case 4: //i
 195:main.c        ****                     if(rxData != '}'){
 873              		.loc 1 195 0
 874 01de BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 875 01e0 7D2B     		cmp	r3, #125
 876 01e2 0AD0     		beq	.L57
 196:main.c        ****                         temp[nn] = rxData;
 877              		.loc 1 196 0
 878 01e4 2E4B     		ldr	r3, .L66+32
 879 01e6 1B68     		ldr	r3, [r3]
 880 01e8 2C49     		ldr	r1, .L66+28
 881 01ea BA78     		ldrb	r2, [r7, #2]
 882 01ec CA54     		strb	r2, [r1, r3]
 197:main.c        ****                         nn++;
 883              		.loc 1 197 0
 884 01ee 2C4B     		ldr	r3, .L66+32
 885 01f0 1B68     		ldr	r3, [r3]
 886 01f2 0133     		adds	r3, r3, #1
 887 01f4 2A4A     		ldr	r2, .L66+32
 888 01f6 1360     		str	r3, [r2]
 198:main.c        ****                     }
 199:main.c        ****                     else {
 200:main.c        ****                         pid[1] = strtod(temp, NULL);
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 21


 201:main.c        ****                         nn=0;
 202:main.c        ****                         temp[0] = '\0';
 203:main.c        ****                         data_read_mode = 0;
 204:main.c        ****                     }
 205:main.c        ****                 break;
 889              		.loc 1 205 0
 890 01f8 7AE0     		b	.L33
 891              	.L57:
 200:main.c        ****                         nn=0;
 892              		.loc 1 200 0
 893 01fa 0021     		movs	r1, #0
 894 01fc 2748     		ldr	r0, .L66+28
 895 01fe FFF7FEFF 		bl	strtod
 896 0202 0346     		mov	r3, r0
 897 0204 0C46     		mov	r4, r1
 898 0206 2E4A     		ldr	r2, .L66+64
 899 0208 C2E90234 		strd	r3, [r2, #8]
 201:main.c        ****                         temp[0] = '\0';
 900              		.loc 1 201 0
 901 020c 244B     		ldr	r3, .L66+32
 902 020e 0022     		movs	r2, #0
 903 0210 1A60     		str	r2, [r3]
 202:main.c        ****                         data_read_mode = 0;
 904              		.loc 1 202 0
 905 0212 224B     		ldr	r3, .L66+28
 906 0214 0022     		movs	r2, #0
 907 0216 1A70     		strb	r2, [r3]
 203:main.c        ****                     }
 908              		.loc 1 203 0
 909 0218 1F4B     		ldr	r3, .L66+24
 910 021a 0022     		movs	r2, #0
 911 021c 1A60     		str	r2, [r3]
 912              		.loc 1 205 0
 913 021e 67E0     		b	.L33
 914              	.L43:
 206:main.c        ****                 case 5: //d
 207:main.c        ****                     if(rxData != '}'){
 915              		.loc 1 207 0
 916 0220 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 917 0222 7D2B     		cmp	r3, #125
 918 0224 0AD0     		beq	.L59
 208:main.c        ****                         temp[nn] = rxData;
 919              		.loc 1 208 0
 920 0226 1E4B     		ldr	r3, .L66+32
 921 0228 1B68     		ldr	r3, [r3]
 922 022a 1C49     		ldr	r1, .L66+28
 923 022c BA78     		ldrb	r2, [r7, #2]
 924 022e CA54     		strb	r2, [r1, r3]
 209:main.c        ****                         nn++;
 925              		.loc 1 209 0
 926 0230 1B4B     		ldr	r3, .L66+32
 927 0232 1B68     		ldr	r3, [r3]
 928 0234 0133     		adds	r3, r3, #1
 929 0236 1A4A     		ldr	r2, .L66+32
 930 0238 1360     		str	r3, [r2]
 210:main.c        ****                     }
 211:main.c        ****                     else {
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 22


 212:main.c        ****                         pid[2] = strtod(temp, NULL);
 213:main.c        ****                         nn=0;
 214:main.c        ****                         temp[0] = '\0';
 215:main.c        ****                         data_read_mode = 0;
 216:main.c        ****                     }
 217:main.c        ****                 break;
 931              		.loc 1 217 0
 932 023a 59E0     		b	.L33
 933              	.L59:
 212:main.c        ****                         nn=0;
 934              		.loc 1 212 0
 935 023c 0021     		movs	r1, #0
 936 023e 1748     		ldr	r0, .L66+28
 937 0240 FFF7FEFF 		bl	strtod
 938 0244 0346     		mov	r3, r0
 939 0246 0C46     		mov	r4, r1
 940 0248 1D4A     		ldr	r2, .L66+64
 941 024a C2E90434 		strd	r3, [r2, #16]
 213:main.c        ****                         temp[0] = '\0';
 942              		.loc 1 213 0
 943 024e 144B     		ldr	r3, .L66+32
 944 0250 0022     		movs	r2, #0
 945 0252 1A60     		str	r2, [r3]
 214:main.c        ****                         data_read_mode = 0;
 946              		.loc 1 214 0
 947 0254 114B     		ldr	r3, .L66+28
 948 0256 0022     		movs	r2, #0
 949 0258 1A70     		strb	r2, [r3]
 215:main.c        ****                     }
 950              		.loc 1 215 0
 951 025a 0F4B     		ldr	r3, .L66+24
 952 025c 0022     		movs	r2, #0
 953 025e 1A60     		str	r2, [r3]
 954              		.loc 1 217 0
 955 0260 46E0     		b	.L33
 956              	.L44:
 218:main.c        ****                 case 6: //c
 219:main.c        ****                     if(rxData != '}'){
 957              		.loc 1 219 0
 958 0262 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 959 0264 7D2B     		cmp	r3, #125
 960 0266 2DD0     		beq	.L61
 220:main.c        ****                         temp[nn] = rxData;
 961              		.loc 1 220 0
 962 0268 0D4B     		ldr	r3, .L66+32
 963 026a 1B68     		ldr	r3, [r3]
 964 026c 0B49     		ldr	r1, .L66+28
 965 026e BA78     		ldrb	r2, [r7, #2]
 966 0270 CA54     		strb	r2, [r1, r3]
 221:main.c        ****                         nn++;
 967              		.loc 1 221 0
 968 0272 0B4B     		ldr	r3, .L66+32
 969 0274 1B68     		ldr	r3, [r3]
 970 0276 0133     		adds	r3, r3, #1
 971 0278 094A     		ldr	r2, .L66+32
 972 027a 1360     		str	r3, [r2]
 222:main.c        ****                     }
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 23


 223:main.c        ****                     else {
 224:main.c        ****                         cyl_no = (int) strtol(temp, (char **)NULL, 10);
 225:main.c        ****                         nn=0; 
 226:main.c        ****                         temp[0] = '\0';
 227:main.c        ****                         data_read_mode = 0;
 228:main.c        ****                     }
 229:main.c        ****                   
 230:main.c        ****                 break;
 973              		.loc 1 230 0
 974 027c 38E0     		b	.L33
 975              	.L67:
 976 027e 00BF     		.align	2
 977              	.L66:
 978 0280 6A650040 		.word	1073767786
 979 0284 00000000 		.word	errorStatus
 980 0288 4A650040 		.word	1073767754
 981 028c 00000000 		.word	tt
 982 0290 00000000 		.word	help
 983 0294 00000000 		.word	start_calib
 984 0298 00000000 		.word	data_read_mode
 985 029c 00000000 		.word	temp
 986 02a0 00000000 		.word	nn
 987 02a4 00000000 		.word	cyl_no
 988 02a8 00000000 		.word	new_pos
 989 02ac 00000000 		.word	new_pos_set
 990 02b0 00000000 		.word	adcValue
 991 02b4 00000000 		.word	err
 992 02b8 00000000 		.word	.LC0
 993 02bc 00000000 		.word	sendValue
 994 02c0 00000000 		.word	pid
 995              	.L61:
 224:main.c        ****                         nn=0; 
 996              		.loc 1 224 0
 997 02c4 0A22     		movs	r2, #10
 998 02c6 0021     		movs	r1, #0
 999 02c8 0E48     		ldr	r0, .L68
 1000 02ca FFF7FEFF 		bl	strtol
 1001 02ce 0246     		mov	r2, r0
 1002 02d0 0D4B     		ldr	r3, .L68+4
 1003 02d2 1A60     		str	r2, [r3]
 225:main.c        ****                         temp[0] = '\0';
 1004              		.loc 1 225 0
 1005 02d4 0D4B     		ldr	r3, .L68+8
 1006 02d6 0022     		movs	r2, #0
 1007 02d8 1A60     		str	r2, [r3]
 226:main.c        ****                         data_read_mode = 0;
 1008              		.loc 1 226 0
 1009 02da 0A4B     		ldr	r3, .L68
 1010 02dc 0022     		movs	r2, #0
 1011 02de 1A70     		strb	r2, [r3]
 227:main.c        ****                     }
 1012              		.loc 1 227 0
 1013 02e0 0B4B     		ldr	r3, .L68+12
 1014 02e2 0022     		movs	r2, #0
 1015 02e4 1A60     		str	r2, [r3]
 1016              		.loc 1 230 0
 1017 02e6 00BF     		nop
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 24


 1018 02e8 02E0     		b	.L33
 1019              	.L64:
 151:main.c        ****                 case 1:
 1020              		.loc 1 151 0
 1021 02ea 00BF     		nop
 1022 02ec 00E0     		b	.L33
 1023              	.L65:
 163:main.c        ****                 case 2: //x
 1024              		.loc 1 163 0
 1025 02ee 00BF     		nop
 1026              	.L33:
 231:main.c        ****             }
 232:main.c        ****             
 233:main.c        ****             if(errorStatus == 0u)
 234:main.c        ****             {
 235:main.c        ****                 /* Send data backward */
 236:main.c        ****                 //UART_TXDATA_REG = rxData;
 237:main.c        ****             }
 238:main.c        ****         }
 239:main.c        ****     }while((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u);
 1027              		.loc 1 239 0
 1028 02f0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1029 02f2 03F02003 		and	r3, r3, #32
 1030 02f6 002B     		cmp	r3, #0
 1031 02f8 7FF485AE 		bne	.L63
 240:main.c        **** }
 1032              		.loc 1 240 0
 1033 02fc 00BF     		nop
 1034 02fe 0837     		adds	r7, r7, #8
 1035              		.cfi_def_cfa_offset 16
 1036 0300 BD46     		mov	sp, r7
 1037              		.cfi_def_cfa_register 13
 1038              		@ sp needed
 1039 0302 B0BD     		pop	{r4, r5, r7, pc}
 1040              	.L69:
 1041              		.align	2
 1042              	.L68:
 1043 0304 00000000 		.word	temp
 1044 0308 00000000 		.word	cyl_no
 1045 030c 00000000 		.word	nn
 1046 0310 00000000 		.word	data_read_mode
 1047              		.cfi_endproc
 1048              	.LFE67:
 1049              		.size	RxIsr, .-RxIsr
 1050              		.global	led_switch
 1051              		.bss
 1052              		.align	2
 1053              		.type	led_switch, %object
 1054              		.size	led_switch, 4
 1055              	led_switch:
 1056 0080 00000000 		.space	4
 1057              		.global	__aeabi_i2d
 1058              		.global	__aeabi_dsub
 1059              		.global	__aeabi_dadd
 1060              		.global	__aeabi_dmul
 1061              		.global	__aeabi_ddiv
 1062              		.global	__aeabi_d2iz
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 25


 1063              		.section	.rodata
 1064              		.align	2
 1065              	.LC1:
 1066 0018 55505045 		.ascii	"UPPER:\011Lower Offset: %d \011Upper Offset: %d \011"
 1066      523A094C 
 1066      6F776572 
 1066      204F6666 
 1066      7365743A 
 1067 0043 20414443 		.ascii	" ADC Diff: %d\012\000"
 1067      20446966 
 1067      663A2025 
 1067      640A00
 1068 0052 0000     		.align	2
 1069              	.LC2:
 1070 0054 4C4F5745 		.ascii	"LOWER:\011Lower Offset: %d \011Upper Offset: %d \011"
 1070      523A094C 
 1070      6F776572 
 1070      204F6666 
 1070      7365743A 
 1071 007f 20414443 		.ascii	" ADC Diff: %d\012\000"
 1071      20446966 
 1071      663A2025 
 1071      640A00
 1072 008e 0000     		.align	2
 1073              	.LC3:
 1074 0090 4C6F7765 		.ascii	"Lower Offset: %d \011 Upper Offset: %d \012\000"
 1074      72204F66 
 1074      66736574 
 1074      3A202564 
 1074      20092055 
 1075              		.global	__aeabi_ui2d
 1076              		.section	.text.main,"ax",%progbits
 1077              		.align	2
 1078              		.global	main
 1079              		.thumb
 1080              		.thumb_func
 1081              		.type	main, %function
 1082              	main:
 1083              	.LFB68:
 241:main.c        ****     
 242:main.c        **** 
 243:main.c        **** 
 244:main.c        **** int led_switch = 0;
 245:main.c        **** int main()
 246:main.c        **** {
 1084              		.loc 1 246 0
 1085              		.cfi_startproc
 1086              		@ args = 0, pretend = 0, frame = 64
 1087              		@ frame_needed = 1, uses_anonymous_args = 0
 1088 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1089              		.cfi_def_cfa_offset 20
 1090              		.cfi_offset 4, -20
 1091              		.cfi_offset 5, -16
 1092              		.cfi_offset 6, -12
 1093              		.cfi_offset 7, -8
 1094              		.cfi_offset 14, -4
 1095 0002 97B0     		sub	sp, sp, #92
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 26


 1096              		.cfi_def_cfa_offset 112
 1097 0004 06AF     		add	r7, sp, #24
 1098              		.cfi_def_cfa 7, 88
 247:main.c        ****     
 248:main.c        ****     //PWM variables
 249:main.c        ****     PWM_0_Start();
 1099              		.loc 1 249 0
 1100 0006 FFF7FEFF 		bl	PWM_0_Start
 250:main.c        ****     PWM_1_Start();
 1101              		.loc 1 250 0
 1102 000a FFF7FEFF 		bl	PWM_1_Start
 251:main.c        ****     PWM_2_Start();
 1103              		.loc 1 251 0
 1104 000e FFF7FEFF 		bl	PWM_2_Start
 252:main.c        ****     PWM_3_Start();
 1105              		.loc 1 252 0
 1106 0012 FFF7FEFF 		bl	PWM_3_Start
 253:main.c        ****     ADC_0_Start();
 1107              		.loc 1 253 0
 1108 0016 FFF7FEFF 		bl	ADC_0_Start
 254:main.c        ****     ADC_0_StartConvert();
 1109              		.loc 1 254 0
 1110 001a FFF7FEFF 		bl	ADC_0_StartConvert
 255:main.c        ****     AMux_0_Init();
 1111              		.loc 1 255 0
 1112 001e FFF7FEFF 		bl	AMux_0_Start
 256:main.c        ****     
 257:main.c        ****     UART_Start();           /* Start communication component */
 1113              		.loc 1 257 0
 1114 0022 FFF7FEFF 		bl	UART_Start
 258:main.c        **** 
 259:main.c        **** #if(INTERRUPT_CODE_ENABLED == ENABLED)
 260:main.c        ****     isr_rx_StartEx(RxIsr);
 1115              		.loc 1 260 0
 1116 0026 9E48     		ldr	r0, .L88+8
 1117 0028 FFF7FEFF 		bl	isr_rx_StartEx
 261:main.c        ****     update_median_isr_StartEx(adc_update);
 1118              		.loc 1 261 0
 1119 002c 9D48     		ldr	r0, .L88+12
 1120 002e FFF7FEFF 		bl	update_median_isr_StartEx
 262:main.c        **** #endif /* INTERRUPT_CODE_ENABLED == ENABLED */
 263:main.c        ****     
 264:main.c        ****     CyGlobalIntEnable;      /* Enable global interrupts. */
 1121              		.loc 1 264 0
 1122              		.syntax unified
 1123              	@ 264 "main.c" 1
 1124 0032 62B6     		CPSIE   i
 1125              	@ 0 "" 2
 265:main.c        ****     
 266:main.c        ****     double dt;
 267:main.c        ****     double time;
 268:main.c        ****     
 269:main.c        ****     dt = 0.025; //initialised dt, corrected by timer  below
 1126              		.loc 1 269 0
 1127              		.thumb
 1128              		.syntax unified
 1129 0034 98A4     		adr	r4, .L88
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 27


 1130 0036 D4E90034 		ldrd	r3, [r4]
 1131 003a C7E90E34 		strd	r3, [r7, #56]
 270:main.c        **** 
 271:main.c        ****     sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[1],err[1]);
 1132              		.loc 1 271 0
 1133 003e 9A4B     		ldr	r3, .L88+16
 1134 0040 1B88     		ldrh	r3, [r3]
 1135 0042 1D46     		mov	r5, r3
 1136 0044 994B     		ldr	r3, .L88+20
 1137 0046 18CB     		ldmia	r3, {r3-r4}
 1138 0048 974A     		ldr	r2, .L88+16
 1139 004a 5288     		ldrh	r2, [r2, #2]
 1140 004c 1046     		mov	r0, r2
 1141 004e 974A     		ldr	r2, .L88+20
 1142 0050 D2E90212 		ldrd	r1, [r2, #8]
 1143 0054 CDE90412 		strd	r1, [sp, #16]
 1144 0058 0290     		str	r0, [sp, #8]
 1145 005a CDE90034 		strd	r3, [sp]
 1146 005e 2A46     		mov	r2, r5
 1147 0060 9349     		ldr	r1, .L88+24
 1148 0062 9448     		ldr	r0, .L88+28
 1149 0064 FFF7FEFF 		bl	sprintf
 272:main.c        ****     UART_PutString(sendValue);
 1150              		.loc 1 272 0
 1151 0068 9248     		ldr	r0, .L88+28
 1152 006a FFF7FEFF 		bl	UART_PutString
 273:main.c        ****     
 274:main.c        ****     median_timer_Start();
 1153              		.loc 1 274 0
 1154 006e FFF7FEFF 		bl	median_timer_Start
 275:main.c        ****     Timer_1_Start();
 1155              		.loc 1 275 0
 1156 0072 FFF7FEFF 		bl	Timer_1_Start
 276:main.c        ****    int send_now = 0;
 1157              		.loc 1 276 0
 1158 0076 0023     		movs	r3, #0
 1159 0078 7B61     		str	r3, [r7, #20]
 1160              	.L87:
 277:main.c        ****     for(;;)
 278:main.c        ****     {
 279:main.c        ****         Timer_1_WriteCounter(65535);
 1161              		.loc 1 279 0
 1162 007a 4FF6FF70 		movw	r0, #65535
 1163 007e FFF7FEFF 		bl	Timer_1_WriteCounter
 1164              	.LBB8:
 280:main.c        ****         
 281:main.c        ****         //sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[1],err[1]);
 282:main.c        ****         //UART_PutString(sendValue);
 283:main.c        ****         /* START PID CODE */
 284:main.c        ****         for(int cyl = 0;cyl<CYL_NO;cyl++){
 1165              		.loc 1 284 0
 1166 0082 0023     		movs	r3, #0
 1167 0084 7B63     		str	r3, [r7, #52]
 1168 0086 D7E0     		b	.L71
 1169              	.L73:
 285:main.c        ****             if(new_pos_set[cyl]){
 1170              		.loc 1 285 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 28


 1171 0088 8B4A     		ldr	r2, .L88+32
 1172 008a 7B6B     		ldr	r3, [r7, #52]
 1173 008c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1174 0090 002B     		cmp	r3, #0
 1175 0092 0CD0     		beq	.L72
 286:main.c        ****                 pos[cyl] = new_pos[cyl];
 1176              		.loc 1 286 0
 1177 0094 894A     		ldr	r2, .L88+36
 1178 0096 7B6B     		ldr	r3, [r7, #52]
 1179 0098 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1180 009c 8849     		ldr	r1, .L88+40
 1181 009e 7B6B     		ldr	r3, [r7, #52]
 1182 00a0 41F82320 		str	r2, [r1, r3, lsl #2]
 287:main.c        ****                 new_pos_set[cyl] = 0;
 1183              		.loc 1 287 0
 1184 00a4 844A     		ldr	r2, .L88+32
 1185 00a6 7B6B     		ldr	r3, [r7, #52]
 1186 00a8 0021     		movs	r1, #0
 1187 00aa 42F82310 		str	r1, [r2, r3, lsl #2]
 1188              	.L72:
 288:main.c        ****             }
 289:main.c        ****             
 290:main.c        ****             err[cyl] = -pos[cyl] + adcValue[cyl];
 1189              		.loc 1 290 0 discriminator 2
 1190 00ae 7E4A     		ldr	r2, .L88+16
 1191 00b0 7B6B     		ldr	r3, [r7, #52]
 1192 00b2 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1193 00b6 1946     		mov	r1, r3
 1194 00b8 814A     		ldr	r2, .L88+40
 1195 00ba 7B6B     		ldr	r3, [r7, #52]
 1196 00bc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1197 00c0 CB1A     		subs	r3, r1, r3
 1198 00c2 1846     		mov	r0, r3
 1199 00c4 FFF7FEFF 		bl	__aeabi_i2d
 1200 00c8 0346     		mov	r3, r0
 1201 00ca 0C46     		mov	r4, r1
 1202 00cc 7749     		ldr	r1, .L88+20
 1203 00ce 7A6B     		ldr	r2, [r7, #52]
 1204 00d0 D200     		lsls	r2, r2, #3
 1205 00d2 0A44     		add	r2, r2, r1
 1206 00d4 C2E90034 		strd	r3, [r2]
 291:main.c        ****             der[cyl] = err[cyl] - prev_err[cyl];
 1207              		.loc 1 291 0 discriminator 2
 1208 00d8 744A     		ldr	r2, .L88+20
 1209 00da 7B6B     		ldr	r3, [r7, #52]
 1210 00dc DB00     		lsls	r3, r3, #3
 1211 00de 1344     		add	r3, r3, r2
 1212 00e0 D3E90001 		ldrd	r0, [r3]
 1213 00e4 774A     		ldr	r2, .L88+44
 1214 00e6 7B6B     		ldr	r3, [r7, #52]
 1215 00e8 DB00     		lsls	r3, r3, #3
 1216 00ea 1344     		add	r3, r3, r2
 1217 00ec 18CB     		ldmia	r3, {r3-r4}
 1218 00ee 1A46     		mov	r2, r3
 1219 00f0 2346     		mov	r3, r4
 1220 00f2 FFF7FEFF 		bl	__aeabi_dsub
 1221 00f6 0346     		mov	r3, r0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 29


 1222 00f8 0C46     		mov	r4, r1
 1223 00fa 7349     		ldr	r1, .L88+48
 1224 00fc 7A6B     		ldr	r2, [r7, #52]
 1225 00fe D200     		lsls	r2, r2, #3
 1226 0100 0A44     		add	r2, r2, r1
 1227 0102 C2E90034 		strd	r3, [r2]
 292:main.c        ****             pid_integral[cyl] = err[cyl] + pid_integral[cyl];
 1228              		.loc 1 292 0 discriminator 2
 1229 0106 694A     		ldr	r2, .L88+20
 1230 0108 7B6B     		ldr	r3, [r7, #52]
 1231 010a DB00     		lsls	r3, r3, #3
 1232 010c 1344     		add	r3, r3, r2
 1233 010e D3E90001 		ldrd	r0, [r3]
 1234 0112 6E4A     		ldr	r2, .L88+52
 1235 0114 7B6B     		ldr	r3, [r7, #52]
 1236 0116 DB00     		lsls	r3, r3, #3
 1237 0118 1344     		add	r3, r3, r2
 1238 011a 18CB     		ldmia	r3, {r3-r4}
 1239 011c 1A46     		mov	r2, r3
 1240 011e 2346     		mov	r3, r4
 1241 0120 FFF7FEFF 		bl	__aeabi_dadd
 1242 0124 0346     		mov	r3, r0
 1243 0126 0C46     		mov	r4, r1
 1244 0128 6849     		ldr	r1, .L88+52
 1245 012a 7A6B     		ldr	r2, [r7, #52]
 1246 012c D200     		lsls	r2, r2, #3
 1247 012e 0A44     		add	r2, r2, r1
 1248 0130 C2E90034 		strd	r3, [r2]
 293:main.c        ****             pulse_temp[cyl] = pid[0] * err[cyl] + ( pid[1] * pid_integral[cyl] * dt) + ( pid[2] * d
 1249              		.loc 1 293 0 discriminator 2
 1250 0134 664B     		ldr	r3, .L88+56
 1251 0136 D3E90001 		ldrd	r0, [r3]
 1252 013a 5C4A     		ldr	r2, .L88+20
 1253 013c 7B6B     		ldr	r3, [r7, #52]
 1254 013e DB00     		lsls	r3, r3, #3
 1255 0140 1344     		add	r3, r3, r2
 1256 0142 18CB     		ldmia	r3, {r3-r4}
 1257 0144 1A46     		mov	r2, r3
 1258 0146 2346     		mov	r3, r4
 1259 0148 FFF7FEFF 		bl	__aeabi_dmul
 1260 014c 0346     		mov	r3, r0
 1261 014e 0C46     		mov	r4, r1
 1262 0150 1D46     		mov	r5, r3
 1263 0152 2646     		mov	r6, r4
 1264 0154 5E4B     		ldr	r3, .L88+56
 1265 0156 D3E90201 		ldrd	r0, [r3, #8]
 1266 015a 5C4A     		ldr	r2, .L88+52
 1267 015c 7B6B     		ldr	r3, [r7, #52]
 1268 015e DB00     		lsls	r3, r3, #3
 1269 0160 1344     		add	r3, r3, r2
 1270 0162 18CB     		ldmia	r3, {r3-r4}
 1271 0164 1A46     		mov	r2, r3
 1272 0166 2346     		mov	r3, r4
 1273 0168 FFF7FEFF 		bl	__aeabi_dmul
 1274 016c 0346     		mov	r3, r0
 1275 016e 0C46     		mov	r4, r1
 1276 0170 1846     		mov	r0, r3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 30


 1277 0172 2146     		mov	r1, r4
 1278 0174 D7E90E23 		ldrd	r2, [r7, #56]
 1279 0178 FFF7FEFF 		bl	__aeabi_dmul
 1280 017c 0346     		mov	r3, r0
 1281 017e 0C46     		mov	r4, r1
 1282 0180 1A46     		mov	r2, r3
 1283 0182 2346     		mov	r3, r4
 1284 0184 2846     		mov	r0, r5
 1285 0186 3146     		mov	r1, r6
 1286 0188 FFF7FEFF 		bl	__aeabi_dadd
 1287 018c 0346     		mov	r3, r0
 1288 018e 0C46     		mov	r4, r1
 1289 0190 1D46     		mov	r5, r3
 1290 0192 2646     		mov	r6, r4
 1291 0194 4E4B     		ldr	r3, .L88+56
 1292 0196 D3E90401 		ldrd	r0, [r3, #16]
 1293 019a 4B4A     		ldr	r2, .L88+48
 1294 019c 7B6B     		ldr	r3, [r7, #52]
 1295 019e DB00     		lsls	r3, r3, #3
 1296 01a0 1344     		add	r3, r3, r2
 1297 01a2 18CB     		ldmia	r3, {r3-r4}
 1298 01a4 1A46     		mov	r2, r3
 1299 01a6 2346     		mov	r3, r4
 1300 01a8 FFF7FEFF 		bl	__aeabi_dmul
 1301 01ac 0346     		mov	r3, r0
 1302 01ae 0C46     		mov	r4, r1
 1303 01b0 1846     		mov	r0, r3
 1304 01b2 2146     		mov	r1, r4
 1305 01b4 D7E90E23 		ldrd	r2, [r7, #56]
 1306 01b8 FFF7FEFF 		bl	__aeabi_ddiv
 1307 01bc 0346     		mov	r3, r0
 1308 01be 0C46     		mov	r4, r1
 1309 01c0 1A46     		mov	r2, r3
 1310 01c2 2346     		mov	r3, r4
 1311 01c4 2846     		mov	r0, r5
 1312 01c6 3146     		mov	r1, r6
 1313 01c8 FFF7FEFF 		bl	__aeabi_dadd
 1314 01cc 0346     		mov	r3, r0
 1315 01ce 0C46     		mov	r4, r1
 1316 01d0 1846     		mov	r0, r3
 1317 01d2 2146     		mov	r1, r4
 1318 01d4 FFF7FEFF 		bl	__aeabi_d2iz
 1319 01d8 0146     		mov	r1, r0
 1320 01da 3E4A     		ldr	r2, .L88+60
 1321 01dc 7B6B     		ldr	r3, [r7, #52]
 1322 01de 42F82310 		str	r1, [r2, r3, lsl #2]
 294:main.c        ****             
 295:main.c        ****             pulse[cyl] = pulseCheck(pulse_temp[cyl],offsets[cyl][1],offsets[cyl][0]);
 1323              		.loc 1 295 0 discriminator 2
 1324 01e2 3C4A     		ldr	r2, .L88+60
 1325 01e4 7B6B     		ldr	r3, [r7, #52]
 1326 01e6 52F82300 		ldr	r0, [r2, r3, lsl #2]
 1327 01ea 3B4A     		ldr	r2, .L88+64
 1328 01ec 7B6B     		ldr	r3, [r7, #52]
 1329 01ee DB00     		lsls	r3, r3, #3
 1330 01f0 1344     		add	r3, r3, r2
 1331 01f2 5968     		ldr	r1, [r3, #4]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 31


 1332 01f4 384A     		ldr	r2, .L88+64
 1333 01f6 7B6B     		ldr	r3, [r7, #52]
 1334 01f8 52F83330 		ldr	r3, [r2, r3, lsl #3]
 1335 01fc 1A46     		mov	r2, r3
 1336 01fe FFF7FEFF 		bl	pulseCheck
 1337 0202 0146     		mov	r1, r0
 1338 0204 354A     		ldr	r2, .L88+68
 1339 0206 7B6B     		ldr	r3, [r7, #52]
 1340 0208 42F82310 		str	r1, [r2, r3, lsl #2]
 296:main.c        ****             
 297:main.c        ****             writePWM(cyl,pulse[cyl]);
 1341              		.loc 1 297 0 discriminator 2
 1342 020c 334A     		ldr	r2, .L88+68
 1343 020e 7B6B     		ldr	r3, [r7, #52]
 1344 0210 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1345 0214 1946     		mov	r1, r3
 1346 0216 786B     		ldr	r0, [r7, #52]
 1347 0218 FFF7FEFF 		bl	writePWM
 298:main.c        ****             prev_err[cyl] = err[cyl];
 1348              		.loc 1 298 0 discriminator 2
 1349 021c 234A     		ldr	r2, .L88+20
 1350 021e 7B6B     		ldr	r3, [r7, #52]
 1351 0220 DB00     		lsls	r3, r3, #3
 1352 0222 1344     		add	r3, r3, r2
 1353 0224 18CB     		ldmia	r3, {r3-r4}
 1354 0226 2749     		ldr	r1, .L88+44
 1355 0228 7A6B     		ldr	r2, [r7, #52]
 1356 022a D200     		lsls	r2, r2, #3
 1357 022c 0A44     		add	r2, r2, r1
 1358 022e C2E90034 		strd	r3, [r2]
 284:main.c        ****             if(new_pos_set[cyl]){
 1359              		.loc 1 284 0 discriminator 2
 1360 0232 7B6B     		ldr	r3, [r7, #52]
 1361 0234 0133     		adds	r3, r3, #1
 1362 0236 7B63     		str	r3, [r7, #52]
 1363              	.L71:
 284:main.c        ****             if(new_pos_set[cyl]){
 1364              		.loc 1 284 0 is_stmt 0 discriminator 1
 1365 0238 7B6B     		ldr	r3, [r7, #52]
 1366 023a 012B     		cmp	r3, #1
 1367 023c 7FF724AF 		ble	.L73
 1368              	.LBE8:
 299:main.c        ****         }
 300:main.c        ****         
 301:main.c        ****         
 302:main.c        ****         /* END PID CODE */
 303:main.c        ****         if(start_calib){
 1369              		.loc 1 303 0 is_stmt 1
 1370 0240 274B     		ldr	r3, .L88+72
 1371 0242 1B68     		ldr	r3, [r3]
 1372 0244 002B     		cmp	r3, #0
 1373 0246 00F0DA80 		beq	.L74
 1374              	.LBB9:
 304:main.c        ****             int calib_cyl = 1;
 1375              		.loc 1 304 0
 1376 024a 0123     		movs	r3, #1
 1377 024c 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 32


 305:main.c        ****             int upper_offset_set = 0;
 1378              		.loc 1 305 0
 1379 024e 0023     		movs	r3, #0
 1380 0250 3B63     		str	r3, [r7, #48]
 306:main.c        ****             int lower_offset_set = 0;
 1381              		.loc 1 306 0
 1382 0252 0023     		movs	r3, #0
 1383 0254 FB62     		str	r3, [r7, #44]
 307:main.c        ****             int upper_offset = 120;
 1384              		.loc 1 307 0
 1385 0256 7823     		movs	r3, #120
 1386 0258 BB62     		str	r3, [r7, #40]
 308:main.c        ****             int lower_offset = -120;
 1387              		.loc 1 308 0
 1388 025a 6FF07703 		mvn	r3, #119
 1389 025e 7B62     		str	r3, [r7, #36]
 309:main.c        ****             int lower_check_no = 0;
 1390              		.loc 1 309 0
 1391 0260 0023     		movs	r3, #0
 1392 0262 3B62     		str	r3, [r7, #32]
 310:main.c        ****             int upper_check_no = 0;
 1393              		.loc 1 310 0
 1394 0264 0023     		movs	r3, #0
 1395 0266 FB61     		str	r3, [r7, #28]
 311:main.c        ****             uint16 prev_adcValue = adcValue[0];
 1396              		.loc 1 311 0
 1397 0268 0F4B     		ldr	r3, .L88+16
 1398 026a 1B88     		ldrh	r3, [r3]	@ movhi
 1399 026c FB81     		strh	r3, [r7, #14]	@ movhi
 312:main.c        ****             uint16 diff = 0;
 1400              		.loc 1 312 0
 1401 026e 0023     		movs	r3, #0
 1402 0270 BB81     		strh	r3, [r7, #12]	@ movhi
 1403              	.LBB10:
 313:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1404              		.loc 1 313 0
 1405 0272 0023     		movs	r3, #0
 1406 0274 BB61     		str	r3, [r7, #24]
 1407 0276 06E0     		b	.L75
 1408              	.L76:
 314:main.c        ****                 writePWM(g,0);
 1409              		.loc 1 314 0 discriminator 3
 1410 0278 0021     		movs	r1, #0
 1411 027a B869     		ldr	r0, [r7, #24]
 1412 027c FFF7FEFF 		bl	writePWM
 313:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1413              		.loc 1 313 0 discriminator 3
 1414 0280 BB69     		ldr	r3, [r7, #24]
 1415 0282 0133     		adds	r3, r3, #1
 1416 0284 BB61     		str	r3, [r7, #24]
 1417              	.L75:
 313:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1418              		.loc 1 313 0 is_stmt 0 discriminator 1
 1419 0286 BB69     		ldr	r3, [r7, #24]
 1420 0288 012B     		cmp	r3, #1
 1421 028a F5DD     		ble	.L76
 1422              	.LBE10:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 33


 315:main.c        ****                 
 316:main.c        ****             CyDelay(1000);
 1423              		.loc 1 316 0 is_stmt 1
 1424 028c 4FF47A70 		mov	r0, #1000
 1425 0290 FFF7FEFF 		bl	CyDelay
 317:main.c        ****         
 318:main.c        ****             while(upper_offset_set==0 || lower_offset_set==0){
 1426              		.loc 1 318 0
 1427 0294 A0E0     		b	.L77
 1428              	.L89:
 1429 0296 00BF     		.align	3
 1430              	.L88:
 1431 0298 9A999999 		.word	-1717986918
 1432 029c 9999993F 		.word	1067030937
 1433 02a0 00000000 		.word	RxIsr
 1434 02a4 00000000 		.word	adc_update
 1435 02a8 00000000 		.word	adcValue
 1436 02ac 00000000 		.word	err
 1437 02b0 00000000 		.word	.LC0
 1438 02b4 00000000 		.word	sendValue
 1439 02b8 00000000 		.word	new_pos_set
 1440 02bc 00000000 		.word	new_pos
 1441 02c0 00000000 		.word	pos
 1442 02c4 00000000 		.word	prev_err
 1443 02c8 00000000 		.word	der
 1444 02cc 00000000 		.word	pid_integral
 1445 02d0 00000000 		.word	pid
 1446 02d4 00000000 		.word	pulse_temp
 1447 02d8 00000000 		.word	offsets
 1448 02dc 00000000 		.word	pulse
 1449 02e0 00000000 		.word	start_calib
 1450              	.L86:
 319:main.c        ****                 
 320:main.c        ****                 prev_adcValue = adcValue[calib_cyl];
 1451              		.loc 1 320 0
 1452 02e4 5C4A     		ldr	r2, .L90+16
 1453 02e6 3B69     		ldr	r3, [r7, #16]
 1454 02e8 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 1455 02ec FB81     		strh	r3, [r7, #14]	@ movhi
 321:main.c        ****                 if(upper_offset_set==0){
 1456              		.loc 1 321 0
 1457 02ee 3B6B     		ldr	r3, [r7, #48]
 1458 02f0 002B     		cmp	r3, #0
 1459 02f2 27D1     		bne	.L78
 322:main.c        ****                     writePWM(calib_cyl,upper_offset);
 1460              		.loc 1 322 0
 1461 02f4 B96A     		ldr	r1, [r7, #40]
 1462 02f6 3869     		ldr	r0, [r7, #16]
 1463 02f8 FFF7FEFF 		bl	writePWM
 323:main.c        ****                     CyDelay(200);
 1464              		.loc 1 323 0
 1465 02fc C820     		movs	r0, #200
 1466 02fe FFF7FEFF 		bl	CyDelay
 324:main.c        ****                     diff = abs(prev_adcValue-adcValue[calib_cyl]);
 1467              		.loc 1 324 0
 1468 0302 FB89     		ldrh	r3, [r7, #14]
 1469 0304 5449     		ldr	r1, .L90+16
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 34


 1470 0306 3A69     		ldr	r2, [r7, #16]
 1471 0308 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1472 030c 9B1A     		subs	r3, r3, r2
 1473 030e 002B     		cmp	r3, #0
 1474 0310 B8BF     		it	lt
 1475 0312 5B42     		rsblt	r3, r3, #0
 1476 0314 BB81     		strh	r3, [r7, #12]	@ movhi
 325:main.c        ****                     if(diff>10){
 1477              		.loc 1 325 0
 1478 0316 BB89     		ldrh	r3, [r7, #12]
 1479 0318 0A2B     		cmp	r3, #10
 1480 031a 03D9     		bls	.L79
 326:main.c        ****                         upper_check_no ++;;
 1481              		.loc 1 326 0
 1482 031c FB69     		ldr	r3, [r7, #28]
 1483 031e 0133     		adds	r3, r3, #1
 1484 0320 FB61     		str	r3, [r7, #28]
 1485 0322 04E0     		b	.L80
 1486              	.L79:
 327:main.c        ****                     }else{
 328:main.c        ****                         upper_offset = upper_offset + 1;
 1487              		.loc 1 328 0
 1488 0324 BB6A     		ldr	r3, [r7, #40]
 1489 0326 0133     		adds	r3, r3, #1
 1490 0328 BB62     		str	r3, [r7, #40]
 329:main.c        ****                         upper_check_no=0;
 1491              		.loc 1 329 0
 1492 032a 0023     		movs	r3, #0
 1493 032c FB61     		str	r3, [r7, #28]
 1494              	.L80:
 330:main.c        ****                     }
 331:main.c        ****                     sprintf(sendValue,"UPPER:\tLower Offset: %d \tUpper Offset: %d \t ADC Diff: %d\
 1495              		.loc 1 331 0
 1496 032e BB89     		ldrh	r3, [r7, #12]
 1497 0330 0093     		str	r3, [sp]
 1498 0332 BB6A     		ldr	r3, [r7, #40]
 1499 0334 7A6A     		ldr	r2, [r7, #36]
 1500 0336 4949     		ldr	r1, .L90+20
 1501 0338 4948     		ldr	r0, .L90+24
 1502 033a FFF7FEFF 		bl	sprintf
 332:main.c        ****                     UART_PutString(sendValue);
 1503              		.loc 1 332 0
 1504 033e 4848     		ldr	r0, .L90+24
 1505 0340 FFF7FEFF 		bl	UART_PutString
 1506              	.L78:
 333:main.c        ****                 }
 334:main.c        ****                 writePWM(calib_cyl,0);
 1507              		.loc 1 334 0
 1508 0344 0021     		movs	r1, #0
 1509 0346 3869     		ldr	r0, [r7, #16]
 1510 0348 FFF7FEFF 		bl	writePWM
 335:main.c        ****                 CyDelay(500);
 1511              		.loc 1 335 0
 1512 034c 4FF4FA70 		mov	r0, #500
 1513 0350 FFF7FEFF 		bl	CyDelay
 336:main.c        ****                 
 337:main.c        ****                 prev_adcValue = adcValue[calib_cyl];
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 35


 1514              		.loc 1 337 0
 1515 0354 404A     		ldr	r2, .L90+16
 1516 0356 3B69     		ldr	r3, [r7, #16]
 1517 0358 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 1518 035c FB81     		strh	r3, [r7, #14]	@ movhi
 338:main.c        ****                 if(lower_offset_set==0){
 1519              		.loc 1 338 0
 1520 035e FB6A     		ldr	r3, [r7, #44]
 1521 0360 002B     		cmp	r3, #0
 1522 0362 27D1     		bne	.L81
 339:main.c        ****                     writePWM(calib_cyl,lower_offset);
 1523              		.loc 1 339 0
 1524 0364 796A     		ldr	r1, [r7, #36]
 1525 0366 3869     		ldr	r0, [r7, #16]
 1526 0368 FFF7FEFF 		bl	writePWM
 340:main.c        ****                     CyDelay(200);
 1527              		.loc 1 340 0
 1528 036c C820     		movs	r0, #200
 1529 036e FFF7FEFF 		bl	CyDelay
 341:main.c        ****                     diff = abs(prev_adcValue-adcValue[calib_cyl]);
 1530              		.loc 1 341 0
 1531 0372 FB89     		ldrh	r3, [r7, #14]
 1532 0374 3849     		ldr	r1, .L90+16
 1533 0376 3A69     		ldr	r2, [r7, #16]
 1534 0378 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1535 037c 9B1A     		subs	r3, r3, r2
 1536 037e 002B     		cmp	r3, #0
 1537 0380 B8BF     		it	lt
 1538 0382 5B42     		rsblt	r3, r3, #0
 1539 0384 BB81     		strh	r3, [r7, #12]	@ movhi
 342:main.c        ****                     if(diff>10){
 1540              		.loc 1 342 0
 1541 0386 BB89     		ldrh	r3, [r7, #12]
 1542 0388 0A2B     		cmp	r3, #10
 1543 038a 03D9     		bls	.L82
 343:main.c        ****                         lower_check_no++;
 1544              		.loc 1 343 0
 1545 038c 3B6A     		ldr	r3, [r7, #32]
 1546 038e 0133     		adds	r3, r3, #1
 1547 0390 3B62     		str	r3, [r7, #32]
 1548 0392 04E0     		b	.L83
 1549              	.L82:
 344:main.c        ****                     }else{
 345:main.c        ****                         lower_offset = lower_offset - 1;
 1550              		.loc 1 345 0
 1551 0394 7B6A     		ldr	r3, [r7, #36]
 1552 0396 013B     		subs	r3, r3, #1
 1553 0398 7B62     		str	r3, [r7, #36]
 346:main.c        ****                         lower_check_no = 0;
 1554              		.loc 1 346 0
 1555 039a 0023     		movs	r3, #0
 1556 039c 3B62     		str	r3, [r7, #32]
 1557              	.L83:
 347:main.c        ****                     }
 348:main.c        ****                     sprintf(sendValue,"LOWER:\tLower Offset: %d \tUpper Offset: %d \t ADC Diff: %d\
 1558              		.loc 1 348 0
 1559 039e BB89     		ldrh	r3, [r7, #12]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 36


 1560 03a0 0093     		str	r3, [sp]
 1561 03a2 BB6A     		ldr	r3, [r7, #40]
 1562 03a4 7A6A     		ldr	r2, [r7, #36]
 1563 03a6 2F49     		ldr	r1, .L90+28
 1564 03a8 2D48     		ldr	r0, .L90+24
 1565 03aa FFF7FEFF 		bl	sprintf
 349:main.c        ****                     UART_PutString(sendValue);
 1566              		.loc 1 349 0
 1567 03ae 2C48     		ldr	r0, .L90+24
 1568 03b0 FFF7FEFF 		bl	UART_PutString
 1569              	.L81:
 350:main.c        ****             
 351:main.c        ****                 }
 352:main.c        ****                 
 353:main.c        ****                 if(upper_check_no>2){
 1570              		.loc 1 353 0
 1571 03b4 FB69     		ldr	r3, [r7, #28]
 1572 03b6 022B     		cmp	r3, #2
 1573 03b8 01DD     		ble	.L84
 354:main.c        ****                     upper_offset_set=1;}
 1574              		.loc 1 354 0
 1575 03ba 0123     		movs	r3, #1
 1576 03bc 3B63     		str	r3, [r7, #48]
 1577              	.L84:
 355:main.c        ****                 if(lower_check_no>2){
 1578              		.loc 1 355 0
 1579 03be 3B6A     		ldr	r3, [r7, #32]
 1580 03c0 022B     		cmp	r3, #2
 1581 03c2 01DD     		ble	.L85
 356:main.c        ****                     lower_offset_set=1;}
 1582              		.loc 1 356 0
 1583 03c4 0123     		movs	r3, #1
 1584 03c6 FB62     		str	r3, [r7, #44]
 1585              	.L85:
 357:main.c        ****                 
 358:main.c        ****                 writePWM(calib_cyl,0);
 1586              		.loc 1 358 0
 1587 03c8 0021     		movs	r1, #0
 1588 03ca 3869     		ldr	r0, [r7, #16]
 1589 03cc FFF7FEFF 		bl	writePWM
 359:main.c        ****                 CyDelay(500);
 1590              		.loc 1 359 0
 1591 03d0 4FF4FA70 		mov	r0, #500
 1592 03d4 FFF7FEFF 		bl	CyDelay
 1593              	.L77:
 318:main.c        ****                 
 1594              		.loc 1 318 0
 1595 03d8 3B6B     		ldr	r3, [r7, #48]
 1596 03da 002B     		cmp	r3, #0
 1597 03dc 82D0     		beq	.L86
 318:main.c        ****                 
 1598              		.loc 1 318 0 is_stmt 0 discriminator 1
 1599 03de FB6A     		ldr	r3, [r7, #44]
 1600 03e0 002B     		cmp	r3, #0
 1601 03e2 3FF47FAF 		beq	.L86
 360:main.c        ****                 
 361:main.c        ****             }
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 37


 362:main.c        ****             
 363:main.c        ****             sprintf(sendValue,"Lower Offset: %d \t Upper Offset: %d \n",lower_offset,upper_offset);
 1602              		.loc 1 363 0 is_stmt 1
 1603 03e6 BB6A     		ldr	r3, [r7, #40]
 1604 03e8 7A6A     		ldr	r2, [r7, #36]
 1605 03ea 1F49     		ldr	r1, .L90+32
 1606 03ec 1C48     		ldr	r0, .L90+24
 1607 03ee FFF7FEFF 		bl	sprintf
 364:main.c        ****             UART_PutString(sendValue);
 1608              		.loc 1 364 0
 1609 03f2 1B48     		ldr	r0, .L90+24
 1610 03f4 FFF7FEFF 		bl	UART_PutString
 365:main.c        ****             
 366:main.c        ****             //while(1){CyDelay(100);};
 367:main.c        ****             start_calib = 0;
 1611              		.loc 1 367 0
 1612 03f8 1C4B     		ldr	r3, .L90+36
 1613 03fa 0022     		movs	r2, #0
 1614 03fc 1A60     		str	r2, [r3]
 1615              	.L74:
 1616              	.LBE9:
 368:main.c        ****         }
 369:main.c        ****         CyDelay(10);
 1617              		.loc 1 369 0
 1618 03fe 0A20     		movs	r0, #10
 1619 0400 FFF7FEFF 		bl	CyDelay
 370:main.c        ****         time = Timer_1_ReadCounter();
 1620              		.loc 1 370 0
 1621 0404 FFF7FEFF 		bl	Timer_1_ReadCounter
 1622 0408 0346     		mov	r3, r0
 1623 040a 1846     		mov	r0, r3
 1624 040c FFF7FEFF 		bl	__aeabi_ui2d
 1625 0410 0346     		mov	r3, r0
 1626 0412 0C46     		mov	r4, r1
 1627 0414 C7E90034 		strd	r3, [r7]
 371:main.c        ****         dt=(double)(65535-time)/1000000;
 1628              		.loc 1 371 0
 1629 0418 D7E90023 		ldrd	r2, [r7]
 1630 041c 0AA1     		adr	r1, .L90
 1631 041e D1E90001 		ldrd	r0, [r1]
 1632 0422 FFF7FEFF 		bl	__aeabi_dsub
 1633 0426 0346     		mov	r3, r0
 1634 0428 0C46     		mov	r4, r1
 1635 042a 1846     		mov	r0, r3
 1636 042c 2146     		mov	r1, r4
 1637 042e 08A3     		adr	r3, .L90+8
 1638 0430 D3E90023 		ldrd	r2, [r3]
 1639 0434 FFF7FEFF 		bl	__aeabi_ddiv
 1640 0438 0346     		mov	r3, r0
 1641 043a 0C46     		mov	r4, r1
 1642 043c C7E90E34 		strd	r3, [r7, #56]
 372:main.c        **** 
 373:main.c        ****     }
 1643              		.loc 1 373 0
 1644 0440 1BE6     		b	.L87
 1645              	.L91:
 1646 0442 00BFAFF3 		.align	3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 38


 1646      0080
 1647              	.L90:
 1648 0448 00000000 		.word	0
 1649 044c E0FFEF40 		.word	1089470432
 1650 0450 00000000 		.word	0
 1651 0454 80842E41 		.word	1093567616
 1652 0458 00000000 		.word	adcValue
 1653 045c 18000000 		.word	.LC1
 1654 0460 00000000 		.word	sendValue
 1655 0464 54000000 		.word	.LC2
 1656 0468 90000000 		.word	.LC3
 1657 046c 00000000 		.word	start_calib
 1658              		.cfi_endproc
 1659              	.LFE68:
 1660              		.size	main, .-main
 1661              		.text
 1662              	.Letext0:
 1663              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1664              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1665              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1666              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 1667              		.section	.debug_info,"",%progbits
 1668              	.Ldebug_info0:
 1669 0000 C5050000 		.4byte	0x5c5
 1670 0004 0400     		.2byte	0x4
 1671 0006 00000000 		.4byte	.Ldebug_abbrev0
 1672 000a 04       		.byte	0x4
 1673 000b 01       		.uleb128 0x1
 1674 000c 75000000 		.4byte	.LASF60
 1675 0010 0C       		.byte	0xc
 1676 0011 A0020000 		.4byte	.LASF61
 1677 0015 27020000 		.4byte	.LASF62
 1678 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1679 001d 00000000 		.4byte	0
 1680 0021 00000000 		.4byte	.Ldebug_line0
 1681 0025 02       		.uleb128 0x2
 1682 0026 01       		.byte	0x1
 1683 0027 06       		.byte	0x6
 1684 0028 51010000 		.4byte	.LASF0
 1685 002c 02       		.uleb128 0x2
 1686 002d 01       		.byte	0x1
 1687 002e 08       		.byte	0x8
 1688 002f A5010000 		.4byte	.LASF1
 1689 0033 02       		.uleb128 0x2
 1690 0034 02       		.byte	0x2
 1691 0035 05       		.byte	0x5
 1692 0036 50000000 		.4byte	.LASF2
 1693 003a 02       		.uleb128 0x2
 1694 003b 02       		.byte	0x2
 1695 003c 07       		.byte	0x7
 1696 003d 14020000 		.4byte	.LASF3
 1697 0041 03       		.uleb128 0x3
 1698 0042 D9020000 		.4byte	.LASF9
 1699 0046 02       		.byte	0x2
 1700 0047 3F       		.byte	0x3f
 1701 0048 4C000000 		.4byte	0x4c
 1702 004c 02       		.uleb128 0x2
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 39


 1703 004d 04       		.byte	0x4
 1704 004e 05       		.byte	0x5
 1705 004f 84010000 		.4byte	.LASF4
 1706 0053 02       		.uleb128 0x2
 1707 0054 04       		.byte	0x4
 1708 0055 07       		.byte	0x7
 1709 0056 AC020000 		.4byte	.LASF5
 1710 005a 02       		.uleb128 0x2
 1711 005b 08       		.byte	0x8
 1712 005c 05       		.byte	0x5
 1713 005d 03010000 		.4byte	.LASF6
 1714 0061 02       		.uleb128 0x2
 1715 0062 08       		.byte	0x8
 1716 0063 07       		.byte	0x7
 1717 0064 E5010000 		.4byte	.LASF7
 1718 0068 04       		.uleb128 0x4
 1719 0069 04       		.byte	0x4
 1720 006a 05       		.byte	0x5
 1721 006b 696E7400 		.ascii	"int\000"
 1722 006f 02       		.uleb128 0x2
 1723 0070 04       		.byte	0x4
 1724 0071 07       		.byte	0x7
 1725 0072 FC010000 		.4byte	.LASF8
 1726 0076 03       		.uleb128 0x3
 1727 0077 82020000 		.4byte	.LASF10
 1728 007b 03       		.byte	0x3
 1729 007c 2C       		.byte	0x2c
 1730 007d 41000000 		.4byte	0x41
 1731 0081 05       		.uleb128 0x5
 1732 0082 36010000 		.4byte	.LASF11
 1733 0086 04       		.byte	0x4
 1734 0087 9201     		.2byte	0x192
 1735 0089 2C000000 		.4byte	0x2c
 1736 008d 05       		.uleb128 0x5
 1737 008e 8A020000 		.4byte	.LASF12
 1738 0092 04       		.byte	0x4
 1739 0093 9301     		.2byte	0x193
 1740 0095 3A000000 		.4byte	0x3a
 1741 0099 02       		.uleb128 0x2
 1742 009a 04       		.byte	0x4
 1743 009b 04       		.byte	0x4
 1744 009c 2B000000 		.4byte	.LASF13
 1745 00a0 02       		.uleb128 0x2
 1746 00a1 08       		.byte	0x8
 1747 00a2 04       		.byte	0x4
 1748 00a3 3B030000 		.4byte	.LASF14
 1749 00a7 02       		.uleb128 0x2
 1750 00a8 01       		.byte	0x1
 1751 00a9 08       		.byte	0x8
 1752 00aa 73020000 		.4byte	.LASF15
 1753 00ae 05       		.uleb128 0x5
 1754 00af A7020000 		.4byte	.LASF16
 1755 00b3 04       		.byte	0x4
 1756 00b4 3C02     		.2byte	0x23c
 1757 00b6 BA000000 		.4byte	0xba
 1758 00ba 06       		.uleb128 0x6
 1759 00bb 81000000 		.4byte	0x81
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 40


 1760 00bf 02       		.uleb128 0x2
 1761 00c0 08       		.byte	0x8
 1762 00c1 04       		.byte	0x4
 1763 00c2 00000000 		.4byte	.LASF17
 1764 00c6 02       		.uleb128 0x2
 1765 00c7 04       		.byte	0x4
 1766 00c8 07       		.byte	0x7
 1767 00c9 67000000 		.4byte	.LASF18
 1768 00cd 07       		.uleb128 0x7
 1769 00ce 66010000 		.4byte	.LASF23
 1770 00d2 01       		.byte	0x1
 1771 00d3 15       		.byte	0x15
 1772 00d4 00000000 		.4byte	.LFB64
 1773 00d8 78000000 		.4byte	.LFE64-.LFB64
 1774 00dc 01       		.uleb128 0x1
 1775 00dd 9C       		.byte	0x9c
 1776 00de FF000000 		.4byte	0xff
 1777 00e2 08       		.uleb128 0x8
 1778 00e3 3C010000 		.4byte	.LASF19
 1779 00e7 01       		.byte	0x1
 1780 00e8 15       		.byte	0x15
 1781 00e9 68000000 		.4byte	0x68
 1782 00ed 02       		.uleb128 0x2
 1783 00ee 91       		.byte	0x91
 1784 00ef 74       		.sleb128 -12
 1785 00f0 08       		.uleb128 0x8
 1786 00f1 30010000 		.4byte	.LASF20
 1787 00f5 01       		.byte	0x1
 1788 00f6 15       		.byte	0x15
 1789 00f7 68000000 		.4byte	0x68
 1790 00fb 02       		.uleb128 0x2
 1791 00fc 91       		.byte	0x91
 1792 00fd 70       		.sleb128 -16
 1793 00fe 00       		.byte	0
 1794 00ff 09       		.uleb128 0x9
 1795 0100 F0020000 		.4byte	.LASF63
 1796 0104 01       		.byte	0x1
 1797 0105 26       		.byte	0x26
 1798 0106 68000000 		.4byte	0x68
 1799 010a 00000000 		.4byte	.LFB65
 1800 010e 54000000 		.4byte	.LFE65-.LFB65
 1801 0112 01       		.uleb128 0x1
 1802 0113 9C       		.byte	0x9c
 1803 0114 43010000 		.4byte	0x143
 1804 0118 08       		.uleb128 0x8
 1805 0119 30010000 		.4byte	.LASF20
 1806 011d 01       		.byte	0x1
 1807 011e 26       		.byte	0x26
 1808 011f 68000000 		.4byte	0x68
 1809 0123 02       		.uleb128 0x2
 1810 0124 91       		.byte	0x91
 1811 0125 74       		.sleb128 -12
 1812 0126 08       		.uleb128 0x8
 1813 0127 E3020000 		.4byte	.LASF21
 1814 012b 01       		.byte	0x1
 1815 012c 26       		.byte	0x26
 1816 012d 68000000 		.4byte	0x68
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 41


 1817 0131 02       		.uleb128 0x2
 1818 0132 91       		.byte	0x91
 1819 0133 70       		.sleb128 -16
 1820 0134 08       		.uleb128 0x8
 1821 0135 5A000000 		.4byte	.LASF22
 1822 0139 01       		.byte	0x1
 1823 013a 26       		.byte	0x26
 1824 013b 68000000 		.4byte	0x68
 1825 013f 02       		.uleb128 0x2
 1826 0140 91       		.byte	0x91
 1827 0141 6C       		.sleb128 -20
 1828 0142 00       		.byte	0
 1829 0143 07       		.uleb128 0x7
 1830 0144 07030000 		.4byte	.LASF24
 1831 0148 01       		.byte	0x1
 1832 0149 4F       		.byte	0x4f
 1833 014a 00000000 		.4byte	.LFB66
 1834 014e 6C010000 		.4byte	.LFE66-.LFB66
 1835 0152 01       		.uleb128 0x1
 1836 0153 9C       		.byte	0x9c
 1837 0154 CF010000 		.4byte	0x1cf
 1838 0158 0A       		.uleb128 0xa
 1839 0159 06000000 		.4byte	.LBB2
 1840 015d 4A010000 		.4byte	.LBE2-.LBB2
 1841 0161 0B       		.uleb128 0xb
 1842 0162 6300     		.ascii	"c\000"
 1843 0164 01       		.byte	0x1
 1844 0165 50       		.byte	0x50
 1845 0166 68000000 		.4byte	0x68
 1846 016a 02       		.uleb128 0x2
 1847 016b 91       		.byte	0x91
 1848 016c 74       		.sleb128 -12
 1849 016d 0C       		.uleb128 0xc
 1850 016e 16000000 		.4byte	.LBB3
 1851 0172 3A000000 		.4byte	.LBE3-.LBB3
 1852 0176 87010000 		.4byte	0x187
 1853 017a 0B       		.uleb128 0xb
 1854 017b 6A00     		.ascii	"j\000"
 1855 017d 01       		.byte	0x1
 1856 017e 53       		.byte	0x53
 1857 017f 68000000 		.4byte	0x68
 1858 0183 02       		.uleb128 0x2
 1859 0184 91       		.byte	0x91
 1860 0185 70       		.sleb128 -16
 1861 0186 00       		.byte	0
 1862 0187 0C       		.uleb128 0xc
 1863 0188 AA000000 		.4byte	.LBB4
 1864 018c 2C000000 		.4byte	.LBE4-.LBB4
 1865 0190 A1010000 		.4byte	0x1a1
 1866 0194 0B       		.uleb128 0xb
 1867 0195 6A00     		.ascii	"j\000"
 1868 0197 01       		.byte	0x1
 1869 0198 5C       		.byte	0x5c
 1870 0199 68000000 		.4byte	0x68
 1871 019d 02       		.uleb128 0x2
 1872 019e 91       		.byte	0x91
 1873 019f 6C       		.sleb128 -20
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 42


 1874 01a0 00       		.byte	0
 1875 01a1 0A       		.uleb128 0xa
 1876 01a2 D6000000 		.4byte	.LBB5
 1877 01a6 60000000 		.4byte	.LBE5-.LBB5
 1878 01aa 0B       		.uleb128 0xb
 1879 01ab 6900     		.ascii	"i\000"
 1880 01ad 01       		.byte	0x1
 1881 01ae 5F       		.byte	0x5f
 1882 01af 68000000 		.4byte	0x68
 1883 01b3 02       		.uleb128 0x2
 1884 01b4 91       		.byte	0x91
 1885 01b5 68       		.sleb128 -24
 1886 01b6 0A       		.uleb128 0xa
 1887 01b7 DC000000 		.4byte	.LBB6
 1888 01bb 4E000000 		.4byte	.LBE6-.LBB6
 1889 01bf 0B       		.uleb128 0xb
 1890 01c0 6A00     		.ascii	"j\000"
 1891 01c2 01       		.byte	0x1
 1892 01c3 60       		.byte	0x60
 1893 01c4 68000000 		.4byte	0x68
 1894 01c8 02       		.uleb128 0x2
 1895 01c9 91       		.byte	0x91
 1896 01ca 64       		.sleb128 -28
 1897 01cb 00       		.byte	0
 1898 01cc 00       		.byte	0
 1899 01cd 00       		.byte	0
 1900 01ce 00       		.byte	0
 1901 01cf 07       		.uleb128 0x7
 1902 01d0 0E020000 		.4byte	.LASF25
 1903 01d4 01       		.byte	0x1
 1904 01d5 71       		.byte	0x71
 1905 01d6 00000000 		.4byte	.LFB67
 1906 01da 14030000 		.4byte	.LFE67-.LFB67
 1907 01de 01       		.uleb128 0x1
 1908 01df 9C       		.byte	0x9c
 1909 01e0 18020000 		.4byte	0x218
 1910 01e4 0D       		.uleb128 0xd
 1911 01e5 CB010000 		.4byte	.LASF26
 1912 01e9 01       		.byte	0x1
 1913 01ea 73       		.byte	0x73
 1914 01eb 81000000 		.4byte	0x81
 1915 01ef 02       		.uleb128 0x2
 1916 01f0 91       		.byte	0x91
 1917 01f1 6B       		.sleb128 -21
 1918 01f2 0D       		.uleb128 0xd
 1919 01f3 12030000 		.4byte	.LASF27
 1920 01f7 01       		.byte	0x1
 1921 01f8 74       		.byte	0x74
 1922 01f9 81000000 		.4byte	0x81
 1923 01fd 02       		.uleb128 0x2
 1924 01fe 91       		.byte	0x91
 1925 01ff 6A       		.sleb128 -22
 1926 0200 0A       		.uleb128 0xa
 1927 0201 A4000000 		.4byte	.LBB7
 1928 0205 1C000000 		.4byte	.LBE7-.LBB7
 1929 0209 0B       		.uleb128 0xb
 1930 020a 707000   		.ascii	"pp\000"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 43


 1931 020d 01       		.byte	0x1
 1932 020e 91       		.byte	0x91
 1933 020f 68000000 		.4byte	0x68
 1934 0213 02       		.uleb128 0x2
 1935 0214 91       		.byte	0x91
 1936 0215 6C       		.sleb128 -20
 1937 0216 00       		.byte	0
 1938 0217 00       		.byte	0
 1939 0218 0E       		.uleb128 0xe
 1940 0219 70000000 		.4byte	.LASF28
 1941 021d 01       		.byte	0x1
 1942 021e F5       		.byte	0xf5
 1943 021f 68000000 		.4byte	0x68
 1944 0223 00000000 		.4byte	.LFB68
 1945 0227 70040000 		.4byte	.LFE68-.LFB68
 1946 022b 01       		.uleb128 0x1
 1947 022c 9C       		.byte	0x9c
 1948 022d 28030000 		.4byte	0x328
 1949 0231 0F       		.uleb128 0xf
 1950 0232 647400   		.ascii	"dt\000"
 1951 0235 01       		.byte	0x1
 1952 0236 0A01     		.2byte	0x10a
 1953 0238 A0000000 		.4byte	0xa0
 1954 023c 02       		.uleb128 0x2
 1955 023d 91       		.byte	0x91
 1956 023e 60       		.sleb128 -32
 1957 023f 10       		.uleb128 0x10
 1958 0240 09020000 		.4byte	.LASF29
 1959 0244 01       		.byte	0x1
 1960 0245 0B01     		.2byte	0x10b
 1961 0247 A0000000 		.4byte	0xa0
 1962 024b 03       		.uleb128 0x3
 1963 024c 91       		.byte	0x91
 1964 024d A87F     		.sleb128 -88
 1965 024f 10       		.uleb128 0x10
 1966 0250 5D010000 		.4byte	.LASF30
 1967 0254 01       		.byte	0x1
 1968 0255 1401     		.2byte	0x114
 1969 0257 68000000 		.4byte	0x68
 1970 025b 03       		.uleb128 0x3
 1971 025c 91       		.byte	0x91
 1972 025d BC7F     		.sleb128 -68
 1973 025f 0C       		.uleb128 0xc
 1974 0260 82000000 		.4byte	.LBB8
 1975 0264 BE010000 		.4byte	.LBE8-.LBB8
 1976 0268 7C020000 		.4byte	0x27c
 1977 026c 0F       		.uleb128 0xf
 1978 026d 63796C00 		.ascii	"cyl\000"
 1979 0271 01       		.byte	0x1
 1980 0272 1C01     		.2byte	0x11c
 1981 0274 68000000 		.4byte	0x68
 1982 0278 02       		.uleb128 0x2
 1983 0279 91       		.byte	0x91
 1984 027a 5C       		.sleb128 -36
 1985 027b 00       		.byte	0
 1986 027c 0A       		.uleb128 0xa
 1987 027d 4A020000 		.4byte	.LBB9
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 44


 1988 0281 B4010000 		.4byte	.LBE9-.LBB9
 1989 0285 10       		.uleb128 0x10
 1990 0286 78020000 		.4byte	.LASF31
 1991 028a 01       		.byte	0x1
 1992 028b 3001     		.2byte	0x130
 1993 028d 68000000 		.4byte	0x68
 1994 0291 03       		.uleb128 0x3
 1995 0292 91       		.byte	0x91
 1996 0293 B87F     		.sleb128 -72
 1997 0295 10       		.uleb128 0x10
 1998 0296 4F030000 		.4byte	.LASF32
 1999 029a 01       		.byte	0x1
 2000 029b 3101     		.2byte	0x131
 2001 029d 68000000 		.4byte	0x68
 2002 02a1 02       		.uleb128 0x2
 2003 02a2 91       		.byte	0x91
 2004 02a3 58       		.sleb128 -40
 2005 02a4 10       		.uleb128 0x10
 2006 02a5 94010000 		.4byte	.LASF33
 2007 02a9 01       		.byte	0x1
 2008 02aa 3201     		.2byte	0x132
 2009 02ac 68000000 		.4byte	0x68
 2010 02b0 02       		.uleb128 0x2
 2011 02b1 91       		.byte	0x91
 2012 02b2 54       		.sleb128 -44
 2013 02b3 10       		.uleb128 0x10
 2014 02b4 77010000 		.4byte	.LASF34
 2015 02b8 01       		.byte	0x1
 2016 02b9 3301     		.2byte	0x133
 2017 02bb 68000000 		.4byte	0x68
 2018 02bf 02       		.uleb128 0x2
 2019 02c0 91       		.byte	0x91
 2020 02c1 50       		.sleb128 -48
 2021 02c2 10       		.uleb128 0x10
 2022 02c3 BE010000 		.4byte	.LASF35
 2023 02c7 01       		.byte	0x1
 2024 02c8 3401     		.2byte	0x134
 2025 02ca 68000000 		.4byte	0x68
 2026 02ce 02       		.uleb128 0x2
 2027 02cf 91       		.byte	0x91
 2028 02d0 4C       		.sleb128 -52
 2029 02d1 10       		.uleb128 0x10
 2030 02d2 0C000000 		.4byte	.LASF36
 2031 02d6 01       		.byte	0x1
 2032 02d7 3501     		.2byte	0x135
 2033 02d9 68000000 		.4byte	0x68
 2034 02dd 02       		.uleb128 0x2
 2035 02de 91       		.byte	0x91
 2036 02df 48       		.sleb128 -56
 2037 02e0 10       		.uleb128 0x10
 2038 02e1 91020000 		.4byte	.LASF37
 2039 02e5 01       		.byte	0x1
 2040 02e6 3601     		.2byte	0x136
 2041 02e8 68000000 		.4byte	0x68
 2042 02ec 02       		.uleb128 0x2
 2043 02ed 91       		.byte	0x91
 2044 02ee 44       		.sleb128 -60
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 45


 2045 02ef 10       		.uleb128 0x10
 2046 02f0 CB020000 		.4byte	.LASF38
 2047 02f4 01       		.byte	0x1
 2048 02f5 3701     		.2byte	0x137
 2049 02f7 8D000000 		.4byte	0x8d
 2050 02fb 03       		.uleb128 0x3
 2051 02fc 91       		.byte	0x91
 2052 02fd B67F     		.sleb128 -74
 2053 02ff 10       		.uleb128 0x10
 2054 0300 3A000000 		.4byte	.LASF39
 2055 0304 01       		.byte	0x1
 2056 0305 3801     		.2byte	0x138
 2057 0307 8D000000 		.4byte	0x8d
 2058 030b 03       		.uleb128 0x3
 2059 030c 91       		.byte	0x91
 2060 030d B47F     		.sleb128 -76
 2061 030f 0A       		.uleb128 0xa
 2062 0310 72020000 		.4byte	.LBB10
 2063 0314 1A000000 		.4byte	.LBE10-.LBB10
 2064 0318 0F       		.uleb128 0xf
 2065 0319 6700     		.ascii	"g\000"
 2066 031b 01       		.byte	0x1
 2067 031c 3901     		.2byte	0x139
 2068 031e 68000000 		.4byte	0x68
 2069 0322 02       		.uleb128 0x2
 2070 0323 91       		.byte	0x91
 2071 0324 40       		.sleb128 -64
 2072 0325 00       		.byte	0
 2073 0326 00       		.byte	0
 2074 0327 00       		.byte	0
 2075 0328 11       		.uleb128 0x11
 2076 0329 42030000 		.4byte	.LASF40
 2077 032d 05       		.byte	0x5
 2078 032e 1207     		.2byte	0x712
 2079 0330 34030000 		.4byte	0x334
 2080 0334 06       		.uleb128 0x6
 2081 0335 76000000 		.4byte	0x76
 2082 0339 12       		.uleb128 0x12
 2083 033a 45010000 		.4byte	.LASF41
 2084 033e 01       		.byte	0x1
 2085 033f 13       		.byte	0x13
 2086 0340 81000000 		.4byte	0x81
 2087 0344 05       		.uleb128 0x5
 2088 0345 03       		.byte	0x3
 2089 0346 00000000 		.4byte	errorStatus
 2090 034a 12       		.uleb128 0x12
 2091 034b 21010000 		.4byte	.LASF42
 2092 034f 01       		.byte	0x1
 2093 0350 2F       		.byte	0x2f
 2094 0351 68000000 		.4byte	0x68
 2095 0355 05       		.uleb128 0x5
 2096 0356 03       		.byte	0x3
 2097 0357 00000000 		.4byte	data_read_mode
 2098 035b 13       		.uleb128 0x13
 2099 035c 6B030000 		.4byte	0x36b
 2100 0360 6B030000 		.4byte	0x36b
 2101 0364 14       		.uleb128 0x14
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 46


 2102 0365 C6000000 		.4byte	0xc6
 2103 0369 01       		.byte	0x1
 2104 036a 00       		.byte	0
 2105 036b 06       		.uleb128 0x6
 2106 036c 68000000 		.4byte	0x68
 2107 0370 12       		.uleb128 0x12
 2108 0371 3F000000 		.4byte	.LASF43
 2109 0375 01       		.byte	0x1
 2110 0376 31       		.byte	0x31
 2111 0377 81030000 		.4byte	0x381
 2112 037b 05       		.uleb128 0x5
 2113 037c 03       		.byte	0x3
 2114 037d 00000000 		.4byte	new_pos_set
 2115 0381 06       		.uleb128 0x6
 2116 0382 5B030000 		.4byte	0x35b
 2117 0386 13       		.uleb128 0x13
 2118 0387 68000000 		.4byte	0x68
 2119 038b 96030000 		.4byte	0x396
 2120 038f 14       		.uleb128 0x14
 2121 0390 C6000000 		.4byte	0xc6
 2122 0394 01       		.byte	0x1
 2123 0395 00       		.byte	0
 2124 0396 12       		.uleb128 0x12
 2125 0397 D4010000 		.4byte	.LASF44
 2126 039b 01       		.byte	0x1
 2127 039c 32       		.byte	0x32
 2128 039d 86030000 		.4byte	0x386
 2129 03a1 05       		.uleb128 0x5
 2130 03a2 03       		.byte	0x3
 2131 03a3 00000000 		.4byte	new_pos
 2132 03a7 15       		.uleb128 0x15
 2133 03a8 706F7300 		.ascii	"pos\000"
 2134 03ac 01       		.byte	0x1
 2135 03ad 33       		.byte	0x33
 2136 03ae 86030000 		.4byte	0x386
 2137 03b2 05       		.uleb128 0x5
 2138 03b3 03       		.byte	0x3
 2139 03b4 00000000 		.4byte	pos
 2140 03b8 12       		.uleb128 0x12
 2141 03b9 30010000 		.4byte	.LASF20
 2142 03bd 01       		.byte	0x1
 2143 03be 34       		.byte	0x34
 2144 03bf 86030000 		.4byte	0x386
 2145 03c3 05       		.uleb128 0x5
 2146 03c4 03       		.byte	0x3
 2147 03c5 00000000 		.4byte	pulse
 2148 03c9 12       		.uleb128 0x12
 2149 03ca B3010000 		.4byte	.LASF45
 2150 03ce 01       		.byte	0x1
 2151 03cf 35       		.byte	0x35
 2152 03d0 86030000 		.4byte	0x386
 2153 03d4 05       		.uleb128 0x5
 2154 03d5 03       		.byte	0x3
 2155 03d6 00000000 		.4byte	pulse_temp
 2156 03da 13       		.uleb128 0x13
 2157 03db A0000000 		.4byte	0xa0
 2158 03df EA030000 		.4byte	0x3ea
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 47


 2159 03e3 14       		.uleb128 0x14
 2160 03e4 C6000000 		.4byte	0xc6
 2161 03e8 01       		.byte	0x1
 2162 03e9 00       		.byte	0
 2163 03ea 15       		.uleb128 0x15
 2164 03eb 65727200 		.ascii	"err\000"
 2165 03ef 01       		.byte	0x1
 2166 03f0 36       		.byte	0x36
 2167 03f1 DA030000 		.4byte	0x3da
 2168 03f5 05       		.uleb128 0x5
 2169 03f6 03       		.byte	0x3
 2170 03f7 00000000 		.4byte	err
 2171 03fb 13       		.uleb128 0x13
 2172 03fc 8D000000 		.4byte	0x8d
 2173 0400 0B040000 		.4byte	0x40b
 2174 0404 14       		.uleb128 0x14
 2175 0405 C6000000 		.4byte	0xc6
 2176 0409 01       		.byte	0x1
 2177 040a 00       		.byte	0
 2178 040b 12       		.uleb128 0x12
 2179 040c DC010000 		.4byte	.LASF46
 2180 0410 01       		.byte	0x1
 2181 0411 37       		.byte	0x37
 2182 0412 FB030000 		.4byte	0x3fb
 2183 0416 05       		.uleb128 0x5
 2184 0417 03       		.byte	0x3
 2185 0418 00000000 		.4byte	adcValue
 2186 041c 15       		.uleb128 0x15
 2187 041d 64657200 		.ascii	"der\000"
 2188 0421 01       		.byte	0x1
 2189 0422 38       		.byte	0x38
 2190 0423 DA030000 		.4byte	0x3da
 2191 0427 05       		.uleb128 0x5
 2192 0428 03       		.byte	0x3
 2193 0429 00000000 		.4byte	der
 2194 042d 12       		.uleb128 0x12
 2195 042e 31000000 		.4byte	.LASF47
 2196 0432 01       		.byte	0x1
 2197 0433 39       		.byte	0x39
 2198 0434 DA030000 		.4byte	0x3da
 2199 0438 05       		.uleb128 0x5
 2200 0439 03       		.byte	0x3
 2201 043a 00000000 		.4byte	prev_err
 2202 043e 12       		.uleb128 0x12
 2203 043f BE020000 		.4byte	.LASF48
 2204 0443 01       		.byte	0x1
 2205 0444 3A       		.byte	0x3a
 2206 0445 DA030000 		.4byte	0x3da
 2207 0449 05       		.uleb128 0x5
 2208 044a 03       		.byte	0x3
 2209 044b 00000000 		.4byte	pid_integral
 2210 044f 12       		.uleb128 0x12
 2211 0450 1B000000 		.4byte	.LASF49
 2212 0454 01       		.byte	0x1
 2213 0455 3B       		.byte	0x3b
 2214 0456 68000000 		.4byte	0x68
 2215 045a 05       		.uleb128 0x5
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 48


 2216 045b 03       		.byte	0x3
 2217 045c 00000000 		.4byte	cyl_set
 2218 0460 13       		.uleb128 0x13
 2219 0461 A7000000 		.4byte	0xa7
 2220 0465 70040000 		.4byte	0x470
 2221 0469 14       		.uleb128 0x14
 2222 046a C6000000 		.4byte	0xc6
 2223 046e 00       		.byte	0
 2224 046f 00       		.byte	0
 2225 0470 12       		.uleb128 0x12
 2226 0471 23000000 		.4byte	.LASF50
 2227 0475 01       		.byte	0x1
 2228 0476 3C       		.byte	0x3c
 2229 0477 60040000 		.4byte	0x460
 2230 047b 05       		.uleb128 0x5
 2231 047c 03       		.byte	0x3
 2232 047d 00000000 		.4byte	cyl_tmp
 2233 0481 13       		.uleb128 0x13
 2234 0482 68000000 		.4byte	0x68
 2235 0486 97040000 		.4byte	0x497
 2236 048a 14       		.uleb128 0x14
 2237 048b C6000000 		.4byte	0xc6
 2238 048f 03       		.byte	0x3
 2239 0490 14       		.uleb128 0x14
 2240 0491 C6000000 		.4byte	0xc6
 2241 0495 01       		.byte	0x1
 2242 0496 00       		.byte	0
 2243 0497 12       		.uleb128 0x12
 2244 0498 6F010000 		.4byte	.LASF51
 2245 049c 01       		.byte	0x1
 2246 049d 3E       		.byte	0x3e
 2247 049e 81040000 		.4byte	0x481
 2248 04a2 05       		.uleb128 0x5
 2249 04a3 03       		.byte	0x3
 2250 04a4 00000000 		.4byte	offsets
 2251 04a8 13       		.uleb128 0x13
 2252 04a9 A7000000 		.4byte	0xa7
 2253 04ad B8040000 		.4byte	0x4b8
 2254 04b1 14       		.uleb128 0x14
 2255 04b2 C6000000 		.4byte	0xc6
 2256 04b6 63       		.byte	0x63
 2257 04b7 00       		.byte	0
 2258 04b8 12       		.uleb128 0x12
 2259 04b9 31030000 		.4byte	.LASF52
 2260 04bd 01       		.byte	0x1
 2261 04be 40       		.byte	0x40
 2262 04bf A8040000 		.4byte	0x4a8
 2263 04c3 05       		.uleb128 0x5
 2264 04c4 03       		.byte	0x3
 2265 04c5 00000000 		.4byte	sendValue
 2266 04c9 13       		.uleb128 0x13
 2267 04ca A7000000 		.4byte	0xa7
 2268 04ce D9040000 		.4byte	0x4d9
 2269 04d2 14       		.uleb128 0x14
 2270 04d3 C6000000 		.4byte	0xc6
 2271 04d7 13       		.byte	0x13
 2272 04d8 00       		.byte	0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 49


 2273 04d9 12       		.uleb128 0x12
 2274 04da 4B000000 		.4byte	.LASF53
 2275 04de 01       		.byte	0x1
 2276 04df 41       		.byte	0x41
 2277 04e0 C9040000 		.4byte	0x4c9
 2278 04e4 05       		.uleb128 0x5
 2279 04e5 03       		.byte	0x3
 2280 04e6 00000000 		.4byte	temp
 2281 04ea 15       		.uleb128 0x15
 2282 04eb 6E6E00   		.ascii	"nn\000"
 2283 04ee 01       		.byte	0x1
 2284 04ef 42       		.byte	0x42
 2285 04f0 68000000 		.4byte	0x68
 2286 04f4 05       		.uleb128 0x5
 2287 04f5 03       		.byte	0x3
 2288 04f6 00000000 		.4byte	nn
 2289 04fa 13       		.uleb128 0x13
 2290 04fb A0000000 		.4byte	0xa0
 2291 04ff 0A050000 		.4byte	0x50a
 2292 0503 14       		.uleb128 0x14
 2293 0504 C6000000 		.4byte	0xc6
 2294 0508 02       		.byte	0x2
 2295 0509 00       		.byte	0
 2296 050a 15       		.uleb128 0x15
 2297 050b 70696400 		.ascii	"pid\000"
 2298 050f 01       		.byte	0x1
 2299 0510 43       		.byte	0x43
 2300 0511 FA040000 		.4byte	0x4fa
 2301 0515 05       		.uleb128 0x5
 2302 0516 03       		.byte	0x3
 2303 0517 00000000 		.4byte	pid
 2304 051b 12       		.uleb128 0x12
 2305 051c 11010000 		.4byte	.LASF54
 2306 0520 01       		.byte	0x1
 2307 0521 45       		.byte	0x45
 2308 0522 A8040000 		.4byte	0x4a8
 2309 0526 05       		.uleb128 0x5
 2310 0527 03       		.byte	0x3
 2311 0528 00000000 		.4byte	help
 2312 052c 15       		.uleb128 0x15
 2313 052d 747400   		.ascii	"tt\000"
 2314 0530 01       		.byte	0x1
 2315 0531 46       		.byte	0x46
 2316 0532 68000000 		.4byte	0x68
 2317 0536 05       		.uleb128 0x5
 2318 0537 03       		.byte	0x3
 2319 0538 00000000 		.4byte	tt
 2320 053c 12       		.uleb128 0x12
 2321 053d FB020000 		.4byte	.LASF55
 2322 0541 01       		.byte	0x1
 2323 0542 48       		.byte	0x48
 2324 0543 68000000 		.4byte	0x68
 2325 0547 05       		.uleb128 0x5
 2326 0548 03       		.byte	0x3
 2327 0549 00000000 		.4byte	start_calib
 2328 054d 12       		.uleb128 0x12
 2329 054e 8D010000 		.4byte	.LASF56
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 50


 2330 0552 01       		.byte	0x1
 2331 0553 49       		.byte	0x49
 2332 0554 68000000 		.4byte	0x68
 2333 0558 05       		.uleb128 0x5
 2334 0559 03       		.byte	0x3
 2335 055a 00000000 		.4byte	cyl_no
 2336 055e 13       		.uleb128 0x13
 2337 055f 8D000000 		.4byte	0x8d
 2338 0563 74050000 		.4byte	0x574
 2339 0567 14       		.uleb128 0x14
 2340 0568 C6000000 		.4byte	0xc6
 2341 056c 01       		.byte	0x1
 2342 056d 14       		.uleb128 0x14
 2343 056e C6000000 		.4byte	0xc6
 2344 0572 06       		.byte	0x6
 2345 0573 00       		.byte	0
 2346 0574 12       		.uleb128 0x12
 2347 0575 19030000 		.4byte	.LASF57
 2348 0579 01       		.byte	0x1
 2349 057a 4B       		.byte	0x4b
 2350 057b 5E050000 		.4byte	0x55e
 2351 057f 05       		.uleb128 0x5
 2352 0580 03       		.byte	0x3
 2353 0581 00000000 		.4byte	moving_median
 2354 0585 13       		.uleb128 0x13
 2355 0586 8D000000 		.4byte	0x8d
 2356 058a 95050000 		.4byte	0x595
 2357 058e 14       		.uleb128 0x14
 2358 058f C6000000 		.4byte	0xc6
 2359 0593 06       		.byte	0x6
 2360 0594 00       		.byte	0
 2361 0595 12       		.uleb128 0x12
 2362 0596 27030000 		.4byte	.LASF58
 2363 059a 01       		.byte	0x1
 2364 059b 4C       		.byte	0x4c
 2365 059c 85050000 		.4byte	0x585
 2366 05a0 05       		.uleb128 0x5
 2367 05a1 03       		.byte	0x3
 2368 05a2 00000000 		.4byte	tempArray
 2369 05a6 15       		.uleb128 0x15
 2370 05a7 746D7000 		.ascii	"tmp\000"
 2371 05ab 01       		.byte	0x1
 2372 05ac 4D       		.byte	0x4d
 2373 05ad 8D000000 		.4byte	0x8d
 2374 05b1 05       		.uleb128 0x5
 2375 05b2 03       		.byte	0x3
 2376 05b3 00000000 		.4byte	tmp
 2377 05b7 12       		.uleb128 0x12
 2378 05b8 16010000 		.4byte	.LASF59
 2379 05bc 01       		.byte	0x1
 2380 05bd F4       		.byte	0xf4
 2381 05be 68000000 		.4byte	0x68
 2382 05c2 05       		.uleb128 0x5
 2383 05c3 03       		.byte	0x3
 2384 05c4 00000000 		.4byte	led_switch
 2385 05c8 00       		.byte	0
 2386              		.section	.debug_abbrev,"",%progbits
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 51


 2387              	.Ldebug_abbrev0:
 2388 0000 01       		.uleb128 0x1
 2389 0001 11       		.uleb128 0x11
 2390 0002 01       		.byte	0x1
 2391 0003 25       		.uleb128 0x25
 2392 0004 0E       		.uleb128 0xe
 2393 0005 13       		.uleb128 0x13
 2394 0006 0B       		.uleb128 0xb
 2395 0007 03       		.uleb128 0x3
 2396 0008 0E       		.uleb128 0xe
 2397 0009 1B       		.uleb128 0x1b
 2398 000a 0E       		.uleb128 0xe
 2399 000b 55       		.uleb128 0x55
 2400 000c 17       		.uleb128 0x17
 2401 000d 11       		.uleb128 0x11
 2402 000e 01       		.uleb128 0x1
 2403 000f 10       		.uleb128 0x10
 2404 0010 17       		.uleb128 0x17
 2405 0011 00       		.byte	0
 2406 0012 00       		.byte	0
 2407 0013 02       		.uleb128 0x2
 2408 0014 24       		.uleb128 0x24
 2409 0015 00       		.byte	0
 2410 0016 0B       		.uleb128 0xb
 2411 0017 0B       		.uleb128 0xb
 2412 0018 3E       		.uleb128 0x3e
 2413 0019 0B       		.uleb128 0xb
 2414 001a 03       		.uleb128 0x3
 2415 001b 0E       		.uleb128 0xe
 2416 001c 00       		.byte	0
 2417 001d 00       		.byte	0
 2418 001e 03       		.uleb128 0x3
 2419 001f 16       		.uleb128 0x16
 2420 0020 00       		.byte	0
 2421 0021 03       		.uleb128 0x3
 2422 0022 0E       		.uleb128 0xe
 2423 0023 3A       		.uleb128 0x3a
 2424 0024 0B       		.uleb128 0xb
 2425 0025 3B       		.uleb128 0x3b
 2426 0026 0B       		.uleb128 0xb
 2427 0027 49       		.uleb128 0x49
 2428 0028 13       		.uleb128 0x13
 2429 0029 00       		.byte	0
 2430 002a 00       		.byte	0
 2431 002b 04       		.uleb128 0x4
 2432 002c 24       		.uleb128 0x24
 2433 002d 00       		.byte	0
 2434 002e 0B       		.uleb128 0xb
 2435 002f 0B       		.uleb128 0xb
 2436 0030 3E       		.uleb128 0x3e
 2437 0031 0B       		.uleb128 0xb
 2438 0032 03       		.uleb128 0x3
 2439 0033 08       		.uleb128 0x8
 2440 0034 00       		.byte	0
 2441 0035 00       		.byte	0
 2442 0036 05       		.uleb128 0x5
 2443 0037 16       		.uleb128 0x16
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 52


 2444 0038 00       		.byte	0
 2445 0039 03       		.uleb128 0x3
 2446 003a 0E       		.uleb128 0xe
 2447 003b 3A       		.uleb128 0x3a
 2448 003c 0B       		.uleb128 0xb
 2449 003d 3B       		.uleb128 0x3b
 2450 003e 05       		.uleb128 0x5
 2451 003f 49       		.uleb128 0x49
 2452 0040 13       		.uleb128 0x13
 2453 0041 00       		.byte	0
 2454 0042 00       		.byte	0
 2455 0043 06       		.uleb128 0x6
 2456 0044 35       		.uleb128 0x35
 2457 0045 00       		.byte	0
 2458 0046 49       		.uleb128 0x49
 2459 0047 13       		.uleb128 0x13
 2460 0048 00       		.byte	0
 2461 0049 00       		.byte	0
 2462 004a 07       		.uleb128 0x7
 2463 004b 2E       		.uleb128 0x2e
 2464 004c 01       		.byte	0x1
 2465 004d 3F       		.uleb128 0x3f
 2466 004e 19       		.uleb128 0x19
 2467 004f 03       		.uleb128 0x3
 2468 0050 0E       		.uleb128 0xe
 2469 0051 3A       		.uleb128 0x3a
 2470 0052 0B       		.uleb128 0xb
 2471 0053 3B       		.uleb128 0x3b
 2472 0054 0B       		.uleb128 0xb
 2473 0055 27       		.uleb128 0x27
 2474 0056 19       		.uleb128 0x19
 2475 0057 11       		.uleb128 0x11
 2476 0058 01       		.uleb128 0x1
 2477 0059 12       		.uleb128 0x12
 2478 005a 06       		.uleb128 0x6
 2479 005b 40       		.uleb128 0x40
 2480 005c 18       		.uleb128 0x18
 2481 005d 9642     		.uleb128 0x2116
 2482 005f 19       		.uleb128 0x19
 2483 0060 01       		.uleb128 0x1
 2484 0061 13       		.uleb128 0x13
 2485 0062 00       		.byte	0
 2486 0063 00       		.byte	0
 2487 0064 08       		.uleb128 0x8
 2488 0065 05       		.uleb128 0x5
 2489 0066 00       		.byte	0
 2490 0067 03       		.uleb128 0x3
 2491 0068 0E       		.uleb128 0xe
 2492 0069 3A       		.uleb128 0x3a
 2493 006a 0B       		.uleb128 0xb
 2494 006b 3B       		.uleb128 0x3b
 2495 006c 0B       		.uleb128 0xb
 2496 006d 49       		.uleb128 0x49
 2497 006e 13       		.uleb128 0x13
 2498 006f 02       		.uleb128 0x2
 2499 0070 18       		.uleb128 0x18
 2500 0071 00       		.byte	0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 53


 2501 0072 00       		.byte	0
 2502 0073 09       		.uleb128 0x9
 2503 0074 2E       		.uleb128 0x2e
 2504 0075 01       		.byte	0x1
 2505 0076 3F       		.uleb128 0x3f
 2506 0077 19       		.uleb128 0x19
 2507 0078 03       		.uleb128 0x3
 2508 0079 0E       		.uleb128 0xe
 2509 007a 3A       		.uleb128 0x3a
 2510 007b 0B       		.uleb128 0xb
 2511 007c 3B       		.uleb128 0x3b
 2512 007d 0B       		.uleb128 0xb
 2513 007e 27       		.uleb128 0x27
 2514 007f 19       		.uleb128 0x19
 2515 0080 49       		.uleb128 0x49
 2516 0081 13       		.uleb128 0x13
 2517 0082 11       		.uleb128 0x11
 2518 0083 01       		.uleb128 0x1
 2519 0084 12       		.uleb128 0x12
 2520 0085 06       		.uleb128 0x6
 2521 0086 40       		.uleb128 0x40
 2522 0087 18       		.uleb128 0x18
 2523 0088 9742     		.uleb128 0x2117
 2524 008a 19       		.uleb128 0x19
 2525 008b 01       		.uleb128 0x1
 2526 008c 13       		.uleb128 0x13
 2527 008d 00       		.byte	0
 2528 008e 00       		.byte	0
 2529 008f 0A       		.uleb128 0xa
 2530 0090 0B       		.uleb128 0xb
 2531 0091 01       		.byte	0x1
 2532 0092 11       		.uleb128 0x11
 2533 0093 01       		.uleb128 0x1
 2534 0094 12       		.uleb128 0x12
 2535 0095 06       		.uleb128 0x6
 2536 0096 00       		.byte	0
 2537 0097 00       		.byte	0
 2538 0098 0B       		.uleb128 0xb
 2539 0099 34       		.uleb128 0x34
 2540 009a 00       		.byte	0
 2541 009b 03       		.uleb128 0x3
 2542 009c 08       		.uleb128 0x8
 2543 009d 3A       		.uleb128 0x3a
 2544 009e 0B       		.uleb128 0xb
 2545 009f 3B       		.uleb128 0x3b
 2546 00a0 0B       		.uleb128 0xb
 2547 00a1 49       		.uleb128 0x49
 2548 00a2 13       		.uleb128 0x13
 2549 00a3 02       		.uleb128 0x2
 2550 00a4 18       		.uleb128 0x18
 2551 00a5 00       		.byte	0
 2552 00a6 00       		.byte	0
 2553 00a7 0C       		.uleb128 0xc
 2554 00a8 0B       		.uleb128 0xb
 2555 00a9 01       		.byte	0x1
 2556 00aa 11       		.uleb128 0x11
 2557 00ab 01       		.uleb128 0x1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 54


 2558 00ac 12       		.uleb128 0x12
 2559 00ad 06       		.uleb128 0x6
 2560 00ae 01       		.uleb128 0x1
 2561 00af 13       		.uleb128 0x13
 2562 00b0 00       		.byte	0
 2563 00b1 00       		.byte	0
 2564 00b2 0D       		.uleb128 0xd
 2565 00b3 34       		.uleb128 0x34
 2566 00b4 00       		.byte	0
 2567 00b5 03       		.uleb128 0x3
 2568 00b6 0E       		.uleb128 0xe
 2569 00b7 3A       		.uleb128 0x3a
 2570 00b8 0B       		.uleb128 0xb
 2571 00b9 3B       		.uleb128 0x3b
 2572 00ba 0B       		.uleb128 0xb
 2573 00bb 49       		.uleb128 0x49
 2574 00bc 13       		.uleb128 0x13
 2575 00bd 02       		.uleb128 0x2
 2576 00be 18       		.uleb128 0x18
 2577 00bf 00       		.byte	0
 2578 00c0 00       		.byte	0
 2579 00c1 0E       		.uleb128 0xe
 2580 00c2 2E       		.uleb128 0x2e
 2581 00c3 01       		.byte	0x1
 2582 00c4 3F       		.uleb128 0x3f
 2583 00c5 19       		.uleb128 0x19
 2584 00c6 03       		.uleb128 0x3
 2585 00c7 0E       		.uleb128 0xe
 2586 00c8 3A       		.uleb128 0x3a
 2587 00c9 0B       		.uleb128 0xb
 2588 00ca 3B       		.uleb128 0x3b
 2589 00cb 0B       		.uleb128 0xb
 2590 00cc 49       		.uleb128 0x49
 2591 00cd 13       		.uleb128 0x13
 2592 00ce 11       		.uleb128 0x11
 2593 00cf 01       		.uleb128 0x1
 2594 00d0 12       		.uleb128 0x12
 2595 00d1 06       		.uleb128 0x6
 2596 00d2 40       		.uleb128 0x40
 2597 00d3 18       		.uleb128 0x18
 2598 00d4 9642     		.uleb128 0x2116
 2599 00d6 19       		.uleb128 0x19
 2600 00d7 01       		.uleb128 0x1
 2601 00d8 13       		.uleb128 0x13
 2602 00d9 00       		.byte	0
 2603 00da 00       		.byte	0
 2604 00db 0F       		.uleb128 0xf
 2605 00dc 34       		.uleb128 0x34
 2606 00dd 00       		.byte	0
 2607 00de 03       		.uleb128 0x3
 2608 00df 08       		.uleb128 0x8
 2609 00e0 3A       		.uleb128 0x3a
 2610 00e1 0B       		.uleb128 0xb
 2611 00e2 3B       		.uleb128 0x3b
 2612 00e3 05       		.uleb128 0x5
 2613 00e4 49       		.uleb128 0x49
 2614 00e5 13       		.uleb128 0x13
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 55


 2615 00e6 02       		.uleb128 0x2
 2616 00e7 18       		.uleb128 0x18
 2617 00e8 00       		.byte	0
 2618 00e9 00       		.byte	0
 2619 00ea 10       		.uleb128 0x10
 2620 00eb 34       		.uleb128 0x34
 2621 00ec 00       		.byte	0
 2622 00ed 03       		.uleb128 0x3
 2623 00ee 0E       		.uleb128 0xe
 2624 00ef 3A       		.uleb128 0x3a
 2625 00f0 0B       		.uleb128 0xb
 2626 00f1 3B       		.uleb128 0x3b
 2627 00f2 05       		.uleb128 0x5
 2628 00f3 49       		.uleb128 0x49
 2629 00f4 13       		.uleb128 0x13
 2630 00f5 02       		.uleb128 0x2
 2631 00f6 18       		.uleb128 0x18
 2632 00f7 00       		.byte	0
 2633 00f8 00       		.byte	0
 2634 00f9 11       		.uleb128 0x11
 2635 00fa 34       		.uleb128 0x34
 2636 00fb 00       		.byte	0
 2637 00fc 03       		.uleb128 0x3
 2638 00fd 0E       		.uleb128 0xe
 2639 00fe 3A       		.uleb128 0x3a
 2640 00ff 0B       		.uleb128 0xb
 2641 0100 3B       		.uleb128 0x3b
 2642 0101 05       		.uleb128 0x5
 2643 0102 49       		.uleb128 0x49
 2644 0103 13       		.uleb128 0x13
 2645 0104 3F       		.uleb128 0x3f
 2646 0105 19       		.uleb128 0x19
 2647 0106 3C       		.uleb128 0x3c
 2648 0107 19       		.uleb128 0x19
 2649 0108 00       		.byte	0
 2650 0109 00       		.byte	0
 2651 010a 12       		.uleb128 0x12
 2652 010b 34       		.uleb128 0x34
 2653 010c 00       		.byte	0
 2654 010d 03       		.uleb128 0x3
 2655 010e 0E       		.uleb128 0xe
 2656 010f 3A       		.uleb128 0x3a
 2657 0110 0B       		.uleb128 0xb
 2658 0111 3B       		.uleb128 0x3b
 2659 0112 0B       		.uleb128 0xb
 2660 0113 49       		.uleb128 0x49
 2661 0114 13       		.uleb128 0x13
 2662 0115 3F       		.uleb128 0x3f
 2663 0116 19       		.uleb128 0x19
 2664 0117 02       		.uleb128 0x2
 2665 0118 18       		.uleb128 0x18
 2666 0119 00       		.byte	0
 2667 011a 00       		.byte	0
 2668 011b 13       		.uleb128 0x13
 2669 011c 01       		.uleb128 0x1
 2670 011d 01       		.byte	0x1
 2671 011e 49       		.uleb128 0x49
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 56


 2672 011f 13       		.uleb128 0x13
 2673 0120 01       		.uleb128 0x1
 2674 0121 13       		.uleb128 0x13
 2675 0122 00       		.byte	0
 2676 0123 00       		.byte	0
 2677 0124 14       		.uleb128 0x14
 2678 0125 21       		.uleb128 0x21
 2679 0126 00       		.byte	0
 2680 0127 49       		.uleb128 0x49
 2681 0128 13       		.uleb128 0x13
 2682 0129 2F       		.uleb128 0x2f
 2683 012a 0B       		.uleb128 0xb
 2684 012b 00       		.byte	0
 2685 012c 00       		.byte	0
 2686 012d 15       		.uleb128 0x15
 2687 012e 34       		.uleb128 0x34
 2688 012f 00       		.byte	0
 2689 0130 03       		.uleb128 0x3
 2690 0131 08       		.uleb128 0x8
 2691 0132 3A       		.uleb128 0x3a
 2692 0133 0B       		.uleb128 0xb
 2693 0134 3B       		.uleb128 0x3b
 2694 0135 0B       		.uleb128 0xb
 2695 0136 49       		.uleb128 0x49
 2696 0137 13       		.uleb128 0x13
 2697 0138 3F       		.uleb128 0x3f
 2698 0139 19       		.uleb128 0x19
 2699 013a 02       		.uleb128 0x2
 2700 013b 18       		.uleb128 0x18
 2701 013c 00       		.byte	0
 2702 013d 00       		.byte	0
 2703 013e 00       		.byte	0
 2704              		.section	.debug_aranges,"",%progbits
 2705 0000 3C000000 		.4byte	0x3c
 2706 0004 0200     		.2byte	0x2
 2707 0006 00000000 		.4byte	.Ldebug_info0
 2708 000a 04       		.byte	0x4
 2709 000b 00       		.byte	0
 2710 000c 0000     		.2byte	0
 2711 000e 0000     		.2byte	0
 2712 0010 00000000 		.4byte	.LFB64
 2713 0014 78000000 		.4byte	.LFE64-.LFB64
 2714 0018 00000000 		.4byte	.LFB65
 2715 001c 54000000 		.4byte	.LFE65-.LFB65
 2716 0020 00000000 		.4byte	.LFB66
 2717 0024 6C010000 		.4byte	.LFE66-.LFB66
 2718 0028 00000000 		.4byte	.LFB67
 2719 002c 14030000 		.4byte	.LFE67-.LFB67
 2720 0030 00000000 		.4byte	.LFB68
 2721 0034 70040000 		.4byte	.LFE68-.LFB68
 2722 0038 00000000 		.4byte	0
 2723 003c 00000000 		.4byte	0
 2724              		.section	.debug_ranges,"",%progbits
 2725              	.Ldebug_ranges0:
 2726 0000 00000000 		.4byte	.LFB64
 2727 0004 78000000 		.4byte	.LFE64
 2728 0008 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 57


 2729 000c 54000000 		.4byte	.LFE65
 2730 0010 00000000 		.4byte	.LFB66
 2731 0014 6C010000 		.4byte	.LFE66
 2732 0018 00000000 		.4byte	.LFB67
 2733 001c 14030000 		.4byte	.LFE67
 2734 0020 00000000 		.4byte	.LFB68
 2735 0024 70040000 		.4byte	.LFE68
 2736 0028 00000000 		.4byte	0
 2737 002c 00000000 		.4byte	0
 2738              		.section	.debug_line,"",%progbits
 2739              	.Ldebug_line0:
 2740 0000 62030000 		.section	.debug_str,"MS",%progbits,1
 2740      02004C01 
 2740      00000201 
 2740      FB0E0D00 
 2740      01010101 
 2741              	.LASF17:
 2742 0000 6C6F6E67 		.ascii	"long double\000"
 2742      20646F75 
 2742      626C6500 
 2743              	.LASF36:
 2744 000c 6C6F7765 		.ascii	"lower_check_no\000"
 2744      725F6368 
 2744      65636B5F 
 2744      6E6F00
 2745              	.LASF49:
 2746 001b 63796C5F 		.ascii	"cyl_set\000"
 2746      73657400 
 2747              	.LASF50:
 2748 0023 63796C5F 		.ascii	"cyl_tmp\000"
 2748      746D7000 
 2749              	.LASF13:
 2750 002b 666C6F61 		.ascii	"float\000"
 2750      7400
 2751              	.LASF47:
 2752 0031 70726576 		.ascii	"prev_err\000"
 2752      5F657272 
 2752      00
 2753              	.LASF39:
 2754 003a 64696666 		.ascii	"diff\000"
 2754      00
 2755              	.LASF43:
 2756 003f 6E65775F 		.ascii	"new_pos_set\000"
 2756      706F735F 
 2756      73657400 
 2757              	.LASF53:
 2758 004b 74656D70 		.ascii	"temp\000"
 2758      00
 2759              	.LASF2:
 2760 0050 73686F72 		.ascii	"short int\000"
 2760      7420696E 
 2760      7400
 2761              	.LASF22:
 2762 005a 6F666673 		.ascii	"offset_lower\000"
 2762      65745F6C 
 2762      6F776572 
 2762      00
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 58


 2763              	.LASF18:
 2764 0067 73697A65 		.ascii	"sizetype\000"
 2764      74797065 
 2764      00
 2765              	.LASF28:
 2766 0070 6D61696E 		.ascii	"main\000"
 2766      00
 2767              	.LASF60:
 2768 0075 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2768      43313120 
 2768      352E342E 
 2768      31203230 
 2768      31363036 
 2769 00a8 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2769      20726576 
 2769      6973696F 
 2769      6E203233 
 2769      37373135 
 2770 00db 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2770      66756E63 
 2770      74696F6E 
 2770      2D736563 
 2770      74696F6E 
 2771              	.LASF6:
 2772 0103 6C6F6E67 		.ascii	"long long int\000"
 2772      206C6F6E 
 2772      6720696E 
 2772      7400
 2773              	.LASF54:
 2774 0111 68656C70 		.ascii	"help\000"
 2774      00
 2775              	.LASF59:
 2776 0116 6C65645F 		.ascii	"led_switch\000"
 2776      73776974 
 2776      636800
 2777              	.LASF42:
 2778 0121 64617461 		.ascii	"data_read_mode\000"
 2778      5F726561 
 2778      645F6D6F 
 2778      646500
 2779              	.LASF20:
 2780 0130 70756C73 		.ascii	"pulse\000"
 2780      6500
 2781              	.LASF11:
 2782 0136 75696E74 		.ascii	"uint8\000"
 2782      3800
 2783              	.LASF19:
 2784 013c 63796C69 		.ascii	"cylinder\000"
 2784      6E646572 
 2784      00
 2785              	.LASF41:
 2786 0145 6572726F 		.ascii	"errorStatus\000"
 2786      72537461 
 2786      74757300 
 2787              	.LASF0:
 2788 0151 7369676E 		.ascii	"signed char\000"
 2788      65642063 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 59


 2788      68617200 
 2789              	.LASF30:
 2790 015d 73656E64 		.ascii	"send_now\000"
 2790      5F6E6F77 
 2790      00
 2791              	.LASF23:
 2792 0166 77726974 		.ascii	"writePWM\000"
 2792      6550574D 
 2792      00
 2793              	.LASF51:
 2794 016f 6F666673 		.ascii	"offsets\000"
 2794      65747300 
 2795              	.LASF34:
 2796 0177 75707065 		.ascii	"upper_offset\000"
 2796      725F6F66 
 2796      66736574 
 2796      00
 2797              	.LASF4:
 2798 0184 6C6F6E67 		.ascii	"long int\000"
 2798      20696E74 
 2798      00
 2799              	.LASF56:
 2800 018d 63796C5F 		.ascii	"cyl_no\000"
 2800      6E6F00
 2801              	.LASF33:
 2802 0194 6C6F7765 		.ascii	"lower_offset_set\000"
 2802      725F6F66 
 2802      66736574 
 2802      5F736574 
 2802      00
 2803              	.LASF1:
 2804 01a5 756E7369 		.ascii	"unsigned char\000"
 2804      676E6564 
 2804      20636861 
 2804      7200
 2805              	.LASF45:
 2806 01b3 70756C73 		.ascii	"pulse_temp\000"
 2806      655F7465 
 2806      6D7000
 2807              	.LASF35:
 2808 01be 6C6F7765 		.ascii	"lower_offset\000"
 2808      725F6F66 
 2808      66736574 
 2808      00
 2809              	.LASF26:
 2810 01cb 72785374 		.ascii	"rxStatus\000"
 2810      61747573 
 2810      00
 2811              	.LASF44:
 2812 01d4 6E65775F 		.ascii	"new_pos\000"
 2812      706F7300 
 2813              	.LASF46:
 2814 01dc 61646356 		.ascii	"adcValue\000"
 2814      616C7565 
 2814      00
 2815              	.LASF7:
 2816 01e5 6C6F6E67 		.ascii	"long long unsigned int\000"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 60


 2816      206C6F6E 
 2816      6720756E 
 2816      7369676E 
 2816      65642069 
 2817              	.LASF8:
 2818 01fc 756E7369 		.ascii	"unsigned int\000"
 2818      676E6564 
 2818      20696E74 
 2818      00
 2819              	.LASF29:
 2820 0209 74696D65 		.ascii	"time\000"
 2820      00
 2821              	.LASF25:
 2822 020e 52784973 		.ascii	"RxIsr\000"
 2822      7200
 2823              	.LASF3:
 2824 0214 73686F72 		.ascii	"short unsigned int\000"
 2824      7420756E 
 2824      7369676E 
 2824      65642069 
 2824      6E7400
 2825              	.LASF62:
 2826 0227 433A5C55 		.ascii	"C:\\Users\\Andrew\\Documents\\GitHub\\Hydraulic-Mim"
 2826      73657273 
 2826      5C416E64 
 2826      7265775C 
 2826      446F6375 
 2827 0255 69632D41 		.ascii	"ic-Arm\\PSOC_arm_project.cydsn\000"
 2827      726D5C50 
 2827      534F435F 
 2827      61726D5F 
 2827      70726F6A 
 2828              	.LASF15:
 2829 0273 63686172 		.ascii	"char\000"
 2829      00
 2830              	.LASF31:
 2831 0278 63616C69 		.ascii	"calib_cyl\000"
 2831      625F6379 
 2831      6C00
 2832              	.LASF10:
 2833 0282 696E7433 		.ascii	"int32_t\000"
 2833      325F7400 
 2834              	.LASF12:
 2835 028a 75696E74 		.ascii	"uint16\000"
 2835      313600
 2836              	.LASF37:
 2837 0291 75707065 		.ascii	"upper_check_no\000"
 2837      725F6368 
 2837      65636B5F 
 2837      6E6F00
 2838              	.LASF61:
 2839 02a0 6D61696E 		.ascii	"main.c\000"
 2839      2E6300
 2840              	.LASF16:
 2841 02a7 72656738 		.ascii	"reg8\000"
 2841      00
 2842              	.LASF5:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 61


 2843 02ac 6C6F6E67 		.ascii	"long unsigned int\000"
 2843      20756E73 
 2843      69676E65 
 2843      6420696E 
 2843      7400
 2844              	.LASF48:
 2845 02be 7069645F 		.ascii	"pid_integral\000"
 2845      696E7465 
 2845      6772616C 
 2845      00
 2846              	.LASF38:
 2847 02cb 70726576 		.ascii	"prev_adcValue\000"
 2847      5F616463 
 2847      56616C75 
 2847      6500
 2848              	.LASF9:
 2849 02d9 5F5F696E 		.ascii	"__int32_t\000"
 2849      7433325F 
 2849      7400
 2850              	.LASF21:
 2851 02e3 6F666673 		.ascii	"offset_upper\000"
 2851      65745F75 
 2851      70706572 
 2851      00
 2852              	.LASF63:
 2853 02f0 70756C73 		.ascii	"pulseCheck\000"
 2853      65436865 
 2853      636B00
 2854              	.LASF55:
 2855 02fb 73746172 		.ascii	"start_calib\000"
 2855      745F6361 
 2855      6C696200 
 2856              	.LASF24:
 2857 0307 6164635F 		.ascii	"adc_update\000"
 2857      75706461 
 2857      746500
 2858              	.LASF27:
 2859 0312 72784461 		.ascii	"rxData\000"
 2859      746100
 2860              	.LASF57:
 2861 0319 6D6F7669 		.ascii	"moving_median\000"
 2861      6E675F6D 
 2861      65646961 
 2861      6E00
 2862              	.LASF58:
 2863 0327 74656D70 		.ascii	"tempArray\000"
 2863      41727261 
 2863      7900
 2864              	.LASF52:
 2865 0331 73656E64 		.ascii	"sendValue\000"
 2865      56616C75 
 2865      6500
 2866              	.LASF14:
 2867 033b 646F7562 		.ascii	"double\000"
 2867      6C6500
 2868              	.LASF40:
 2869 0342 49544D5F 		.ascii	"ITM_RxBuffer\000"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccFjLDNQ.s 			page 62


 2869      52784275 
 2869      66666572 
 2869      00
 2870              	.LASF32:
 2871 034f 75707065 		.ascii	"upper_offset_set\000"
 2871      725F6F66 
 2871      66736574 
 2871      5F736574 
 2871      00
 2872              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
