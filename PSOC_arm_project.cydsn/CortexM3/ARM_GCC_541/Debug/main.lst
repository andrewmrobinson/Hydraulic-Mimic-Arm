ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.syntax unified
  20              		.global _printf_float
  21              		.thumb
  22              		.syntax unified
  23              		.global	errorStatus
  24              		.bss
  25              		.type	errorStatus, %object
  26              		.size	errorStatus, 1
  27              	errorStatus:
  28 0000 00       		.space	1
  29              		.section	.text.writePWM,"ax",%progbits
  30              		.align	2
  31              		.global	writePWM
  32              		.thumb
  33              		.thumb_func
  34              		.type	writePWM, %function
  35              	writePWM:
  36              	.LFB64:
  37              		.file 1 "main.c"
   1:main.c        **** 
   2:main.c        **** #include <project.h>
   3:main.c        **** #include <stdio.h>
   4:main.c        **** #include "common.h"
   5:main.c        **** #include <math.h>
   6:main.c        **** #include <stdlib.h>     /* strtod */
   7:main.c        **** 
   8:main.c        **** #define	Frequency 1000000.0			// Frequency of PWMClock
   9:main.c        **** #define	One_ms (Frequency/1000.0)	// 1 ms constant
  10:main.c        **** #define filter_size 7
  11:main.c        **** #define CYL_NO 4                    // Number of connected cylinders
  12:main.c        **** 
  13:main.c        **** /* Add an explicit reference to the floating point printf library to allow
  14:main.c        **** the usage of floating point conversion specifier */
  15:main.c        **** #if defined (__GNUC__)
  16:main.c        ****     asm (".global _printf_float");
  17:main.c        **** #endif
  18:main.c        **** 
  19:main.c        **** uint8 errorStatus = 0u;
  20:main.c        **** 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 2


  21:main.c        **** void writePWM(int cylinder, int pulse){
  38              		.loc 1 21 0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 8
  41              		@ frame_needed = 1, uses_anonymous_args = 0
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 82B0     		sub	sp, sp, #8
  47              		.cfi_def_cfa_offset 16
  48 0004 00AF     		add	r7, sp, #0
  49              		.cfi_def_cfa_register 7
  50 0006 7860     		str	r0, [r7, #4]
  51 0008 3960     		str	r1, [r7]
  22:main.c        ****     switch(cylinder){
  52              		.loc 1 22 0
  53 000a 7B68     		ldr	r3, [r7, #4]
  54 000c 032B     		cmp	r3, #3
  55 000e 2FD8     		bhi	.L8
  56 0010 01A2     		adr	r2, .L4
  57 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  58 0016 00BF     		.p2align 2
  59              	.L4:
  60 0018 29000000 		.word	.L3+1
  61 001c 3B000000 		.word	.L5+1
  62 0020 4D000000 		.word	.L6+1
  63 0024 5F000000 		.word	.L7+1
  64              		.p2align 1
  65              	.L3:
  23:main.c        ****                 case 0:
  24:main.c        ****                     PWM_0_WriteCompare(pulse + 1500);
  66              		.loc 1 24 0
  67 0028 3B68     		ldr	r3, [r7]
  68 002a 9BB2     		uxth	r3, r3
  69 002c 03F2DC53 		addw	r3, r3, #1500
  70 0030 9BB2     		uxth	r3, r3
  71 0032 1846     		mov	r0, r3
  72 0034 FFF7FEFF 		bl	PWM_0_WriteCompare
  25:main.c        ****                     break;
  73              		.loc 1 25 0
  74 0038 1AE0     		b	.L2
  75              	.L5:
  26:main.c        ****                 case 1:
  27:main.c        ****                     PWM_1_WriteCompare(pulse + 1500);
  76              		.loc 1 27 0
  77 003a 3B68     		ldr	r3, [r7]
  78 003c 9BB2     		uxth	r3, r3
  79 003e 03F2DC53 		addw	r3, r3, #1500
  80 0042 9BB2     		uxth	r3, r3
  81 0044 1846     		mov	r0, r3
  82 0046 FFF7FEFF 		bl	PWM_1_WriteCompare
  28:main.c        ****                     break;
  83              		.loc 1 28 0
  84 004a 11E0     		b	.L2
  85              	.L6:
  29:main.c        ****                 case 2:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 3


  30:main.c        ****                     PWM_2_WriteCompare(pulse + 1500);
  86              		.loc 1 30 0
  87 004c 3B68     		ldr	r3, [r7]
  88 004e 9BB2     		uxth	r3, r3
  89 0050 03F2DC53 		addw	r3, r3, #1500
  90 0054 9BB2     		uxth	r3, r3
  91 0056 1846     		mov	r0, r3
  92 0058 FFF7FEFF 		bl	PWM_2_WriteCompare
  31:main.c        ****                     break;
  93              		.loc 1 31 0
  94 005c 08E0     		b	.L2
  95              	.L7:
  32:main.c        ****                 case 3:
  33:main.c        ****                     PWM_3_WriteCompare(pulse + 1500);
  96              		.loc 1 33 0
  97 005e 3B68     		ldr	r3, [r7]
  98 0060 9BB2     		uxth	r3, r3
  99 0062 03F2DC53 		addw	r3, r3, #1500
 100 0066 9BB2     		uxth	r3, r3
 101 0068 1846     		mov	r0, r3
 102 006a FFF7FEFF 		bl	PWM_3_WriteCompare
  34:main.c        ****                     break;
 103              		.loc 1 34 0
 104 006e 00BF     		nop
 105              	.L2:
 106              	.L8:
  35:main.c        ****             }  
  36:main.c        **** }
 107              		.loc 1 36 0
 108 0070 00BF     		nop
 109 0072 0837     		adds	r7, r7, #8
 110              		.cfi_def_cfa_offset 8
 111 0074 BD46     		mov	sp, r7
 112              		.cfi_def_cfa_register 13
 113              		@ sp needed
 114 0076 80BD     		pop	{r7, pc}
 115              		.cfi_endproc
 116              	.LFE64:
 117              		.size	writePWM, .-writePWM
 118              		.section	.text.pulseCheck,"ax",%progbits
 119              		.align	2
 120              		.global	pulseCheck
 121              		.thumb
 122              		.thumb_func
 123              		.type	pulseCheck, %function
 124              	pulseCheck:
 125              	.LFB65:
  37:main.c        **** 
  38:main.c        **** int pulseCheck(int pulse, int offset_upper, int offset_lower) {
 126              		.loc 1 38 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 16
 129              		@ frame_needed = 1, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131 0000 80B4     		push	{r7}
 132              		.cfi_def_cfa_offset 4
 133              		.cfi_offset 7, -4
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 4


 134 0002 85B0     		sub	sp, sp, #20
 135              		.cfi_def_cfa_offset 24
 136 0004 00AF     		add	r7, sp, #0
 137              		.cfi_def_cfa_register 7
 138 0006 F860     		str	r0, [r7, #12]
 139 0008 B960     		str	r1, [r7, #8]
 140 000a 7A60     		str	r2, [r7, #4]
  39:main.c        ****     if(pulse<0){pulse = pulse - offset_lower;}
 141              		.loc 1 39 0
 142 000c FB68     		ldr	r3, [r7, #12]
 143 000e 002B     		cmp	r3, #0
 144 0010 03DA     		bge	.L10
 145              		.loc 1 39 0 is_stmt 0 discriminator 1
 146 0012 FA68     		ldr	r2, [r7, #12]
 147 0014 7B68     		ldr	r3, [r7, #4]
 148 0016 D31A     		subs	r3, r2, r3
 149 0018 FB60     		str	r3, [r7, #12]
 150              	.L10:
  40:main.c        ****         if(pulse>0){pulse = pulse + offset_upper;}
 151              		.loc 1 40 0 is_stmt 1
 152 001a FB68     		ldr	r3, [r7, #12]
 153 001c 002B     		cmp	r3, #0
 154 001e 03DD     		ble	.L11
 155              		.loc 1 40 0 is_stmt 0 discriminator 1
 156 0020 FA68     		ldr	r2, [r7, #12]
 157 0022 BB68     		ldr	r3, [r7, #8]
 158 0024 1344     		add	r3, r3, r2
 159 0026 FB60     		str	r3, [r7, #12]
 160              	.L11:
  41:main.c        ****         if(pulse<-500){pulse=-500;}
 161              		.loc 1 41 0 is_stmt 1
 162 0028 FB68     		ldr	r3, [r7, #12]
 163 002a 13F5FA7F 		cmn	r3, #500
 164 002e 01DA     		bge	.L12
 165              		.loc 1 41 0 is_stmt 0 discriminator 1
 166 0030 074B     		ldr	r3, .L15
 167 0032 FB60     		str	r3, [r7, #12]
 168              	.L12:
  42:main.c        ****         if(pulse>500){pulse=500;}
 169              		.loc 1 42 0 is_stmt 1
 170 0034 FB68     		ldr	r3, [r7, #12]
 171 0036 B3F5FA7F 		cmp	r3, #500
 172 003a 02DD     		ble	.L13
 173              		.loc 1 42 0 is_stmt 0 discriminator 1
 174 003c 4FF4FA73 		mov	r3, #500
 175 0040 FB60     		str	r3, [r7, #12]
 176              	.L13:
  43:main.c        ****     return pulse;
 177              		.loc 1 43 0 is_stmt 1
 178 0042 FB68     		ldr	r3, [r7, #12]
  44:main.c        **** }
 179              		.loc 1 44 0
 180 0044 1846     		mov	r0, r3
 181 0046 1437     		adds	r7, r7, #20
 182              		.cfi_def_cfa_offset 4
 183 0048 BD46     		mov	sp, r7
 184              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 5


 185              		@ sp needed
 186 004a 80BC     		pop	{r7}
 187              		.cfi_restore 7
 188              		.cfi_def_cfa_offset 0
 189 004c 7047     		bx	lr
 190              	.L16:
 191 004e 00BF     		.align	2
 192              	.L15:
 193 0050 0CFEFFFF 		.word	-500
 194              		.cfi_endproc
 195              	.LFE65:
 196              		.size	pulseCheck, .-pulseCheck
 197              		.global	data_read_mode
 198              		.bss
 199 0001 000000   		.align	2
 200              		.type	data_read_mode, %object
 201              		.size	data_read_mode, 4
 202              	data_read_mode:
 203 0004 00000000 		.space	4
 204              		.comm	new_pos_set,16,4
 205              		.comm	new_pos,16,4
 206              		.comm	pos,16,4
 207              		.comm	pulse,16,4
 208              		.comm	pulse_temp,16,4
 209              		.comm	err,32,8
 210              		.comm	adcValue,8,4
 211              		.comm	der,32,8
 212              		.comm	prev_err,32,8
 213              		.comm	pid_integral,32,8
 214              		.global	cyl_set
 215              		.align	2
 216              		.type	cyl_set, %object
 217              		.size	cyl_set, 4
 218              	cyl_set:
 219 0008 00000000 		.space	4
 220              		.comm	cyl_tmp,1,4
 221              		.comm	dts,240,8
 222              		.global	dts_ct
 223              		.align	2
 224              		.type	dts_ct, %object
 225              		.size	dts_ct, 4
 226              	dts_ct:
 227 000c 00000000 		.space	4
 228              		.global	offsets
 229              		.data
 230              		.align	2
 231              		.type	offsets, %object
 232              		.size	offsets, 32
 233              	offsets:
 234 0000 7D000000 		.word	125
 235 0004 B3000000 		.word	179
 236 0008 84000000 		.word	132
 237 000c B0000000 		.word	176
 238 0010 B9000000 		.word	185
 239 0014 AC000000 		.word	172
 240 0018 C3000000 		.word	195
 241 001c A9000000 		.word	169
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 6


 242              		.comm	sendValue,100,4
 243              		.comm	temp,20,4
 244              		.global	nn
 245              		.bss
 246              		.align	2
 247              		.type	nn, %object
 248              		.size	nn, 4
 249              	nn:
 250 0010 00000000 		.space	4
 251              		.global	pid
 252              		.data
 253              		.align	3
 254              		.type	pid, %object
 255              		.size	pid, 24
 256              	pid:
 257 0020 33333333 		.word	858993459
 258 0024 3333D33F 		.word	1070805811
 259 0028 FCA9F1D2 		.word	-755914244
 260 002c 4D62503F 		.word	1062232653
 261 0030 00000000 		.word	0
 262 0034 00000000 		.word	0
 263              		.comm	help,100,4
 264              		.global	tt
 265              		.bss
 266              		.align	2
 267              		.type	tt, %object
 268              		.size	tt, 4
 269              	tt:
 270 0014 00000000 		.space	4
 271              		.global	start_calib
 272              		.align	2
 273              		.type	start_calib, %object
 274              		.size	start_calib, 4
 275              	start_calib:
 276 0018 00000000 		.space	4
 277              		.global	cyl_no
 278              		.align	2
 279              		.type	cyl_no, %object
 280              		.size	cyl_no, 4
 281              	cyl_no:
 282 001c 00000000 		.space	4
 283              		.global	moving_median
 284              		.align	2
 285              		.type	moving_median, %object
 286              		.size	moving_median, 56
 287              	moving_median:
 288 0020 00000000 		.space	56
 288      00000000 
 288      00000000 
 288      00000000 
 288      00000000 
 289              		.comm	tempArray,14,4
 290              		.comm	tmp,2,2
 291              		.section	.text.adc_update,"ax",%progbits
 292              		.align	2
 293              		.global	adc_update
 294              		.thumb
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 7


 295              		.thumb_func
 296              		.type	adc_update, %function
 297              	adc_update:
 298              	.LFB66:
  45:main.c        **** 
  46:main.c        **** 
  47:main.c        **** int data_read_mode = 0;
  48:main.c        **** 
  49:main.c        **** volatile int new_pos_set[CYL_NO];
  50:main.c        **** int new_pos[CYL_NO];
  51:main.c        **** int pos[CYL_NO];
  52:main.c        **** int pulse[CYL_NO];
  53:main.c        **** int pulse_temp[CYL_NO];
  54:main.c        **** double err[CYL_NO];
  55:main.c        **** uint16 adcValue[CYL_NO];
  56:main.c        **** double der[CYL_NO];
  57:main.c        **** double prev_err[CYL_NO];
  58:main.c        **** double pid_integral[CYL_NO];
  59:main.c        **** 
  60:main.c        **** int cyl_set = 0;
  61:main.c        **** char cyl_tmp[1];
  62:main.c        **** double dts[30];
  63:main.c        **** int dts_ct = 0;
  64:main.c        **** 
  65:main.c        **** int offsets[4][2] = {{125,179},{132,176},{185,172},{195,169}}; //{lower,upper} - both positive
  66:main.c        **** 
  67:main.c        **** char sendValue[100];
  68:main.c        **** char temp[20];
  69:main.c        **** int nn=0;
  70:main.c        **** double pid[3] = {0.3,0.001,0.0};
  71:main.c        **** 
  72:main.c        **** char help[100];
  73:main.c        **** int tt = 0;
  74:main.c        **** 
  75:main.c        **** int start_calib = 0;
  76:main.c        **** int cyl_no = 0;
  77:main.c        **** 
  78:main.c        **** uint16 moving_median[CYL_NO][filter_size] = {0};
  79:main.c        **** uint16 tempArray[filter_size];
  80:main.c        **** uint16 tmp;
  81:main.c        **** 
  82:main.c        **** CY_ISR(adc_update){
 299              		.loc 1 82 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 24
 302              		@ frame_needed = 1, uses_anonymous_args = 0
 303 0000 80B5     		push	{r7, lr}
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 7, -8
 306              		.cfi_offset 14, -4
 307 0002 86B0     		sub	sp, sp, #24
 308              		.cfi_def_cfa_offset 32
 309 0004 00AF     		add	r7, sp, #0
 310              		.cfi_def_cfa_register 7
 311              	.LBB2:
  83:main.c        ****     for(int c = 0;c<CYL_NO;c++){
 312              		.loc 1 83 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 8


 313 0006 0023     		movs	r3, #0
 314 0008 7B61     		str	r3, [r7, #20]
 315 000a 9DE0     		b	.L18
 316              	.L28:
  84:main.c        ****         AMux_0_FastSelect(c);
 317              		.loc 1 84 0
 318 000c 7B69     		ldr	r3, [r7, #20]
 319 000e DBB2     		uxtb	r3, r3
 320 0010 1846     		mov	r0, r3
 321 0012 FFF7FEFF 		bl	AMux_0_FastSelect
 322              	.LBB3:
  85:main.c        ****         
  86:main.c        ****         for(int j=0;j<filter_size-1;j++){
 323              		.loc 1 86 0
 324 0016 0023     		movs	r3, #0
 325 0018 3B61     		str	r3, [r7, #16]
 326 001a 16E0     		b	.L19
 327              	.L20:
  87:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 328              		.loc 1 87 0 discriminator 3
 329 001c 3B69     		ldr	r3, [r7, #16]
 330 001e 591C     		adds	r1, r3, #1
 331 0020 4E48     		ldr	r0, .L29
 332 0022 7A69     		ldr	r2, [r7, #20]
 333 0024 1346     		mov	r3, r2
 334 0026 DB00     		lsls	r3, r3, #3
 335 0028 9B1A     		subs	r3, r3, r2
 336 002a 0B44     		add	r3, r3, r1
 337 002c 30F81300 		ldrh	r0, [r0, r3, lsl #1]
 338 0030 4A49     		ldr	r1, .L29
 339 0032 7A69     		ldr	r2, [r7, #20]
 340 0034 1346     		mov	r3, r2
 341 0036 DB00     		lsls	r3, r3, #3
 342 0038 9B1A     		subs	r3, r3, r2
 343 003a 3A69     		ldr	r2, [r7, #16]
 344 003c 1344     		add	r3, r3, r2
 345 003e 0246     		mov	r2, r0	@ movhi
 346 0040 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
  86:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 347              		.loc 1 86 0 discriminator 3
 348 0044 3B69     		ldr	r3, [r7, #16]
 349 0046 0133     		adds	r3, r3, #1
 350 0048 3B61     		str	r3, [r7, #16]
 351              	.L19:
  86:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 352              		.loc 1 86 0 is_stmt 0 discriminator 1
 353 004a 3B69     		ldr	r3, [r7, #16]
 354 004c 052B     		cmp	r3, #5
 355 004e E5DD     		ble	.L20
 356              	.LBE3:
  88:main.c        ****         }
  89:main.c        ****         
  90:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 357              		.loc 1 90 0 is_stmt 1
 358 0050 FFF7FEFF 		bl	ADC_0_GetResult16
 359 0054 0346     		mov	r3, r0
 360 0056 98B2     		uxth	r0, r3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 9


 361 0058 4049     		ldr	r1, .L29
 362 005a 7A69     		ldr	r2, [r7, #20]
 363 005c 1346     		mov	r3, r2
 364 005e DB00     		lsls	r3, r3, #3
 365 0060 9B1A     		subs	r3, r3, r2
 366 0062 5B00     		lsls	r3, r3, #1
 367 0064 0B44     		add	r3, r3, r1
 368 0066 0C33     		adds	r3, r3, #12
 369 0068 0246     		mov	r2, r0	@ movhi
 370 006a 1A80     		strh	r2, [r3]	@ movhi
  91:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 371              		.loc 1 91 0
 372 006c FFF7FEFF 		bl	ADC_0_GetResult16
 373 0070 0346     		mov	r3, r0
 374 0072 98B2     		uxth	r0, r3
 375 0074 3949     		ldr	r1, .L29
 376 0076 7A69     		ldr	r2, [r7, #20]
 377 0078 1346     		mov	r3, r2
 378 007a DB00     		lsls	r3, r3, #3
 379 007c 9B1A     		subs	r3, r3, r2
 380 007e 5B00     		lsls	r3, r3, #1
 381 0080 0B44     		add	r3, r3, r1
 382 0082 0C33     		adds	r3, r3, #12
 383 0084 0246     		mov	r2, r0	@ movhi
 384 0086 1A80     		strh	r2, [r3]	@ movhi
  92:main.c        ****         ADC_0_IsEndConversion(ADC_0_WAIT_FOR_RESULT);
 385              		.loc 1 92 0
 386 0088 0020     		movs	r0, #0
 387 008a FFF7FEFF 		bl	ADC_0_IsEndConversion
  93:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 388              		.loc 1 93 0
 389 008e FFF7FEFF 		bl	ADC_0_GetResult16
 390 0092 0346     		mov	r3, r0
 391 0094 98B2     		uxth	r0, r3
 392 0096 3149     		ldr	r1, .L29
 393 0098 7A69     		ldr	r2, [r7, #20]
 394 009a 1346     		mov	r3, r2
 395 009c DB00     		lsls	r3, r3, #3
 396 009e 9B1A     		subs	r3, r3, r2
 397 00a0 5B00     		lsls	r3, r3, #1
 398 00a2 0B44     		add	r3, r3, r1
 399 00a4 0C33     		adds	r3, r3, #12
 400 00a6 0246     		mov	r2, r0	@ movhi
 401 00a8 1A80     		strh	r2, [r3]	@ movhi
 402              	.LBB4:
  94:main.c        ****         
  95:main.c        ****         for(int j=0;j<filter_size;j++){
 403              		.loc 1 95 0
 404 00aa 0023     		movs	r3, #0
 405 00ac FB60     		str	r3, [r7, #12]
 406 00ae 0FE0     		b	.L21
 407              	.L22:
  96:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 408              		.loc 1 96 0 discriminator 3
 409 00b0 2A49     		ldr	r1, .L29
 410 00b2 7A69     		ldr	r2, [r7, #20]
 411 00b4 1346     		mov	r3, r2
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 10


 412 00b6 DB00     		lsls	r3, r3, #3
 413 00b8 9B1A     		subs	r3, r3, r2
 414 00ba FA68     		ldr	r2, [r7, #12]
 415 00bc 1344     		add	r3, r3, r2
 416 00be 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 417 00c2 274A     		ldr	r2, .L29+4
 418 00c4 FB68     		ldr	r3, [r7, #12]
 419 00c6 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  95:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 420              		.loc 1 95 0 discriminator 3
 421 00ca FB68     		ldr	r3, [r7, #12]
 422 00cc 0133     		adds	r3, r3, #1
 423 00ce FB60     		str	r3, [r7, #12]
 424              	.L21:
  95:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 425              		.loc 1 95 0 is_stmt 0 discriminator 1
 426 00d0 FB68     		ldr	r3, [r7, #12]
 427 00d2 062B     		cmp	r3, #6
 428 00d4 ECDD     		ble	.L22
 429              	.LBE4:
 430              	.LBB5:
  97:main.c        ****         }
  98:main.c        ****         for(int i = 0; i < filter_size; i++){                     //Loop for ascending ordering
 431              		.loc 1 98 0 is_stmt 1
 432 00d6 0023     		movs	r3, #0
 433 00d8 BB60     		str	r3, [r7, #8]
 434 00da 29E0     		b	.L23
 435              	.L27:
 436              	.LBB6:
  99:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 437              		.loc 1 99 0
 438 00dc 0023     		movs	r3, #0
 439 00de 7B60     		str	r3, [r7, #4]
 440 00e0 20E0     		b	.L24
 441              	.L26:
 100:main.c        ****         	{
 101:main.c        ****         		if (tempArray[j] > tempArray[i])                //Comparing other array elements
 442              		.loc 1 101 0
 443 00e2 1F4A     		ldr	r2, .L29+4
 444 00e4 7B68     		ldr	r3, [r7, #4]
 445 00e6 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 446 00ea 1D49     		ldr	r1, .L29+4
 447 00ec BB68     		ldr	r3, [r7, #8]
 448 00ee 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 449 00f2 9A42     		cmp	r2, r3
 450 00f4 13D9     		bls	.L25
 102:main.c        ****         		{
 103:main.c        ****         			tmp = tempArray[i];         //Using temporary variable for storing last value
 451              		.loc 1 103 0
 452 00f6 1A4A     		ldr	r2, .L29+4
 453 00f8 BB68     		ldr	r3, [r7, #8]
 454 00fa 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 455 00fe 194B     		ldr	r3, .L29+8
 456 0100 1A80     		strh	r2, [r3]	@ movhi
 104:main.c        ****         			tempArray[i] = tempArray[j];            //replacing value
 457              		.loc 1 104 0
 458 0102 174A     		ldr	r2, .L29+4
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 11


 459 0104 7B68     		ldr	r3, [r7, #4]
 460 0106 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 461 010a 154A     		ldr	r2, .L29+4
 462 010c BB68     		ldr	r3, [r7, #8]
 463 010e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 105:main.c        ****         			tempArray[j] = tmp;             //storing last value
 464              		.loc 1 105 0
 465 0112 144B     		ldr	r3, .L29+8
 466 0114 1988     		ldrh	r1, [r3]
 467 0116 124A     		ldr	r2, .L29+4
 468 0118 7B68     		ldr	r3, [r7, #4]
 469 011a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 470              	.L25:
  99:main.c        ****         	{
 471              		.loc 1 99 0 discriminator 2
 472 011e 7B68     		ldr	r3, [r7, #4]
 473 0120 0133     		adds	r3, r3, #1
 474 0122 7B60     		str	r3, [r7, #4]
 475              	.L24:
  99:main.c        ****         	{
 476              		.loc 1 99 0 is_stmt 0 discriminator 1
 477 0124 7B68     		ldr	r3, [r7, #4]
 478 0126 062B     		cmp	r3, #6
 479 0128 DBDD     		ble	.L26
 480              	.LBE6:
  98:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 481              		.loc 1 98 0 is_stmt 1 discriminator 2
 482 012a BB68     		ldr	r3, [r7, #8]
 483 012c 0133     		adds	r3, r3, #1
 484 012e BB60     		str	r3, [r7, #8]
 485              	.L23:
  98:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 486              		.loc 1 98 0 is_stmt 0 discriminator 1
 487 0130 BB68     		ldr	r3, [r7, #8]
 488 0132 062B     		cmp	r3, #6
 489 0134 D2DD     		ble	.L27
 490              	.LBE5:
 106:main.c        ****         		}  
 107:main.c        ****         	}
 108:main.c        ****         }
 109:main.c        ****         adcValue[c] = tempArray[(filter_size-1)/2];
 491              		.loc 1 109 0 is_stmt 1 discriminator 2
 492 0136 0A4B     		ldr	r3, .L29+4
 493 0138 D988     		ldrh	r1, [r3, #6]
 494 013a 0B4A     		ldr	r2, .L29+12
 495 013c 7B69     		ldr	r3, [r7, #20]
 496 013e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  83:main.c        ****         AMux_0_FastSelect(c);
 497              		.loc 1 83 0 discriminator 2
 498 0142 7B69     		ldr	r3, [r7, #20]
 499 0144 0133     		adds	r3, r3, #1
 500 0146 7B61     		str	r3, [r7, #20]
 501              	.L18:
  83:main.c        ****         AMux_0_FastSelect(c);
 502              		.loc 1 83 0 is_stmt 0 discriminator 1
 503 0148 7B69     		ldr	r3, [r7, #20]
 504 014a 032B     		cmp	r3, #3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 12


 505 014c 7FF75EAF 		ble	.L28
 506              	.LBE2:
 110:main.c        ****     }
 111:main.c        ****     update_median_isr_ClearPending();
 507              		.loc 1 111 0 is_stmt 1
 508 0150 FFF7FEFF 		bl	update_median_isr_ClearPending
 112:main.c        ****     
 113:main.c        **** }
 509              		.loc 1 113 0
 510 0154 00BF     		nop
 511 0156 1837     		adds	r7, r7, #24
 512              		.cfi_def_cfa_offset 8
 513 0158 BD46     		mov	sp, r7
 514              		.cfi_def_cfa_register 13
 515              		@ sp needed
 516 015a 80BD     		pop	{r7, pc}
 517              	.L30:
 518              		.align	2
 519              	.L29:
 520 015c 00000000 		.word	moving_median
 521 0160 00000000 		.word	tempArray
 522 0164 00000000 		.word	tmp
 523 0168 00000000 		.word	adcValue
 524              		.cfi_endproc
 525              	.LFE66:
 526              		.size	adc_update, .-adc_update
 527              		.section	.text.RxIsr,"ax",%progbits
 528              		.align	2
 529              		.global	RxIsr
 530              		.thumb
 531              		.thumb_func
 532              		.type	RxIsr, %function
 533              	RxIsr:
 534              	.LFB67:
 114:main.c        **** 
 115:main.c        **** 
 116:main.c        **** CY_ISR(RxIsr)
 117:main.c        **** {
 535              		.loc 1 117 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 8
 538              		@ frame_needed = 1, uses_anonymous_args = 0
 539 0000 90B5     		push	{r4, r7, lr}
 540              		.cfi_def_cfa_offset 12
 541              		.cfi_offset 4, -12
 542              		.cfi_offset 7, -8
 543              		.cfi_offset 14, -4
 544 0002 83B0     		sub	sp, sp, #12
 545              		.cfi_def_cfa_offset 24
 546 0004 00AF     		add	r7, sp, #0
 547              		.cfi_def_cfa_register 7
 548              	.L63:
 118:main.c        ****     uint8 rxStatus;         
 119:main.c        ****     uint8 rxData;           
 120:main.c        ****     
 121:main.c        ****     do
 122:main.c        ****     {
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 13


 123:main.c        ****         /* Read receiver status register */
 124:main.c        ****         rxStatus = UART_RXSTATUS_REG;
 549              		.loc 1 124 0
 550 0006 A24B     		ldr	r3, .L66
 551 0008 1B78     		ldrb	r3, [r3]
 552 000a FB70     		strb	r3, [r7, #3]
 125:main.c        **** 
 126:main.c        ****         if((rxStatus & (UART_RX_STS_BREAK      | UART_RX_STS_PAR_ERROR |
 127:main.c        ****                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 553              		.loc 1 127 0
 554 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 555 000e 03F01E03 		and	r3, r3, #30
 126:main.c        ****                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 556              		.loc 1 126 0
 557 0012 002B     		cmp	r3, #0
 558 0014 0CD0     		beq	.L32
 128:main.c        ****         {
 129:main.c        ****             /* ERROR handling. */
 130:main.c        ****             errorStatus |= rxStatus & ( UART_RX_STS_BREAK      | UART_RX_STS_PAR_ERROR | 
 559              		.loc 1 130 0
 560 0016 97F90330 		ldrsb	r3, [r7, #3]
 561 001a 03F01E03 		and	r3, r3, #30
 562 001e 5AB2     		sxtb	r2, r3
 563 0020 9C4B     		ldr	r3, .L66+4
 564 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 565 0024 5BB2     		sxtb	r3, r3
 566 0026 1343     		orrs	r3, r3, r2
 567 0028 5BB2     		sxtb	r3, r3
 568 002a DAB2     		uxtb	r2, r3
 569 002c 994B     		ldr	r3, .L66+4
 570 002e 1A70     		strb	r2, [r3]
 571              	.L32:
 131:main.c        ****                                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN);
 132:main.c        ****         }
 133:main.c        ****         
 134:main.c        ****         if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 572              		.loc 1 134 0
 573 0030 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 574 0032 03F02003 		and	r3, r3, #32
 575 0036 002B     		cmp	r3, #0
 576 0038 00F01F81 		beq	.L33
 135:main.c        ****         {
 136:main.c        ****             /* Read data from the RX data register */
 137:main.c        ****             rxData = UART_RXDATA_REG;
 577              		.loc 1 137 0
 578 003c 964B     		ldr	r3, .L66+8
 579 003e 1B78     		ldrb	r3, [r3]
 580 0040 BB70     		strb	r3, [r7, #2]
 138:main.c        ****             help[tt] = rxData;
 581              		.loc 1 138 0
 582 0042 964B     		ldr	r3, .L66+12
 583 0044 1B68     		ldr	r3, [r3]
 584 0046 9649     		ldr	r1, .L66+16
 585 0048 BA78     		ldrb	r2, [r7, #2]
 586 004a CA54     		strb	r2, [r1, r3]
 139:main.c        ****             tt++;
 587              		.loc 1 139 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 14


 588 004c 934B     		ldr	r3, .L66+12
 589 004e 1B68     		ldr	r3, [r3]
 590 0050 0133     		adds	r3, r3, #1
 591 0052 924A     		ldr	r2, .L66+12
 592 0054 1360     		str	r3, [r2]
 140:main.c        ****             if(tt==99){tt=0;}
 593              		.loc 1 140 0
 594 0056 914B     		ldr	r3, .L66+12
 595 0058 1B68     		ldr	r3, [r3]
 596 005a 632B     		cmp	r3, #99
 597 005c 02D1     		bne	.L34
 598              		.loc 1 140 0 is_stmt 0 discriminator 1
 599 005e 8F4B     		ldr	r3, .L66+12
 600 0060 0022     		movs	r2, #0
 601 0062 1A60     		str	r2, [r3]
 602              	.L34:
 141:main.c        ****             if(rxData=='b' ){start_calib=1;};
 603              		.loc 1 141 0 is_stmt 1
 604 0064 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 605 0066 622B     		cmp	r3, #98
 606 0068 02D1     		bne	.L35
 607              		.loc 1 141 0 is_stmt 0 discriminator 1
 608 006a 8E4B     		ldr	r3, .L66+20
 609 006c 0122     		movs	r2, #1
 610 006e 1A60     		str	r2, [r3]
 611              	.L35:
 142:main.c        ****             switch(data_read_mode)
 612              		.loc 1 142 0 is_stmt 1
 613 0070 8D4B     		ldr	r3, .L66+24
 614 0072 1B68     		ldr	r3, [r3]
 615 0074 062B     		cmp	r3, #6
 616 0076 00F20081 		bhi	.L33
 617 007a 01A2     		adr	r2, .L38
 618 007c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 619              		.p2align 2
 620              	.L38:
 621 0080 9D000000 		.word	.L37+1
 622 0084 D3000000 		.word	.L39+1
 623 0088 1B010000 		.word	.L40+1
 624 008c 6D010000 		.word	.L41+1
 625 0090 AF010000 		.word	.L42+1
 626 0094 F1010000 		.word	.L43+1
 627 0098 33020000 		.word	.L44+1
 628              		.p2align 1
 629              	.L37:
 143:main.c        ****             {
 144:main.c        ****                 case 0:
 145:main.c        ****                     if(rxData=='{' )
 630              		.loc 1 145 0
 631 009c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 632 009e 7B2B     		cmp	r3, #123
 633 00a0 40F0E880 		bne	.L64
 634              	.LBB7:
 146:main.c        ****                     {
 147:main.c        ****                         //aaaa
 148:main.c        ****                         for(int pp=1;pp<20;pp++){
 635              		.loc 1 148 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 15


 636 00a4 0123     		movs	r3, #1
 637 00a6 7B60     		str	r3, [r7, #4]
 638 00a8 07E0     		b	.L46
 639              	.L47:
 149:main.c        ****                             temp[pp] = ' ';
 640              		.loc 1 149 0 discriminator 3
 641 00aa 804A     		ldr	r2, .L66+28
 642 00ac 7B68     		ldr	r3, [r7, #4]
 643 00ae 1344     		add	r3, r3, r2
 644 00b0 2022     		movs	r2, #32
 645 00b2 1A70     		strb	r2, [r3]
 148:main.c        ****                             temp[pp] = ' ';
 646              		.loc 1 148 0 discriminator 3
 647 00b4 7B68     		ldr	r3, [r7, #4]
 648 00b6 0133     		adds	r3, r3, #1
 649 00b8 7B60     		str	r3, [r7, #4]
 650              	.L46:
 148:main.c        ****                             temp[pp] = ' ';
 651              		.loc 1 148 0 is_stmt 0 discriminator 1
 652 00ba 7B68     		ldr	r3, [r7, #4]
 653 00bc 132B     		cmp	r3, #19
 654 00be F4DD     		ble	.L47
 655              	.LBE7:
 150:main.c        ****                         }
 151:main.c        ****                         temp[0] = '\0';
 656              		.loc 1 151 0 is_stmt 1
 657 00c0 7A4B     		ldr	r3, .L66+28
 658 00c2 0022     		movs	r2, #0
 659 00c4 1A70     		strb	r2, [r3]
 152:main.c        ****                         data_read_mode++;
 660              		.loc 1 152 0
 661 00c6 784B     		ldr	r3, .L66+24
 662 00c8 1B68     		ldr	r3, [r3]
 663 00ca 0133     		adds	r3, r3, #1
 664 00cc 764A     		ldr	r2, .L66+24
 665 00ce 1360     		str	r3, [r2]
 153:main.c        ****                     }
 154:main.c        ****                 break;
 666              		.loc 1 154 0
 667 00d0 D0E0     		b	.L64
 668              	.L39:
 155:main.c        ****                 case 1:
 156:main.c        ****                     if(rxData=='x'){
 669              		.loc 1 156 0
 670 00d2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 671 00d4 782B     		cmp	r3, #120
 672 00d6 03D1     		bne	.L48
 157:main.c        ****                         data_read_mode = 2;}
 673              		.loc 1 157 0
 674 00d8 734B     		ldr	r3, .L66+24
 675 00da 0222     		movs	r2, #2
 676 00dc 1A60     		str	r2, [r3]
 158:main.c        ****                     else if(rxData=='p'){
 159:main.c        ****                         data_read_mode = 3;}
 160:main.c        ****                     else if(rxData=='i'){
 161:main.c        ****                         data_read_mode = 4;}
 162:main.c        ****                     else if(rxData=='d'){
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 16


 163:main.c        ****                         data_read_mode = 5;}
 164:main.c        ****                     else if(rxData=='c'){
 165:main.c        ****                         data_read_mode = 6;}
 166:main.c        ****                 break;
 677              		.loc 1 166 0
 678 00de CBE0     		b	.L65
 679              	.L48:
 158:main.c        ****                     else if(rxData=='p'){
 680              		.loc 1 158 0
 681 00e0 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 682 00e2 702B     		cmp	r3, #112
 683 00e4 03D1     		bne	.L50
 159:main.c        ****                     else if(rxData=='i'){
 684              		.loc 1 159 0
 685 00e6 704B     		ldr	r3, .L66+24
 686 00e8 0322     		movs	r2, #3
 687 00ea 1A60     		str	r2, [r3]
 688              		.loc 1 166 0
 689 00ec C4E0     		b	.L65
 690              	.L50:
 160:main.c        ****                         data_read_mode = 4;}
 691              		.loc 1 160 0
 692 00ee BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 693 00f0 692B     		cmp	r3, #105
 694 00f2 03D1     		bne	.L51
 161:main.c        ****                     else if(rxData=='d'){
 695              		.loc 1 161 0
 696 00f4 6C4B     		ldr	r3, .L66+24
 697 00f6 0422     		movs	r2, #4
 698 00f8 1A60     		str	r2, [r3]
 699              		.loc 1 166 0
 700 00fa BDE0     		b	.L65
 701              	.L51:
 162:main.c        ****                         data_read_mode = 5;}
 702              		.loc 1 162 0
 703 00fc BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 704 00fe 642B     		cmp	r3, #100
 705 0100 03D1     		bne	.L52
 163:main.c        ****                     else if(rxData=='c'){
 706              		.loc 1 163 0
 707 0102 694B     		ldr	r3, .L66+24
 708 0104 0522     		movs	r2, #5
 709 0106 1A60     		str	r2, [r3]
 710              		.loc 1 166 0
 711 0108 B6E0     		b	.L65
 712              	.L52:
 164:main.c        ****                         data_read_mode = 6;}
 713              		.loc 1 164 0
 714 010a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 715 010c 632B     		cmp	r3, #99
 716 010e 40F0B380 		bne	.L65
 165:main.c        ****                 break;
 717              		.loc 1 165 0
 718 0112 654B     		ldr	r3, .L66+24
 719 0114 0622     		movs	r2, #6
 720 0116 1A60     		str	r2, [r3]
 721              		.loc 1 166 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 17


 722 0118 AEE0     		b	.L65
 723              	.L40:
 167:main.c        ****                 case 2: //x
 168:main.c        ****                     if(rxData != '}'){
 724              		.loc 1 168 0
 725 011a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 726 011c 7D2B     		cmp	r3, #125
 727 011e 0AD0     		beq	.L53
 169:main.c        ****                         temp[nn] = rxData;
 728              		.loc 1 169 0
 729 0120 634B     		ldr	r3, .L66+32
 730 0122 1B68     		ldr	r3, [r3]
 731 0124 6149     		ldr	r1, .L66+28
 732 0126 BA78     		ldrb	r2, [r7, #2]
 733 0128 CA54     		strb	r2, [r1, r3]
 170:main.c        ****                         nn++;
 734              		.loc 1 170 0
 735 012a 614B     		ldr	r3, .L66+32
 736 012c 1B68     		ldr	r3, [r3]
 737 012e 0133     		adds	r3, r3, #1
 738 0130 5F4A     		ldr	r2, .L66+32
 739 0132 1360     		str	r3, [r2]
 171:main.c        ****                     }
 172:main.c        ****                     else {
 173:main.c        ****                         
 174:main.c        ****                         new_pos[cyl_no] = (int) strtol(temp, (char **)NULL, 10);
 175:main.c        ****                         new_pos_set[cyl_no] = 1;
 176:main.c        ****                         nn=0; 
 177:main.c        ****                         temp[0] = '\0';
 178:main.c        ****                         data_read_mode = 0;
 179:main.c        ****                         
 180:main.c        ****                     }
 181:main.c        ****                   
 182:main.c        ****                 break;
 740              		.loc 1 182 0
 741 0134 A1E0     		b	.L33
 742              	.L53:
 174:main.c        ****                         new_pos_set[cyl_no] = 1;
 743              		.loc 1 174 0
 744 0136 5F4B     		ldr	r3, .L66+36
 745 0138 1C68     		ldr	r4, [r3]
 746 013a 0A22     		movs	r2, #10
 747 013c 0021     		movs	r1, #0
 748 013e 5B48     		ldr	r0, .L66+28
 749 0140 FFF7FEFF 		bl	strtol
 750 0144 0246     		mov	r2, r0
 751 0146 5C4B     		ldr	r3, .L66+40
 752 0148 43F82420 		str	r2, [r3, r4, lsl #2]
 175:main.c        ****                         nn=0; 
 753              		.loc 1 175 0
 754 014c 594B     		ldr	r3, .L66+36
 755 014e 1B68     		ldr	r3, [r3]
 756 0150 5A4A     		ldr	r2, .L66+44
 757 0152 0121     		movs	r1, #1
 758 0154 42F82310 		str	r1, [r2, r3, lsl #2]
 176:main.c        ****                         temp[0] = '\0';
 759              		.loc 1 176 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 18


 760 0158 554B     		ldr	r3, .L66+32
 761 015a 0022     		movs	r2, #0
 762 015c 1A60     		str	r2, [r3]
 177:main.c        ****                         data_read_mode = 0;
 763              		.loc 1 177 0
 764 015e 534B     		ldr	r3, .L66+28
 765 0160 0022     		movs	r2, #0
 766 0162 1A70     		strb	r2, [r3]
 178:main.c        ****                         
 767              		.loc 1 178 0
 768 0164 504B     		ldr	r3, .L66+24
 769 0166 0022     		movs	r2, #0
 770 0168 1A60     		str	r2, [r3]
 771              		.loc 1 182 0
 772 016a 86E0     		b	.L33
 773              	.L41:
 183:main.c        ****                 case 3: //p
 184:main.c        ****                     if(rxData != '}'){
 774              		.loc 1 184 0
 775 016c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 776 016e 7D2B     		cmp	r3, #125
 777 0170 0AD0     		beq	.L55
 185:main.c        ****                         temp[nn] = rxData;
 778              		.loc 1 185 0
 779 0172 4F4B     		ldr	r3, .L66+32
 780 0174 1B68     		ldr	r3, [r3]
 781 0176 4D49     		ldr	r1, .L66+28
 782 0178 BA78     		ldrb	r2, [r7, #2]
 783 017a CA54     		strb	r2, [r1, r3]
 186:main.c        ****                         nn++;
 784              		.loc 1 186 0
 785 017c 4C4B     		ldr	r3, .L66+32
 786 017e 1B68     		ldr	r3, [r3]
 787 0180 0133     		adds	r3, r3, #1
 788 0182 4B4A     		ldr	r2, .L66+32
 789 0184 1360     		str	r3, [r2]
 187:main.c        ****                     }
 188:main.c        ****                     else {
 189:main.c        ****                         pid[0] = strtod(temp, NULL);
 190:main.c        ****                         nn=0;
 191:main.c        ****                         temp[0] = '\0';
 192:main.c        ****                         data_read_mode = 0;
 193:main.c        ****                     }
 194:main.c        ****                     
 195:main.c        ****                 break;
 790              		.loc 1 195 0
 791 0186 78E0     		b	.L33
 792              	.L55:
 189:main.c        ****                         nn=0;
 793              		.loc 1 189 0
 794 0188 0021     		movs	r1, #0
 795 018a 4848     		ldr	r0, .L66+28
 796 018c FFF7FEFF 		bl	strtod
 797 0190 0346     		mov	r3, r0
 798 0192 0C46     		mov	r4, r1
 799 0194 4A4A     		ldr	r2, .L66+48
 800 0196 C2E90034 		strd	r3, [r2]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 19


 190:main.c        ****                         temp[0] = '\0';
 801              		.loc 1 190 0
 802 019a 454B     		ldr	r3, .L66+32
 803 019c 0022     		movs	r2, #0
 804 019e 1A60     		str	r2, [r3]
 191:main.c        ****                         data_read_mode = 0;
 805              		.loc 1 191 0
 806 01a0 424B     		ldr	r3, .L66+28
 807 01a2 0022     		movs	r2, #0
 808 01a4 1A70     		strb	r2, [r3]
 192:main.c        ****                     }
 809              		.loc 1 192 0
 810 01a6 404B     		ldr	r3, .L66+24
 811 01a8 0022     		movs	r2, #0
 812 01aa 1A60     		str	r2, [r3]
 813              		.loc 1 195 0
 814 01ac 65E0     		b	.L33
 815              	.L42:
 196:main.c        ****                 case 4: //i
 197:main.c        ****                     if(rxData != '}'){
 816              		.loc 1 197 0
 817 01ae BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 818 01b0 7D2B     		cmp	r3, #125
 819 01b2 0AD0     		beq	.L57
 198:main.c        ****                         temp[nn] = rxData;
 820              		.loc 1 198 0
 821 01b4 3E4B     		ldr	r3, .L66+32
 822 01b6 1B68     		ldr	r3, [r3]
 823 01b8 3C49     		ldr	r1, .L66+28
 824 01ba BA78     		ldrb	r2, [r7, #2]
 825 01bc CA54     		strb	r2, [r1, r3]
 199:main.c        ****                         nn++;
 826              		.loc 1 199 0
 827 01be 3C4B     		ldr	r3, .L66+32
 828 01c0 1B68     		ldr	r3, [r3]
 829 01c2 0133     		adds	r3, r3, #1
 830 01c4 3A4A     		ldr	r2, .L66+32
 831 01c6 1360     		str	r3, [r2]
 200:main.c        ****                     }
 201:main.c        ****                     else {
 202:main.c        ****                         pid[1] = strtod(temp, NULL);
 203:main.c        ****                         nn=0;
 204:main.c        ****                         temp[0] = '\0';
 205:main.c        ****                         data_read_mode = 0;
 206:main.c        ****                     }
 207:main.c        ****                 break;
 832              		.loc 1 207 0
 833 01c8 57E0     		b	.L33
 834              	.L57:
 202:main.c        ****                         nn=0;
 835              		.loc 1 202 0
 836 01ca 0021     		movs	r1, #0
 837 01cc 3748     		ldr	r0, .L66+28
 838 01ce FFF7FEFF 		bl	strtod
 839 01d2 0346     		mov	r3, r0
 840 01d4 0C46     		mov	r4, r1
 841 01d6 3A4A     		ldr	r2, .L66+48
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 20


 842 01d8 C2E90234 		strd	r3, [r2, #8]
 203:main.c        ****                         temp[0] = '\0';
 843              		.loc 1 203 0
 844 01dc 344B     		ldr	r3, .L66+32
 845 01de 0022     		movs	r2, #0
 846 01e0 1A60     		str	r2, [r3]
 204:main.c        ****                         data_read_mode = 0;
 847              		.loc 1 204 0
 848 01e2 324B     		ldr	r3, .L66+28
 849 01e4 0022     		movs	r2, #0
 850 01e6 1A70     		strb	r2, [r3]
 205:main.c        ****                     }
 851              		.loc 1 205 0
 852 01e8 2F4B     		ldr	r3, .L66+24
 853 01ea 0022     		movs	r2, #0
 854 01ec 1A60     		str	r2, [r3]
 855              		.loc 1 207 0
 856 01ee 44E0     		b	.L33
 857              	.L43:
 208:main.c        ****                 case 5: //d
 209:main.c        ****                     if(rxData != '}'){
 858              		.loc 1 209 0
 859 01f0 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 860 01f2 7D2B     		cmp	r3, #125
 861 01f4 0AD0     		beq	.L59
 210:main.c        ****                         temp[nn] = rxData;
 862              		.loc 1 210 0
 863 01f6 2E4B     		ldr	r3, .L66+32
 864 01f8 1B68     		ldr	r3, [r3]
 865 01fa 2C49     		ldr	r1, .L66+28
 866 01fc BA78     		ldrb	r2, [r7, #2]
 867 01fe CA54     		strb	r2, [r1, r3]
 211:main.c        ****                         nn++;
 868              		.loc 1 211 0
 869 0200 2B4B     		ldr	r3, .L66+32
 870 0202 1B68     		ldr	r3, [r3]
 871 0204 0133     		adds	r3, r3, #1
 872 0206 2A4A     		ldr	r2, .L66+32
 873 0208 1360     		str	r3, [r2]
 212:main.c        ****                     }
 213:main.c        ****                     else {
 214:main.c        ****                         pid[2] = strtod(temp, NULL);
 215:main.c        ****                         nn=0;
 216:main.c        ****                         temp[0] = '\0';
 217:main.c        ****                         data_read_mode = 0;
 218:main.c        ****                     }
 219:main.c        ****                 break;
 874              		.loc 1 219 0
 875 020a 36E0     		b	.L33
 876              	.L59:
 214:main.c        ****                         nn=0;
 877              		.loc 1 214 0
 878 020c 0021     		movs	r1, #0
 879 020e 2748     		ldr	r0, .L66+28
 880 0210 FFF7FEFF 		bl	strtod
 881 0214 0346     		mov	r3, r0
 882 0216 0C46     		mov	r4, r1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 21


 883 0218 294A     		ldr	r2, .L66+48
 884 021a C2E90434 		strd	r3, [r2, #16]
 215:main.c        ****                         temp[0] = '\0';
 885              		.loc 1 215 0
 886 021e 244B     		ldr	r3, .L66+32
 887 0220 0022     		movs	r2, #0
 888 0222 1A60     		str	r2, [r3]
 216:main.c        ****                         data_read_mode = 0;
 889              		.loc 1 216 0
 890 0224 214B     		ldr	r3, .L66+28
 891 0226 0022     		movs	r2, #0
 892 0228 1A70     		strb	r2, [r3]
 217:main.c        ****                     }
 893              		.loc 1 217 0
 894 022a 1F4B     		ldr	r3, .L66+24
 895 022c 0022     		movs	r2, #0
 896 022e 1A60     		str	r2, [r3]
 897              		.loc 1 219 0
 898 0230 23E0     		b	.L33
 899              	.L44:
 220:main.c        ****                 case 6: //c
 221:main.c        ****                     if(rxData != '}'){
 900              		.loc 1 221 0
 901 0232 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 902 0234 7D2B     		cmp	r3, #125
 903 0236 0AD0     		beq	.L61
 222:main.c        ****                         temp[nn] = rxData;
 904              		.loc 1 222 0
 905 0238 1D4B     		ldr	r3, .L66+32
 906 023a 1B68     		ldr	r3, [r3]
 907 023c 1B49     		ldr	r1, .L66+28
 908 023e BA78     		ldrb	r2, [r7, #2]
 909 0240 CA54     		strb	r2, [r1, r3]
 223:main.c        ****                         nn++;
 910              		.loc 1 223 0
 911 0242 1B4B     		ldr	r3, .L66+32
 912 0244 1B68     		ldr	r3, [r3]
 913 0246 0133     		adds	r3, r3, #1
 914 0248 194A     		ldr	r2, .L66+32
 915 024a 1360     		str	r3, [r2]
 224:main.c        ****                     }
 225:main.c        ****                     else {
 226:main.c        ****                         cyl_no = (int) strtol(temp, (char **)NULL, 10);
 227:main.c        ****                         nn=0; 
 228:main.c        ****                         temp[0] = '\0';
 229:main.c        ****                         data_read_mode = 0;
 230:main.c        ****                     }
 231:main.c        ****                   
 232:main.c        ****                 break;
 916              		.loc 1 232 0
 917 024c 15E0     		b	.L33
 918              	.L61:
 226:main.c        ****                         nn=0; 
 919              		.loc 1 226 0
 920 024e 0A22     		movs	r2, #10
 921 0250 0021     		movs	r1, #0
 922 0252 1648     		ldr	r0, .L66+28
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 22


 923 0254 FFF7FEFF 		bl	strtol
 924 0258 0246     		mov	r2, r0
 925 025a 164B     		ldr	r3, .L66+36
 926 025c 1A60     		str	r2, [r3]
 227:main.c        ****                         temp[0] = '\0';
 927              		.loc 1 227 0
 928 025e 144B     		ldr	r3, .L66+32
 929 0260 0022     		movs	r2, #0
 930 0262 1A60     		str	r2, [r3]
 228:main.c        ****                         data_read_mode = 0;
 931              		.loc 1 228 0
 932 0264 114B     		ldr	r3, .L66+28
 933 0266 0022     		movs	r2, #0
 934 0268 1A70     		strb	r2, [r3]
 229:main.c        ****                     }
 935              		.loc 1 229 0
 936 026a 0F4B     		ldr	r3, .L66+24
 937 026c 0022     		movs	r2, #0
 938 026e 1A60     		str	r2, [r3]
 939              		.loc 1 232 0
 940 0270 00BF     		nop
 941 0272 02E0     		b	.L33
 942              	.L64:
 154:main.c        ****                 case 1:
 943              		.loc 1 154 0
 944 0274 00BF     		nop
 945 0276 00E0     		b	.L33
 946              	.L65:
 166:main.c        ****                 case 2: //x
 947              		.loc 1 166 0
 948 0278 00BF     		nop
 949              	.L33:
 233:main.c        ****             }
 234:main.c        ****             
 235:main.c        ****             if(errorStatus == 0u)
 236:main.c        ****             {
 237:main.c        ****                 /* Send data backward */
 238:main.c        ****                 //UART_TXDATA_REG = rxData;
 239:main.c        ****             }
 240:main.c        ****         }
 241:main.c        ****     }while((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u);
 950              		.loc 1 241 0
 951 027a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 952 027c 03F02003 		and	r3, r3, #32
 953 0280 002B     		cmp	r3, #0
 954 0282 7FF4C0AE 		bne	.L63
 242:main.c        **** }
 955              		.loc 1 242 0
 956 0286 00BF     		nop
 957 0288 0C37     		adds	r7, r7, #12
 958              		.cfi_def_cfa_offset 12
 959 028a BD46     		mov	sp, r7
 960              		.cfi_def_cfa_register 13
 961              		@ sp needed
 962 028c 90BD     		pop	{r4, r7, pc}
 963              	.L67:
 964 028e 00BF     		.align	2
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 23


 965              	.L66:
 966 0290 69650040 		.word	1073767785
 967 0294 00000000 		.word	errorStatus
 968 0298 4A650040 		.word	1073767754
 969 029c 00000000 		.word	tt
 970 02a0 00000000 		.word	help
 971 02a4 00000000 		.word	start_calib
 972 02a8 00000000 		.word	data_read_mode
 973 02ac 00000000 		.word	temp
 974 02b0 00000000 		.word	nn
 975 02b4 00000000 		.word	cyl_no
 976 02b8 00000000 		.word	new_pos
 977 02bc 00000000 		.word	new_pos_set
 978 02c0 00000000 		.word	pid
 979              		.cfi_endproc
 980              	.LFE67:
 981              		.size	RxIsr, .-RxIsr
 982              		.section	.rodata
 983              		.align	2
 984              	.LC0:
 985 0000 25303864 		.ascii	"%08d\011%08.2f\011%08d\011%08.2f\000"
 985      09253038 
 985      2E326609 
 985      25303864 
 985      09253038 
 986              		.section	.text.main,"ax",%progbits
 987              		.align	2
 988              		.global	main
 989              		.thumb
 990              		.thumb_func
 991              		.type	main, %function
 992              	main:
 993              	.LFB68:
 243:main.c        **** 
 244:main.c        **** int main()
 245:main.c        **** {
 994              		.loc 1 245 0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 24
 997              		@ frame_needed = 1, uses_anonymous_args = 0
 998 0000 B0B5     		push	{r4, r5, r7, lr}
 999              		.cfi_def_cfa_offset 16
 1000              		.cfi_offset 4, -16
 1001              		.cfi_offset 5, -12
 1002              		.cfi_offset 7, -8
 1003              		.cfi_offset 14, -4
 1004 0002 8CB0     		sub	sp, sp, #48
 1005              		.cfi_def_cfa_offset 64
 1006 0004 06AF     		add	r7, sp, #24
 1007              		.cfi_def_cfa 7, 40
 1008              	.LBB8:
 246:main.c        ****     //initializing variables
 247:main.c        ****     for(int g = 0;g<CYL_NO;g++){
 1009              		.loc 1 247 0
 1010 0006 0023     		movs	r3, #0
 1011 0008 7B61     		str	r3, [r7, #20]
 1012 000a 49E0     		b	.L69
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 24


 1013              	.L70:
 248:main.c        ****         new_pos_set[g]  = 0;
 1014              		.loc 1 248 0 discriminator 3
 1015 000c 604A     		ldr	r2, .L78+8
 1016 000e 7B69     		ldr	r3, [r7, #20]
 1017 0010 0021     		movs	r1, #0
 1018 0012 42F82310 		str	r1, [r2, r3, lsl #2]
 249:main.c        ****         new_pos[g]      = 0;
 1019              		.loc 1 249 0 discriminator 3
 1020 0016 5F4A     		ldr	r2, .L78+12
 1021 0018 7B69     		ldr	r3, [r7, #20]
 1022 001a 0021     		movs	r1, #0
 1023 001c 42F82310 		str	r1, [r2, r3, lsl #2]
 250:main.c        ****         pos[g]          = 4000;
 1024              		.loc 1 250 0 discriminator 3
 1025 0020 5D4A     		ldr	r2, .L78+16
 1026 0022 7B69     		ldr	r3, [r7, #20]
 1027 0024 4FF47A61 		mov	r1, #4000
 1028 0028 42F82310 		str	r1, [r2, r3, lsl #2]
 251:main.c        ****         pulse[g]        = 0;
 1029              		.loc 1 251 0 discriminator 3
 1030 002c 5B4A     		ldr	r2, .L78+20
 1031 002e 7B69     		ldr	r3, [r7, #20]
 1032 0030 0021     		movs	r1, #0
 1033 0032 42F82310 		str	r1, [r2, r3, lsl #2]
 252:main.c        ****         pulse_temp[g]   = 0;
 1034              		.loc 1 252 0 discriminator 3
 1035 0036 5A4A     		ldr	r2, .L78+24
 1036 0038 7B69     		ldr	r3, [r7, #20]
 1037 003a 0021     		movs	r1, #0
 1038 003c 42F82310 		str	r1, [r2, r3, lsl #2]
 253:main.c        ****         err[g]          = 0;
 1039              		.loc 1 253 0 discriminator 3
 1040 0040 584A     		ldr	r2, .L78+28
 1041 0042 7B69     		ldr	r3, [r7, #20]
 1042 0044 DB00     		lsls	r3, r3, #3
 1043 0046 1A44     		add	r2, r2, r3
 1044 0048 4FF00003 		mov	r3, #0
 1045 004c 4FF00004 		mov	r4, #0
 1046 0050 C2E90034 		strd	r3, [r2]
 254:main.c        ****         adcValue[g]     = 0;
 1047              		.loc 1 254 0 discriminator 3
 1048 0054 544A     		ldr	r2, .L78+32
 1049 0056 7B69     		ldr	r3, [r7, #20]
 1050 0058 0021     		movs	r1, #0
 1051 005a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 255:main.c        ****         der[g]          = 0;
 1052              		.loc 1 255 0 discriminator 3
 1053 005e 534A     		ldr	r2, .L78+36
 1054 0060 7B69     		ldr	r3, [r7, #20]
 1055 0062 DB00     		lsls	r3, r3, #3
 1056 0064 1A44     		add	r2, r2, r3
 1057 0066 4FF00003 		mov	r3, #0
 1058 006a 4FF00004 		mov	r4, #0
 1059 006e C2E90034 		strd	r3, [r2]
 256:main.c        ****         prev_err[g]     = 0;
 1060              		.loc 1 256 0 discriminator 3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 25


 1061 0072 4F4A     		ldr	r2, .L78+40
 1062 0074 7B69     		ldr	r3, [r7, #20]
 1063 0076 DB00     		lsls	r3, r3, #3
 1064 0078 1A44     		add	r2, r2, r3
 1065 007a 4FF00003 		mov	r3, #0
 1066 007e 4FF00004 		mov	r4, #0
 1067 0082 C2E90034 		strd	r3, [r2]
 257:main.c        ****         pid_integral[g] = 0;
 1068              		.loc 1 257 0 discriminator 3
 1069 0086 4B4A     		ldr	r2, .L78+44
 1070 0088 7B69     		ldr	r3, [r7, #20]
 1071 008a DB00     		lsls	r3, r3, #3
 1072 008c 1A44     		add	r2, r2, r3
 1073 008e 4FF00003 		mov	r3, #0
 1074 0092 4FF00004 		mov	r4, #0
 1075 0096 C2E90034 		strd	r3, [r2]
 247:main.c        ****         new_pos_set[g]  = 0;
 1076              		.loc 1 247 0 discriminator 3
 1077 009a 7B69     		ldr	r3, [r7, #20]
 1078 009c 0133     		adds	r3, r3, #1
 1079 009e 7B61     		str	r3, [r7, #20]
 1080              	.L69:
 247:main.c        ****         new_pos_set[g]  = 0;
 1081              		.loc 1 247 0 is_stmt 0 discriminator 1
 1082 00a0 7B69     		ldr	r3, [r7, #20]
 1083 00a2 032B     		cmp	r3, #3
 1084 00a4 B2DD     		ble	.L70
 1085              	.LBE8:
 258:main.c        ****     }
 259:main.c        ****     //PWM variables
 260:main.c        ****     PWM_0_Start();
 1086              		.loc 1 260 0 is_stmt 1
 1087 00a6 FFF7FEFF 		bl	PWM_0_Start
 261:main.c        ****     PWM_1_Start();
 1088              		.loc 1 261 0
 1089 00aa FFF7FEFF 		bl	PWM_1_Start
 262:main.c        ****     PWM_2_Start();
 1090              		.loc 1 262 0
 1091 00ae FFF7FEFF 		bl	PWM_2_Start
 263:main.c        ****     PWM_3_Start();
 1092              		.loc 1 263 0
 1093 00b2 FFF7FEFF 		bl	PWM_3_Start
 264:main.c        ****     ADC_0_Start();
 1094              		.loc 1 264 0
 1095 00b6 FFF7FEFF 		bl	ADC_0_Start
 265:main.c        ****     ADC_0_StartConvert();
 1096              		.loc 1 265 0
 1097 00ba FFF7FEFF 		bl	ADC_0_StartConvert
 266:main.c        ****     AMux_0_Init();
 1098              		.loc 1 266 0
 1099 00be FFF7FEFF 		bl	AMux_0_Start
 267:main.c        ****     
 268:main.c        ****     UART_Start();           /* Start communication component */
 1100              		.loc 1 268 0
 1101 00c2 FFF7FEFF 		bl	UART_Start
 269:main.c        **** 
 270:main.c        **** #if(INTERRUPT_CODE_ENABLED == ENABLED)
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 26


 271:main.c        ****     isr_rx_StartEx(RxIsr);
 1102              		.loc 1 271 0
 1103 00c6 3C48     		ldr	r0, .L78+48
 1104 00c8 FFF7FEFF 		bl	isr_rx_StartEx
 272:main.c        ****     update_median_isr_StartEx(adc_update);
 1105              		.loc 1 272 0
 1106 00cc 3B48     		ldr	r0, .L78+52
 1107 00ce FFF7FEFF 		bl	update_median_isr_StartEx
 273:main.c        **** #endif /* INTERRUPT_CODE_ENABLED == ENABLED */
 274:main.c        ****     
 275:main.c        ****     CyGlobalIntEnable;      /* Enable global interrupts. */
 1108              		.loc 1 275 0
 1109              		.syntax unified
 1110              	@ 275 "main.c" 1
 1111 00d2 62B6     		CPSIE   i
 1112              	@ 0 "" 2
 276:main.c        ****     
 277:main.c        ****     double dt;
 278:main.c        ****     double time;
 279:main.c        ****     
 280:main.c        ****     dt = 0.025; //initialised dt, corrected by timer  below
 1113              		.loc 1 280 0
 1114              		.thumb
 1115              		.syntax unified
 1116 00d4 2CA4     		adr	r4, .L78
 1117 00d6 D4E90034 		ldrd	r3, [r4]
 1118 00da C7E90034 		strd	r3, [r7]
 281:main.c        **** 
 282:main.c        ****     sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[1],err[1]);
 1119              		.loc 1 282 0
 1120 00de 324B     		ldr	r3, .L78+32
 1121 00e0 1B88     		ldrh	r3, [r3]
 1122 00e2 1D46     		mov	r5, r3
 1123 00e4 2F4B     		ldr	r3, .L78+28
 1124 00e6 18CB     		ldmia	r3, {r3-r4}
 1125 00e8 2F4A     		ldr	r2, .L78+32
 1126 00ea 5288     		ldrh	r2, [r2, #2]
 1127 00ec 1046     		mov	r0, r2
 1128 00ee 2D4A     		ldr	r2, .L78+28
 1129 00f0 D2E90212 		ldrd	r1, [r2, #8]
 1130 00f4 CDE90412 		strd	r1, [sp, #16]
 1131 00f8 0290     		str	r0, [sp, #8]
 1132 00fa CDE90034 		strd	r3, [sp]
 1133 00fe 2A46     		mov	r2, r5
 1134 0100 2F49     		ldr	r1, .L78+56
 1135 0102 3048     		ldr	r0, .L78+60
 1136 0104 FFF7FEFF 		bl	sprintf
 283:main.c        ****     UART_PutString(sendValue);
 1137              		.loc 1 283 0
 1138 0108 2E48     		ldr	r0, .L78+60
 1139 010a FFF7FEFF 		bl	UART_PutString
 284:main.c        ****     
 285:main.c        ****     median_timer_Start();
 1140              		.loc 1 285 0
 1141 010e FFF7FEFF 		bl	median_timer_Start
 286:main.c        ****     Timer_1_Start();
 1142              		.loc 1 286 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 27


 1143 0112 FFF7FEFF 		bl	Timer_1_Start
 1144              	.L77:
 1145              	.LBB9:
 287:main.c        ****     
 288:main.c        ****     for(;;)
 289:main.c        ****     {
 290:main.c        ****         for(;;){
 291:main.c        ****             for(int i = 0;i<4;i++){
 1146              		.loc 1 291 0
 1147 0116 0023     		movs	r3, #0
 1148 0118 3B61     		str	r3, [r7, #16]
 1149 011a 07E0     		b	.L71
 1150              	.L72:
 292:main.c        ****                 writePWM(i,499);
 1151              		.loc 1 292 0 discriminator 3
 1152 011c 40F2F311 		movw	r1, #499
 1153 0120 3869     		ldr	r0, [r7, #16]
 1154 0122 FFF7FEFF 		bl	writePWM
 291:main.c        ****                 writePWM(i,499);
 1155              		.loc 1 291 0 discriminator 3
 1156 0126 3B69     		ldr	r3, [r7, #16]
 1157 0128 0133     		adds	r3, r3, #1
 1158 012a 3B61     		str	r3, [r7, #16]
 1159              	.L71:
 291:main.c        ****                 writePWM(i,499);
 1160              		.loc 1 291 0 is_stmt 0 discriminator 1
 1161 012c 3B69     		ldr	r3, [r7, #16]
 1162 012e 032B     		cmp	r3, #3
 1163 0130 F4DD     		ble	.L72
 1164              	.LBE9:
 293:main.c        ****             }
 294:main.c        ****                 CyDelay(500);
 1165              		.loc 1 294 0 is_stmt 1
 1166 0132 4FF4FA70 		mov	r0, #500
 1167 0136 FFF7FEFF 		bl	CyDelay
 1168              	.LBB10:
 295:main.c        ****                 for(int i = 0;i<4;i++){
 1169              		.loc 1 295 0
 1170 013a 0023     		movs	r3, #0
 1171 013c FB60     		str	r3, [r7, #12]
 1172 013e 07E0     		b	.L73
 1173              	.L74:
 296:main.c        ****                 writePWM(i,-499);
 1174              		.loc 1 296 0 discriminator 3
 1175 0140 6FF4F971 		mvn	r1, #498
 1176 0144 F868     		ldr	r0, [r7, #12]
 1177 0146 FFF7FEFF 		bl	writePWM
 295:main.c        ****                 for(int i = 0;i<4;i++){
 1178              		.loc 1 295 0 discriminator 3
 1179 014a FB68     		ldr	r3, [r7, #12]
 1180 014c 0133     		adds	r3, r3, #1
 1181 014e FB60     		str	r3, [r7, #12]
 1182              	.L73:
 295:main.c        ****                 for(int i = 0;i<4;i++){
 1183              		.loc 1 295 0 is_stmt 0 discriminator 1
 1184 0150 FB68     		ldr	r3, [r7, #12]
 1185 0152 032B     		cmp	r3, #3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 28


 1186 0154 F4DD     		ble	.L74
 1187              	.LBE10:
 297:main.c        ****             }
 298:main.c        ****                 CyDelay(500);
 1188              		.loc 1 298 0 is_stmt 1
 1189 0156 4FF4FA70 		mov	r0, #500
 1190 015a FFF7FEFF 		bl	CyDelay
 1191              	.LBB11:
 299:main.c        ****                 for(int i = 0;i<4;i++){
 1192              		.loc 1 299 0
 1193 015e 0023     		movs	r3, #0
 1194 0160 BB60     		str	r3, [r7, #8]
 1195 0162 06E0     		b	.L75
 1196              	.L76:
 300:main.c        ****                 writePWM(i,0);
 1197              		.loc 1 300 0 discriminator 3
 1198 0164 0021     		movs	r1, #0
 1199 0166 B868     		ldr	r0, [r7, #8]
 1200 0168 FFF7FEFF 		bl	writePWM
 299:main.c        ****                 for(int i = 0;i<4;i++){
 1201              		.loc 1 299 0 discriminator 3
 1202 016c BB68     		ldr	r3, [r7, #8]
 1203 016e 0133     		adds	r3, r3, #1
 1204 0170 BB60     		str	r3, [r7, #8]
 1205              	.L75:
 299:main.c        ****                 for(int i = 0;i<4;i++){
 1206              		.loc 1 299 0 is_stmt 0 discriminator 1
 1207 0172 BB68     		ldr	r3, [r7, #8]
 1208 0174 032B     		cmp	r3, #3
 1209 0176 F5DD     		ble	.L76
 1210              	.LBE11:
 301:main.c        ****             }
 302:main.c        ****                 CyDelay(1000);
 1211              		.loc 1 302 0 is_stmt 1
 1212 0178 4FF47A70 		mov	r0, #1000
 1213 017c FFF7FEFF 		bl	CyDelay
 303:main.c        ****         }
 1214              		.loc 1 303 0
 1215 0180 C9E7     		b	.L77
 1216              	.L79:
 1217 0182 00BFAFF3 		.align	3
 1217      0080
 1218              	.L78:
 1219 0188 9A999999 		.word	-1717986918
 1220 018c 9999993F 		.word	1067030937
 1221 0190 00000000 		.word	new_pos_set
 1222 0194 00000000 		.word	new_pos
 1223 0198 00000000 		.word	pos
 1224 019c 00000000 		.word	pulse
 1225 01a0 00000000 		.word	pulse_temp
 1226 01a4 00000000 		.word	err
 1227 01a8 00000000 		.word	adcValue
 1228 01ac 00000000 		.word	der
 1229 01b0 00000000 		.word	prev_err
 1230 01b4 00000000 		.word	pid_integral
 1231 01b8 00000000 		.word	RxIsr
 1232 01bc 00000000 		.word	adc_update
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 29


 1233 01c0 00000000 		.word	.LC0
 1234 01c4 00000000 		.word	sendValue
 1235              		.cfi_endproc
 1236              	.LFE68:
 1237              		.size	main, .-main
 1238              		.text
 1239              	.Letext0:
 1240              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1241              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1242              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1243              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 1244              		.section	.debug_info,"",%progbits
 1245              	.Ldebug_info0:
 1246 0000 71050000 		.4byte	0x571
 1247 0004 0400     		.2byte	0x4
 1248 0006 00000000 		.4byte	.Ldebug_abbrev0
 1249 000a 04       		.byte	0x4
 1250 000b 01       		.uleb128 0x1
 1251 000c 51000000 		.4byte	.LASF49
 1252 0010 0C       		.byte	0xc
 1253 0011 3B020000 		.4byte	.LASF50
 1254 0015 DD010000 		.4byte	.LASF51
 1255 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1256 001d 00000000 		.4byte	0
 1257 0021 00000000 		.4byte	.Ldebug_line0
 1258 0025 02       		.uleb128 0x2
 1259 0026 01       		.byte	0x1
 1260 0027 06       		.byte	0x6
 1261 0028 29010000 		.4byte	.LASF0
 1262 002c 02       		.uleb128 0x2
 1263 002d 01       		.byte	0x1
 1264 002e 08       		.byte	0x8
 1265 002f 5C010000 		.4byte	.LASF1
 1266 0033 02       		.uleb128 0x2
 1267 0034 02       		.byte	0x2
 1268 0035 05       		.byte	0x5
 1269 0036 31000000 		.4byte	.LASF2
 1270 003a 02       		.uleb128 0x2
 1271 003b 02       		.byte	0x2
 1272 003c 07       		.byte	0x7
 1273 003d CA010000 		.4byte	.LASF3
 1274 0041 03       		.uleb128 0x3
 1275 0042 66020000 		.4byte	.LASF9
 1276 0046 02       		.byte	0x2
 1277 0047 3F       		.byte	0x3f
 1278 0048 4C000000 		.4byte	0x4c
 1279 004c 02       		.uleb128 0x2
 1280 004d 04       		.byte	0x4
 1281 004e 05       		.byte	0x5
 1282 004f 4C010000 		.4byte	.LASF4
 1283 0053 02       		.uleb128 0x2
 1284 0054 04       		.byte	0x4
 1285 0055 07       		.byte	0x7
 1286 0056 47020000 		.4byte	.LASF5
 1287 005a 02       		.uleb128 0x2
 1288 005b 08       		.byte	0x8
 1289 005c 05       		.byte	0x5
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 30


 1290 005d DF000000 		.4byte	.LASF6
 1291 0061 02       		.uleb128 0x2
 1292 0062 08       		.byte	0x8
 1293 0063 07       		.byte	0x7
 1294 0064 9B010000 		.4byte	.LASF7
 1295 0068 04       		.uleb128 0x4
 1296 0069 04       		.byte	0x4
 1297 006a 05       		.byte	0x5
 1298 006b 696E7400 		.ascii	"int\000"
 1299 006f 02       		.uleb128 0x2
 1300 0070 04       		.byte	0x4
 1301 0071 07       		.byte	0x7
 1302 0072 B2010000 		.4byte	.LASF8
 1303 0076 03       		.uleb128 0x3
 1304 0077 33020000 		.4byte	.LASF10
 1305 007b 03       		.byte	0x3
 1306 007c 2C       		.byte	0x2c
 1307 007d 41000000 		.4byte	0x41
 1308 0081 05       		.uleb128 0x5
 1309 0082 0E010000 		.4byte	.LASF11
 1310 0086 04       		.byte	0x4
 1311 0087 9201     		.2byte	0x192
 1312 0089 2C000000 		.4byte	0x2c
 1313 008d 05       		.uleb128 0x5
 1314 008e F2000000 		.4byte	.LASF12
 1315 0092 04       		.byte	0x4
 1316 0093 9301     		.2byte	0x193
 1317 0095 3A000000 		.4byte	0x3a
 1318 0099 02       		.uleb128 0x2
 1319 009a 04       		.byte	0x4
 1320 009b 04       		.byte	0x4
 1321 009c 35010000 		.4byte	.LASF13
 1322 00a0 02       		.uleb128 0x2
 1323 00a1 08       		.byte	0x8
 1324 00a2 04       		.byte	0x4
 1325 00a3 C8020000 		.4byte	.LASF14
 1326 00a7 02       		.uleb128 0x2
 1327 00a8 01       		.byte	0x1
 1328 00a9 08       		.byte	0x8
 1329 00aa 29020000 		.4byte	.LASF15
 1330 00ae 05       		.uleb128 0x5
 1331 00af 42020000 		.4byte	.LASF16
 1332 00b3 04       		.byte	0x4
 1333 00b4 3C02     		.2byte	0x23c
 1334 00b6 BA000000 		.4byte	0xba
 1335 00ba 06       		.uleb128 0x6
 1336 00bb 81000000 		.4byte	0x81
 1337 00bf 02       		.uleb128 0x2
 1338 00c0 08       		.byte	0x8
 1339 00c1 04       		.byte	0x4
 1340 00c2 75010000 		.4byte	.LASF17
 1341 00c6 02       		.uleb128 0x2
 1342 00c7 04       		.byte	0x4
 1343 00c8 07       		.byte	0x7
 1344 00c9 48000000 		.4byte	.LASF18
 1345 00cd 07       		.uleb128 0x7
 1346 00ce 3B010000 		.4byte	.LASF23
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 31


 1347 00d2 01       		.byte	0x1
 1348 00d3 15       		.byte	0x15
 1349 00d4 00000000 		.4byte	.LFB64
 1350 00d8 78000000 		.4byte	.LFE64-.LFB64
 1351 00dc 01       		.uleb128 0x1
 1352 00dd 9C       		.byte	0x9c
 1353 00de FF000000 		.4byte	0xff
 1354 00e2 08       		.uleb128 0x8
 1355 00e3 14010000 		.4byte	.LASF19
 1356 00e7 01       		.byte	0x1
 1357 00e8 15       		.byte	0x15
 1358 00e9 68000000 		.4byte	0x68
 1359 00ed 02       		.uleb128 0x2
 1360 00ee 91       		.byte	0x91
 1361 00ef 74       		.sleb128 -12
 1362 00f0 08       		.uleb128 0x8
 1363 00f1 08010000 		.4byte	.LASF20
 1364 00f5 01       		.byte	0x1
 1365 00f6 15       		.byte	0x15
 1366 00f7 68000000 		.4byte	0x68
 1367 00fb 02       		.uleb128 0x2
 1368 00fc 91       		.byte	0x91
 1369 00fd 70       		.sleb128 -16
 1370 00fe 00       		.byte	0
 1371 00ff 09       		.uleb128 0x9
 1372 0100 7D020000 		.4byte	.LASF52
 1373 0104 01       		.byte	0x1
 1374 0105 26       		.byte	0x26
 1375 0106 68000000 		.4byte	0x68
 1376 010a 00000000 		.4byte	.LFB65
 1377 010e 54000000 		.4byte	.LFE65-.LFB65
 1378 0112 01       		.uleb128 0x1
 1379 0113 9C       		.byte	0x9c
 1380 0114 43010000 		.4byte	0x143
 1381 0118 08       		.uleb128 0x8
 1382 0119 08010000 		.4byte	.LASF20
 1383 011d 01       		.byte	0x1
 1384 011e 26       		.byte	0x26
 1385 011f 68000000 		.4byte	0x68
 1386 0123 02       		.uleb128 0x2
 1387 0124 91       		.byte	0x91
 1388 0125 74       		.sleb128 -12
 1389 0126 08       		.uleb128 0x8
 1390 0127 70020000 		.4byte	.LASF21
 1391 012b 01       		.byte	0x1
 1392 012c 26       		.byte	0x26
 1393 012d 68000000 		.4byte	0x68
 1394 0131 02       		.uleb128 0x2
 1395 0132 91       		.byte	0x91
 1396 0133 70       		.sleb128 -16
 1397 0134 08       		.uleb128 0x8
 1398 0135 3B000000 		.4byte	.LASF22
 1399 0139 01       		.byte	0x1
 1400 013a 26       		.byte	0x26
 1401 013b 68000000 		.4byte	0x68
 1402 013f 02       		.uleb128 0x2
 1403 0140 91       		.byte	0x91
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 32


 1404 0141 6C       		.sleb128 -20
 1405 0142 00       		.byte	0
 1406 0143 07       		.uleb128 0x7
 1407 0144 94020000 		.4byte	.LASF24
 1408 0148 01       		.byte	0x1
 1409 0149 52       		.byte	0x52
 1410 014a 00000000 		.4byte	.LFB66
 1411 014e 6C010000 		.4byte	.LFE66-.LFB66
 1412 0152 01       		.uleb128 0x1
 1413 0153 9C       		.byte	0x9c
 1414 0154 CF010000 		.4byte	0x1cf
 1415 0158 0A       		.uleb128 0xa
 1416 0159 06000000 		.4byte	.LBB2
 1417 015d 4A010000 		.4byte	.LBE2-.LBB2
 1418 0161 0B       		.uleb128 0xb
 1419 0162 6300     		.ascii	"c\000"
 1420 0164 01       		.byte	0x1
 1421 0165 53       		.byte	0x53
 1422 0166 68000000 		.4byte	0x68
 1423 016a 02       		.uleb128 0x2
 1424 016b 91       		.byte	0x91
 1425 016c 74       		.sleb128 -12
 1426 016d 0C       		.uleb128 0xc
 1427 016e 16000000 		.4byte	.LBB3
 1428 0172 3A000000 		.4byte	.LBE3-.LBB3
 1429 0176 87010000 		.4byte	0x187
 1430 017a 0B       		.uleb128 0xb
 1431 017b 6A00     		.ascii	"j\000"
 1432 017d 01       		.byte	0x1
 1433 017e 56       		.byte	0x56
 1434 017f 68000000 		.4byte	0x68
 1435 0183 02       		.uleb128 0x2
 1436 0184 91       		.byte	0x91
 1437 0185 70       		.sleb128 -16
 1438 0186 00       		.byte	0
 1439 0187 0C       		.uleb128 0xc
 1440 0188 AA000000 		.4byte	.LBB4
 1441 018c 2C000000 		.4byte	.LBE4-.LBB4
 1442 0190 A1010000 		.4byte	0x1a1
 1443 0194 0B       		.uleb128 0xb
 1444 0195 6A00     		.ascii	"j\000"
 1445 0197 01       		.byte	0x1
 1446 0198 5F       		.byte	0x5f
 1447 0199 68000000 		.4byte	0x68
 1448 019d 02       		.uleb128 0x2
 1449 019e 91       		.byte	0x91
 1450 019f 6C       		.sleb128 -20
 1451 01a0 00       		.byte	0
 1452 01a1 0A       		.uleb128 0xa
 1453 01a2 D6000000 		.4byte	.LBB5
 1454 01a6 60000000 		.4byte	.LBE5-.LBB5
 1455 01aa 0B       		.uleb128 0xb
 1456 01ab 6900     		.ascii	"i\000"
 1457 01ad 01       		.byte	0x1
 1458 01ae 62       		.byte	0x62
 1459 01af 68000000 		.4byte	0x68
 1460 01b3 02       		.uleb128 0x2
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 33


 1461 01b4 91       		.byte	0x91
 1462 01b5 68       		.sleb128 -24
 1463 01b6 0A       		.uleb128 0xa
 1464 01b7 DC000000 		.4byte	.LBB6
 1465 01bb 4E000000 		.4byte	.LBE6-.LBB6
 1466 01bf 0B       		.uleb128 0xb
 1467 01c0 6A00     		.ascii	"j\000"
 1468 01c2 01       		.byte	0x1
 1469 01c3 63       		.byte	0x63
 1470 01c4 68000000 		.4byte	0x68
 1471 01c8 02       		.uleb128 0x2
 1472 01c9 91       		.byte	0x91
 1473 01ca 64       		.sleb128 -28
 1474 01cb 00       		.byte	0
 1475 01cc 00       		.byte	0
 1476 01cd 00       		.byte	0
 1477 01ce 00       		.byte	0
 1478 01cf 07       		.uleb128 0x7
 1479 01d0 C4010000 		.4byte	.LASF25
 1480 01d4 01       		.byte	0x1
 1481 01d5 74       		.byte	0x74
 1482 01d6 00000000 		.4byte	.LFB67
 1483 01da C4020000 		.4byte	.LFE67-.LFB67
 1484 01de 01       		.uleb128 0x1
 1485 01df 9C       		.byte	0x9c
 1486 01e0 18020000 		.4byte	0x218
 1487 01e4 0D       		.uleb128 0xd
 1488 01e5 81010000 		.4byte	.LASF26
 1489 01e9 01       		.byte	0x1
 1490 01ea 76       		.byte	0x76
 1491 01eb 81000000 		.4byte	0x81
 1492 01ef 02       		.uleb128 0x2
 1493 01f0 91       		.byte	0x91
 1494 01f1 6B       		.sleb128 -21
 1495 01f2 0D       		.uleb128 0xd
 1496 01f3 9F020000 		.4byte	.LASF27
 1497 01f7 01       		.byte	0x1
 1498 01f8 77       		.byte	0x77
 1499 01f9 81000000 		.4byte	0x81
 1500 01fd 02       		.uleb128 0x2
 1501 01fe 91       		.byte	0x91
 1502 01ff 6A       		.sleb128 -22
 1503 0200 0A       		.uleb128 0xa
 1504 0201 A4000000 		.4byte	.LBB7
 1505 0205 1C000000 		.4byte	.LBE7-.LBB7
 1506 0209 0B       		.uleb128 0xb
 1507 020a 707000   		.ascii	"pp\000"
 1508 020d 01       		.byte	0x1
 1509 020e 94       		.byte	0x94
 1510 020f 68000000 		.4byte	0x68
 1511 0213 02       		.uleb128 0x2
 1512 0214 91       		.byte	0x91
 1513 0215 6C       		.sleb128 -20
 1514 0216 00       		.byte	0
 1515 0217 00       		.byte	0
 1516 0218 0E       		.uleb128 0xe
 1517 0219 2E020000 		.4byte	.LASF28
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 34


 1518 021d 01       		.byte	0x1
 1519 021e F4       		.byte	0xf4
 1520 021f 68000000 		.4byte	0x68
 1521 0223 00000000 		.4byte	.LFB68
 1522 0227 C8010000 		.4byte	.LFE68-.LFB68
 1523 022b 01       		.uleb128 0x1
 1524 022c 9C       		.byte	0x9c
 1525 022d B3020000 		.4byte	0x2b3
 1526 0231 0F       		.uleb128 0xf
 1527 0232 647400   		.ascii	"dt\000"
 1528 0235 01       		.byte	0x1
 1529 0236 1501     		.2byte	0x115
 1530 0238 A0000000 		.4byte	0xa0
 1531 023c 02       		.uleb128 0x2
 1532 023d 91       		.byte	0x91
 1533 023e 58       		.sleb128 -40
 1534 023f 10       		.uleb128 0x10
 1535 0240 BF010000 		.4byte	.LASF53
 1536 0244 01       		.byte	0x1
 1537 0245 1601     		.2byte	0x116
 1538 0247 A0000000 		.4byte	0xa0
 1539 024b 0C       		.uleb128 0xc
 1540 024c 06000000 		.4byte	.LBB8
 1541 0250 A0000000 		.4byte	.LBE8-.LBB8
 1542 0254 65020000 		.4byte	0x265
 1543 0258 0B       		.uleb128 0xb
 1544 0259 6700     		.ascii	"g\000"
 1545 025b 01       		.byte	0x1
 1546 025c F7       		.byte	0xf7
 1547 025d 68000000 		.4byte	0x68
 1548 0261 02       		.uleb128 0x2
 1549 0262 91       		.byte	0x91
 1550 0263 6C       		.sleb128 -20
 1551 0264 00       		.byte	0
 1552 0265 0C       		.uleb128 0xc
 1553 0266 16010000 		.4byte	.LBB9
 1554 026a 1C000000 		.4byte	.LBE9-.LBB9
 1555 026e 80020000 		.4byte	0x280
 1556 0272 0F       		.uleb128 0xf
 1557 0273 6900     		.ascii	"i\000"
 1558 0275 01       		.byte	0x1
 1559 0276 2301     		.2byte	0x123
 1560 0278 68000000 		.4byte	0x68
 1561 027c 02       		.uleb128 0x2
 1562 027d 91       		.byte	0x91
 1563 027e 68       		.sleb128 -24
 1564 027f 00       		.byte	0
 1565 0280 0C       		.uleb128 0xc
 1566 0281 3A010000 		.4byte	.LBB10
 1567 0285 1C000000 		.4byte	.LBE10-.LBB10
 1568 0289 9B020000 		.4byte	0x29b
 1569 028d 0F       		.uleb128 0xf
 1570 028e 6900     		.ascii	"i\000"
 1571 0290 01       		.byte	0x1
 1572 0291 2701     		.2byte	0x127
 1573 0293 68000000 		.4byte	0x68
 1574 0297 02       		.uleb128 0x2
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 35


 1575 0298 91       		.byte	0x91
 1576 0299 64       		.sleb128 -28
 1577 029a 00       		.byte	0
 1578 029b 0A       		.uleb128 0xa
 1579 029c 5E010000 		.4byte	.LBB11
 1580 02a0 1A000000 		.4byte	.LBE11-.LBB11
 1581 02a4 0F       		.uleb128 0xf
 1582 02a5 6900     		.ascii	"i\000"
 1583 02a7 01       		.byte	0x1
 1584 02a8 2B01     		.2byte	0x12b
 1585 02aa 68000000 		.4byte	0x68
 1586 02ae 02       		.uleb128 0x2
 1587 02af 91       		.byte	0x91
 1588 02b0 60       		.sleb128 -32
 1589 02b1 00       		.byte	0
 1590 02b2 00       		.byte	0
 1591 02b3 11       		.uleb128 0x11
 1592 02b4 CF020000 		.4byte	.LASF29
 1593 02b8 05       		.byte	0x5
 1594 02b9 1207     		.2byte	0x712
 1595 02bb BF020000 		.4byte	0x2bf
 1596 02bf 06       		.uleb128 0x6
 1597 02c0 76000000 		.4byte	0x76
 1598 02c4 12       		.uleb128 0x12
 1599 02c5 1D010000 		.4byte	.LASF30
 1600 02c9 01       		.byte	0x1
 1601 02ca 13       		.byte	0x13
 1602 02cb 81000000 		.4byte	0x81
 1603 02cf 05       		.uleb128 0x5
 1604 02d0 03       		.byte	0x3
 1605 02d1 00000000 		.4byte	errorStatus
 1606 02d5 12       		.uleb128 0x12
 1607 02d6 F9000000 		.4byte	.LASF31
 1608 02da 01       		.byte	0x1
 1609 02db 2F       		.byte	0x2f
 1610 02dc 68000000 		.4byte	0x68
 1611 02e0 05       		.uleb128 0x5
 1612 02e1 03       		.byte	0x3
 1613 02e2 00000000 		.4byte	data_read_mode
 1614 02e6 13       		.uleb128 0x13
 1615 02e7 F6020000 		.4byte	0x2f6
 1616 02eb F6020000 		.4byte	0x2f6
 1617 02ef 14       		.uleb128 0x14
 1618 02f0 C6000000 		.4byte	0xc6
 1619 02f4 03       		.byte	0x3
 1620 02f5 00       		.byte	0
 1621 02f6 06       		.uleb128 0x6
 1622 02f7 68000000 		.4byte	0x68
 1623 02fb 12       		.uleb128 0x12
 1624 02fc 20000000 		.4byte	.LASF32
 1625 0300 01       		.byte	0x1
 1626 0301 31       		.byte	0x31
 1627 0302 0C030000 		.4byte	0x30c
 1628 0306 05       		.uleb128 0x5
 1629 0307 03       		.byte	0x3
 1630 0308 00000000 		.4byte	new_pos_set
 1631 030c 06       		.uleb128 0x6
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 36


 1632 030d E6020000 		.4byte	0x2e6
 1633 0311 13       		.uleb128 0x13
 1634 0312 68000000 		.4byte	0x68
 1635 0316 21030000 		.4byte	0x321
 1636 031a 14       		.uleb128 0x14
 1637 031b C6000000 		.4byte	0xc6
 1638 031f 03       		.byte	0x3
 1639 0320 00       		.byte	0
 1640 0321 12       		.uleb128 0x12
 1641 0322 8A010000 		.4byte	.LASF33
 1642 0326 01       		.byte	0x1
 1643 0327 32       		.byte	0x32
 1644 0328 11030000 		.4byte	0x311
 1645 032c 05       		.uleb128 0x5
 1646 032d 03       		.byte	0x3
 1647 032e 00000000 		.4byte	new_pos
 1648 0332 15       		.uleb128 0x15
 1649 0333 706F7300 		.ascii	"pos\000"
 1650 0337 01       		.byte	0x1
 1651 0338 33       		.byte	0x33
 1652 0339 11030000 		.4byte	0x311
 1653 033d 05       		.uleb128 0x5
 1654 033e 03       		.byte	0x3
 1655 033f 00000000 		.4byte	pos
 1656 0343 12       		.uleb128 0x12
 1657 0344 08010000 		.4byte	.LASF20
 1658 0348 01       		.byte	0x1
 1659 0349 34       		.byte	0x34
 1660 034a 11030000 		.4byte	0x311
 1661 034e 05       		.uleb128 0x5
 1662 034f 03       		.byte	0x3
 1663 0350 00000000 		.4byte	pulse
 1664 0354 12       		.uleb128 0x12
 1665 0355 6A010000 		.4byte	.LASF34
 1666 0359 01       		.byte	0x1
 1667 035a 35       		.byte	0x35
 1668 035b 11030000 		.4byte	0x311
 1669 035f 05       		.uleb128 0x5
 1670 0360 03       		.byte	0x3
 1671 0361 00000000 		.4byte	pulse_temp
 1672 0365 13       		.uleb128 0x13
 1673 0366 A0000000 		.4byte	0xa0
 1674 036a 75030000 		.4byte	0x375
 1675 036e 14       		.uleb128 0x14
 1676 036f C6000000 		.4byte	0xc6
 1677 0373 03       		.byte	0x3
 1678 0374 00       		.byte	0
 1679 0375 15       		.uleb128 0x15
 1680 0376 65727200 		.ascii	"err\000"
 1681 037a 01       		.byte	0x1
 1682 037b 36       		.byte	0x36
 1683 037c 65030000 		.4byte	0x365
 1684 0380 05       		.uleb128 0x5
 1685 0381 03       		.byte	0x3
 1686 0382 00000000 		.4byte	err
 1687 0386 13       		.uleb128 0x13
 1688 0387 8D000000 		.4byte	0x8d
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 37


 1689 038b 96030000 		.4byte	0x396
 1690 038f 14       		.uleb128 0x14
 1691 0390 C6000000 		.4byte	0xc6
 1692 0394 03       		.byte	0x3
 1693 0395 00       		.byte	0
 1694 0396 12       		.uleb128 0x12
 1695 0397 92010000 		.4byte	.LASF35
 1696 039b 01       		.byte	0x1
 1697 039c 37       		.byte	0x37
 1698 039d 86030000 		.4byte	0x386
 1699 03a1 05       		.uleb128 0x5
 1700 03a2 03       		.byte	0x3
 1701 03a3 00000000 		.4byte	adcValue
 1702 03a7 15       		.uleb128 0x15
 1703 03a8 64657200 		.ascii	"der\000"
 1704 03ac 01       		.byte	0x1
 1705 03ad 38       		.byte	0x38
 1706 03ae 65030000 		.4byte	0x365
 1707 03b2 05       		.uleb128 0x5
 1708 03b3 03       		.byte	0x3
 1709 03b4 00000000 		.4byte	der
 1710 03b8 12       		.uleb128 0x12
 1711 03b9 17000000 		.4byte	.LASF36
 1712 03bd 01       		.byte	0x1
 1713 03be 39       		.byte	0x39
 1714 03bf 65030000 		.4byte	0x365
 1715 03c3 05       		.uleb128 0x5
 1716 03c4 03       		.byte	0x3
 1717 03c5 00000000 		.4byte	prev_err
 1718 03c9 12       		.uleb128 0x12
 1719 03ca 59020000 		.4byte	.LASF37
 1720 03ce 01       		.byte	0x1
 1721 03cf 3A       		.byte	0x3a
 1722 03d0 65030000 		.4byte	0x365
 1723 03d4 05       		.uleb128 0x5
 1724 03d5 03       		.byte	0x3
 1725 03d6 00000000 		.4byte	pid_integral
 1726 03da 12       		.uleb128 0x12
 1727 03db 07000000 		.4byte	.LASF38
 1728 03df 01       		.byte	0x1
 1729 03e0 3C       		.byte	0x3c
 1730 03e1 68000000 		.4byte	0x68
 1731 03e5 05       		.uleb128 0x5
 1732 03e6 03       		.byte	0x3
 1733 03e7 00000000 		.4byte	cyl_set
 1734 03eb 13       		.uleb128 0x13
 1735 03ec A7000000 		.4byte	0xa7
 1736 03f0 FB030000 		.4byte	0x3fb
 1737 03f4 14       		.uleb128 0x14
 1738 03f5 C6000000 		.4byte	0xc6
 1739 03f9 00       		.byte	0
 1740 03fa 00       		.byte	0
 1741 03fb 12       		.uleb128 0x12
 1742 03fc 0F000000 		.4byte	.LASF39
 1743 0400 01       		.byte	0x1
 1744 0401 3D       		.byte	0x3d
 1745 0402 EB030000 		.4byte	0x3eb
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 38


 1746 0406 05       		.uleb128 0x5
 1747 0407 03       		.byte	0x3
 1748 0408 00000000 		.4byte	cyl_tmp
 1749 040c 13       		.uleb128 0x13
 1750 040d A0000000 		.4byte	0xa0
 1751 0411 1C040000 		.4byte	0x41c
 1752 0415 14       		.uleb128 0x14
 1753 0416 C6000000 		.4byte	0xc6
 1754 041a 1D       		.byte	0x1d
 1755 041b 00       		.byte	0
 1756 041c 15       		.uleb128 0x15
 1757 041d 64747300 		.ascii	"dts\000"
 1758 0421 01       		.byte	0x1
 1759 0422 3E       		.byte	0x3e
 1760 0423 0C040000 		.4byte	0x40c
 1761 0427 05       		.uleb128 0x5
 1762 0428 03       		.byte	0x3
 1763 0429 00000000 		.4byte	dts
 1764 042d 12       		.uleb128 0x12
 1765 042e 00000000 		.4byte	.LASF40
 1766 0432 01       		.byte	0x1
 1767 0433 3F       		.byte	0x3f
 1768 0434 68000000 		.4byte	0x68
 1769 0438 05       		.uleb128 0x5
 1770 0439 03       		.byte	0x3
 1771 043a 00000000 		.4byte	dts_ct
 1772 043e 13       		.uleb128 0x13
 1773 043f 68000000 		.4byte	0x68
 1774 0443 54040000 		.4byte	0x454
 1775 0447 14       		.uleb128 0x14
 1776 0448 C6000000 		.4byte	0xc6
 1777 044c 03       		.byte	0x3
 1778 044d 14       		.uleb128 0x14
 1779 044e C6000000 		.4byte	0xc6
 1780 0452 01       		.byte	0x1
 1781 0453 00       		.byte	0
 1782 0454 12       		.uleb128 0x12
 1783 0455 44010000 		.4byte	.LASF41
 1784 0459 01       		.byte	0x1
 1785 045a 41       		.byte	0x41
 1786 045b 3E040000 		.4byte	0x43e
 1787 045f 05       		.uleb128 0x5
 1788 0460 03       		.byte	0x3
 1789 0461 00000000 		.4byte	offsets
 1790 0465 13       		.uleb128 0x13
 1791 0466 A7000000 		.4byte	0xa7
 1792 046a 75040000 		.4byte	0x475
 1793 046e 14       		.uleb128 0x14
 1794 046f C6000000 		.4byte	0xc6
 1795 0473 63       		.byte	0x63
 1796 0474 00       		.byte	0
 1797 0475 12       		.uleb128 0x12
 1798 0476 BE020000 		.4byte	.LASF42
 1799 047a 01       		.byte	0x1
 1800 047b 43       		.byte	0x43
 1801 047c 65040000 		.4byte	0x465
 1802 0480 05       		.uleb128 0x5
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 39


 1803 0481 03       		.byte	0x3
 1804 0482 00000000 		.4byte	sendValue
 1805 0486 13       		.uleb128 0x13
 1806 0487 A7000000 		.4byte	0xa7
 1807 048b 96040000 		.4byte	0x496
 1808 048f 14       		.uleb128 0x14
 1809 0490 C6000000 		.4byte	0xc6
 1810 0494 13       		.byte	0x13
 1811 0495 00       		.byte	0
 1812 0496 12       		.uleb128 0x12
 1813 0497 2C000000 		.4byte	.LASF43
 1814 049b 01       		.byte	0x1
 1815 049c 44       		.byte	0x44
 1816 049d 86040000 		.4byte	0x486
 1817 04a1 05       		.uleb128 0x5
 1818 04a2 03       		.byte	0x3
 1819 04a3 00000000 		.4byte	temp
 1820 04a7 15       		.uleb128 0x15
 1821 04a8 6E6E00   		.ascii	"nn\000"
 1822 04ab 01       		.byte	0x1
 1823 04ac 45       		.byte	0x45
 1824 04ad 68000000 		.4byte	0x68
 1825 04b1 05       		.uleb128 0x5
 1826 04b2 03       		.byte	0x3
 1827 04b3 00000000 		.4byte	nn
 1828 04b7 13       		.uleb128 0x13
 1829 04b8 A0000000 		.4byte	0xa0
 1830 04bc C7040000 		.4byte	0x4c7
 1831 04c0 14       		.uleb128 0x14
 1832 04c1 C6000000 		.4byte	0xc6
 1833 04c5 02       		.byte	0x2
 1834 04c6 00       		.byte	0
 1835 04c7 15       		.uleb128 0x15
 1836 04c8 70696400 		.ascii	"pid\000"
 1837 04cc 01       		.byte	0x1
 1838 04cd 46       		.byte	0x46
 1839 04ce B7040000 		.4byte	0x4b7
 1840 04d2 05       		.uleb128 0x5
 1841 04d3 03       		.byte	0x3
 1842 04d4 00000000 		.4byte	pid
 1843 04d8 12       		.uleb128 0x12
 1844 04d9 ED000000 		.4byte	.LASF44
 1845 04dd 01       		.byte	0x1
 1846 04de 48       		.byte	0x48
 1847 04df 65040000 		.4byte	0x465
 1848 04e3 05       		.uleb128 0x5
 1849 04e4 03       		.byte	0x3
 1850 04e5 00000000 		.4byte	help
 1851 04e9 15       		.uleb128 0x15
 1852 04ea 747400   		.ascii	"tt\000"
 1853 04ed 01       		.byte	0x1
 1854 04ee 49       		.byte	0x49
 1855 04ef 68000000 		.4byte	0x68
 1856 04f3 05       		.uleb128 0x5
 1857 04f4 03       		.byte	0x3
 1858 04f5 00000000 		.4byte	tt
 1859 04f9 12       		.uleb128 0x12
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 40


 1860 04fa 88020000 		.4byte	.LASF45
 1861 04fe 01       		.byte	0x1
 1862 04ff 4B       		.byte	0x4b
 1863 0500 68000000 		.4byte	0x68
 1864 0504 05       		.uleb128 0x5
 1865 0505 03       		.byte	0x3
 1866 0506 00000000 		.4byte	start_calib
 1867 050a 12       		.uleb128 0x12
 1868 050b 55010000 		.4byte	.LASF46
 1869 050f 01       		.byte	0x1
 1870 0510 4C       		.byte	0x4c
 1871 0511 68000000 		.4byte	0x68
 1872 0515 05       		.uleb128 0x5
 1873 0516 03       		.byte	0x3
 1874 0517 00000000 		.4byte	cyl_no
 1875 051b 13       		.uleb128 0x13
 1876 051c 8D000000 		.4byte	0x8d
 1877 0520 31050000 		.4byte	0x531
 1878 0524 14       		.uleb128 0x14
 1879 0525 C6000000 		.4byte	0xc6
 1880 0529 03       		.byte	0x3
 1881 052a 14       		.uleb128 0x14
 1882 052b C6000000 		.4byte	0xc6
 1883 052f 06       		.byte	0x6
 1884 0530 00       		.byte	0
 1885 0531 12       		.uleb128 0x12
 1886 0532 A6020000 		.4byte	.LASF47
 1887 0536 01       		.byte	0x1
 1888 0537 4E       		.byte	0x4e
 1889 0538 1B050000 		.4byte	0x51b
 1890 053c 05       		.uleb128 0x5
 1891 053d 03       		.byte	0x3
 1892 053e 00000000 		.4byte	moving_median
 1893 0542 13       		.uleb128 0x13
 1894 0543 8D000000 		.4byte	0x8d
 1895 0547 52050000 		.4byte	0x552
 1896 054b 14       		.uleb128 0x14
 1897 054c C6000000 		.4byte	0xc6
 1898 0550 06       		.byte	0x6
 1899 0551 00       		.byte	0
 1900 0552 12       		.uleb128 0x12
 1901 0553 B4020000 		.4byte	.LASF48
 1902 0557 01       		.byte	0x1
 1903 0558 4F       		.byte	0x4f
 1904 0559 42050000 		.4byte	0x542
 1905 055d 05       		.uleb128 0x5
 1906 055e 03       		.byte	0x3
 1907 055f 00000000 		.4byte	tempArray
 1908 0563 15       		.uleb128 0x15
 1909 0564 746D7000 		.ascii	"tmp\000"
 1910 0568 01       		.byte	0x1
 1911 0569 50       		.byte	0x50
 1912 056a 8D000000 		.4byte	0x8d
 1913 056e 05       		.uleb128 0x5
 1914 056f 03       		.byte	0x3
 1915 0570 00000000 		.4byte	tmp
 1916 0574 00       		.byte	0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 41


 1917              		.section	.debug_abbrev,"",%progbits
 1918              	.Ldebug_abbrev0:
 1919 0000 01       		.uleb128 0x1
 1920 0001 11       		.uleb128 0x11
 1921 0002 01       		.byte	0x1
 1922 0003 25       		.uleb128 0x25
 1923 0004 0E       		.uleb128 0xe
 1924 0005 13       		.uleb128 0x13
 1925 0006 0B       		.uleb128 0xb
 1926 0007 03       		.uleb128 0x3
 1927 0008 0E       		.uleb128 0xe
 1928 0009 1B       		.uleb128 0x1b
 1929 000a 0E       		.uleb128 0xe
 1930 000b 55       		.uleb128 0x55
 1931 000c 17       		.uleb128 0x17
 1932 000d 11       		.uleb128 0x11
 1933 000e 01       		.uleb128 0x1
 1934 000f 10       		.uleb128 0x10
 1935 0010 17       		.uleb128 0x17
 1936 0011 00       		.byte	0
 1937 0012 00       		.byte	0
 1938 0013 02       		.uleb128 0x2
 1939 0014 24       		.uleb128 0x24
 1940 0015 00       		.byte	0
 1941 0016 0B       		.uleb128 0xb
 1942 0017 0B       		.uleb128 0xb
 1943 0018 3E       		.uleb128 0x3e
 1944 0019 0B       		.uleb128 0xb
 1945 001a 03       		.uleb128 0x3
 1946 001b 0E       		.uleb128 0xe
 1947 001c 00       		.byte	0
 1948 001d 00       		.byte	0
 1949 001e 03       		.uleb128 0x3
 1950 001f 16       		.uleb128 0x16
 1951 0020 00       		.byte	0
 1952 0021 03       		.uleb128 0x3
 1953 0022 0E       		.uleb128 0xe
 1954 0023 3A       		.uleb128 0x3a
 1955 0024 0B       		.uleb128 0xb
 1956 0025 3B       		.uleb128 0x3b
 1957 0026 0B       		.uleb128 0xb
 1958 0027 49       		.uleb128 0x49
 1959 0028 13       		.uleb128 0x13
 1960 0029 00       		.byte	0
 1961 002a 00       		.byte	0
 1962 002b 04       		.uleb128 0x4
 1963 002c 24       		.uleb128 0x24
 1964 002d 00       		.byte	0
 1965 002e 0B       		.uleb128 0xb
 1966 002f 0B       		.uleb128 0xb
 1967 0030 3E       		.uleb128 0x3e
 1968 0031 0B       		.uleb128 0xb
 1969 0032 03       		.uleb128 0x3
 1970 0033 08       		.uleb128 0x8
 1971 0034 00       		.byte	0
 1972 0035 00       		.byte	0
 1973 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 42


 1974 0037 16       		.uleb128 0x16
 1975 0038 00       		.byte	0
 1976 0039 03       		.uleb128 0x3
 1977 003a 0E       		.uleb128 0xe
 1978 003b 3A       		.uleb128 0x3a
 1979 003c 0B       		.uleb128 0xb
 1980 003d 3B       		.uleb128 0x3b
 1981 003e 05       		.uleb128 0x5
 1982 003f 49       		.uleb128 0x49
 1983 0040 13       		.uleb128 0x13
 1984 0041 00       		.byte	0
 1985 0042 00       		.byte	0
 1986 0043 06       		.uleb128 0x6
 1987 0044 35       		.uleb128 0x35
 1988 0045 00       		.byte	0
 1989 0046 49       		.uleb128 0x49
 1990 0047 13       		.uleb128 0x13
 1991 0048 00       		.byte	0
 1992 0049 00       		.byte	0
 1993 004a 07       		.uleb128 0x7
 1994 004b 2E       		.uleb128 0x2e
 1995 004c 01       		.byte	0x1
 1996 004d 3F       		.uleb128 0x3f
 1997 004e 19       		.uleb128 0x19
 1998 004f 03       		.uleb128 0x3
 1999 0050 0E       		.uleb128 0xe
 2000 0051 3A       		.uleb128 0x3a
 2001 0052 0B       		.uleb128 0xb
 2002 0053 3B       		.uleb128 0x3b
 2003 0054 0B       		.uleb128 0xb
 2004 0055 27       		.uleb128 0x27
 2005 0056 19       		.uleb128 0x19
 2006 0057 11       		.uleb128 0x11
 2007 0058 01       		.uleb128 0x1
 2008 0059 12       		.uleb128 0x12
 2009 005a 06       		.uleb128 0x6
 2010 005b 40       		.uleb128 0x40
 2011 005c 18       		.uleb128 0x18
 2012 005d 9642     		.uleb128 0x2116
 2013 005f 19       		.uleb128 0x19
 2014 0060 01       		.uleb128 0x1
 2015 0061 13       		.uleb128 0x13
 2016 0062 00       		.byte	0
 2017 0063 00       		.byte	0
 2018 0064 08       		.uleb128 0x8
 2019 0065 05       		.uleb128 0x5
 2020 0066 00       		.byte	0
 2021 0067 03       		.uleb128 0x3
 2022 0068 0E       		.uleb128 0xe
 2023 0069 3A       		.uleb128 0x3a
 2024 006a 0B       		.uleb128 0xb
 2025 006b 3B       		.uleb128 0x3b
 2026 006c 0B       		.uleb128 0xb
 2027 006d 49       		.uleb128 0x49
 2028 006e 13       		.uleb128 0x13
 2029 006f 02       		.uleb128 0x2
 2030 0070 18       		.uleb128 0x18
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 43


 2031 0071 00       		.byte	0
 2032 0072 00       		.byte	0
 2033 0073 09       		.uleb128 0x9
 2034 0074 2E       		.uleb128 0x2e
 2035 0075 01       		.byte	0x1
 2036 0076 3F       		.uleb128 0x3f
 2037 0077 19       		.uleb128 0x19
 2038 0078 03       		.uleb128 0x3
 2039 0079 0E       		.uleb128 0xe
 2040 007a 3A       		.uleb128 0x3a
 2041 007b 0B       		.uleb128 0xb
 2042 007c 3B       		.uleb128 0x3b
 2043 007d 0B       		.uleb128 0xb
 2044 007e 27       		.uleb128 0x27
 2045 007f 19       		.uleb128 0x19
 2046 0080 49       		.uleb128 0x49
 2047 0081 13       		.uleb128 0x13
 2048 0082 11       		.uleb128 0x11
 2049 0083 01       		.uleb128 0x1
 2050 0084 12       		.uleb128 0x12
 2051 0085 06       		.uleb128 0x6
 2052 0086 40       		.uleb128 0x40
 2053 0087 18       		.uleb128 0x18
 2054 0088 9742     		.uleb128 0x2117
 2055 008a 19       		.uleb128 0x19
 2056 008b 01       		.uleb128 0x1
 2057 008c 13       		.uleb128 0x13
 2058 008d 00       		.byte	0
 2059 008e 00       		.byte	0
 2060 008f 0A       		.uleb128 0xa
 2061 0090 0B       		.uleb128 0xb
 2062 0091 01       		.byte	0x1
 2063 0092 11       		.uleb128 0x11
 2064 0093 01       		.uleb128 0x1
 2065 0094 12       		.uleb128 0x12
 2066 0095 06       		.uleb128 0x6
 2067 0096 00       		.byte	0
 2068 0097 00       		.byte	0
 2069 0098 0B       		.uleb128 0xb
 2070 0099 34       		.uleb128 0x34
 2071 009a 00       		.byte	0
 2072 009b 03       		.uleb128 0x3
 2073 009c 08       		.uleb128 0x8
 2074 009d 3A       		.uleb128 0x3a
 2075 009e 0B       		.uleb128 0xb
 2076 009f 3B       		.uleb128 0x3b
 2077 00a0 0B       		.uleb128 0xb
 2078 00a1 49       		.uleb128 0x49
 2079 00a2 13       		.uleb128 0x13
 2080 00a3 02       		.uleb128 0x2
 2081 00a4 18       		.uleb128 0x18
 2082 00a5 00       		.byte	0
 2083 00a6 00       		.byte	0
 2084 00a7 0C       		.uleb128 0xc
 2085 00a8 0B       		.uleb128 0xb
 2086 00a9 01       		.byte	0x1
 2087 00aa 11       		.uleb128 0x11
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 44


 2088 00ab 01       		.uleb128 0x1
 2089 00ac 12       		.uleb128 0x12
 2090 00ad 06       		.uleb128 0x6
 2091 00ae 01       		.uleb128 0x1
 2092 00af 13       		.uleb128 0x13
 2093 00b0 00       		.byte	0
 2094 00b1 00       		.byte	0
 2095 00b2 0D       		.uleb128 0xd
 2096 00b3 34       		.uleb128 0x34
 2097 00b4 00       		.byte	0
 2098 00b5 03       		.uleb128 0x3
 2099 00b6 0E       		.uleb128 0xe
 2100 00b7 3A       		.uleb128 0x3a
 2101 00b8 0B       		.uleb128 0xb
 2102 00b9 3B       		.uleb128 0x3b
 2103 00ba 0B       		.uleb128 0xb
 2104 00bb 49       		.uleb128 0x49
 2105 00bc 13       		.uleb128 0x13
 2106 00bd 02       		.uleb128 0x2
 2107 00be 18       		.uleb128 0x18
 2108 00bf 00       		.byte	0
 2109 00c0 00       		.byte	0
 2110 00c1 0E       		.uleb128 0xe
 2111 00c2 2E       		.uleb128 0x2e
 2112 00c3 01       		.byte	0x1
 2113 00c4 3F       		.uleb128 0x3f
 2114 00c5 19       		.uleb128 0x19
 2115 00c6 03       		.uleb128 0x3
 2116 00c7 0E       		.uleb128 0xe
 2117 00c8 3A       		.uleb128 0x3a
 2118 00c9 0B       		.uleb128 0xb
 2119 00ca 3B       		.uleb128 0x3b
 2120 00cb 0B       		.uleb128 0xb
 2121 00cc 49       		.uleb128 0x49
 2122 00cd 13       		.uleb128 0x13
 2123 00ce 11       		.uleb128 0x11
 2124 00cf 01       		.uleb128 0x1
 2125 00d0 12       		.uleb128 0x12
 2126 00d1 06       		.uleb128 0x6
 2127 00d2 40       		.uleb128 0x40
 2128 00d3 18       		.uleb128 0x18
 2129 00d4 9642     		.uleb128 0x2116
 2130 00d6 19       		.uleb128 0x19
 2131 00d7 01       		.uleb128 0x1
 2132 00d8 13       		.uleb128 0x13
 2133 00d9 00       		.byte	0
 2134 00da 00       		.byte	0
 2135 00db 0F       		.uleb128 0xf
 2136 00dc 34       		.uleb128 0x34
 2137 00dd 00       		.byte	0
 2138 00de 03       		.uleb128 0x3
 2139 00df 08       		.uleb128 0x8
 2140 00e0 3A       		.uleb128 0x3a
 2141 00e1 0B       		.uleb128 0xb
 2142 00e2 3B       		.uleb128 0x3b
 2143 00e3 05       		.uleb128 0x5
 2144 00e4 49       		.uleb128 0x49
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 45


 2145 00e5 13       		.uleb128 0x13
 2146 00e6 02       		.uleb128 0x2
 2147 00e7 18       		.uleb128 0x18
 2148 00e8 00       		.byte	0
 2149 00e9 00       		.byte	0
 2150 00ea 10       		.uleb128 0x10
 2151 00eb 34       		.uleb128 0x34
 2152 00ec 00       		.byte	0
 2153 00ed 03       		.uleb128 0x3
 2154 00ee 0E       		.uleb128 0xe
 2155 00ef 3A       		.uleb128 0x3a
 2156 00f0 0B       		.uleb128 0xb
 2157 00f1 3B       		.uleb128 0x3b
 2158 00f2 05       		.uleb128 0x5
 2159 00f3 49       		.uleb128 0x49
 2160 00f4 13       		.uleb128 0x13
 2161 00f5 00       		.byte	0
 2162 00f6 00       		.byte	0
 2163 00f7 11       		.uleb128 0x11
 2164 00f8 34       		.uleb128 0x34
 2165 00f9 00       		.byte	0
 2166 00fa 03       		.uleb128 0x3
 2167 00fb 0E       		.uleb128 0xe
 2168 00fc 3A       		.uleb128 0x3a
 2169 00fd 0B       		.uleb128 0xb
 2170 00fe 3B       		.uleb128 0x3b
 2171 00ff 05       		.uleb128 0x5
 2172 0100 49       		.uleb128 0x49
 2173 0101 13       		.uleb128 0x13
 2174 0102 3F       		.uleb128 0x3f
 2175 0103 19       		.uleb128 0x19
 2176 0104 3C       		.uleb128 0x3c
 2177 0105 19       		.uleb128 0x19
 2178 0106 00       		.byte	0
 2179 0107 00       		.byte	0
 2180 0108 12       		.uleb128 0x12
 2181 0109 34       		.uleb128 0x34
 2182 010a 00       		.byte	0
 2183 010b 03       		.uleb128 0x3
 2184 010c 0E       		.uleb128 0xe
 2185 010d 3A       		.uleb128 0x3a
 2186 010e 0B       		.uleb128 0xb
 2187 010f 3B       		.uleb128 0x3b
 2188 0110 0B       		.uleb128 0xb
 2189 0111 49       		.uleb128 0x49
 2190 0112 13       		.uleb128 0x13
 2191 0113 3F       		.uleb128 0x3f
 2192 0114 19       		.uleb128 0x19
 2193 0115 02       		.uleb128 0x2
 2194 0116 18       		.uleb128 0x18
 2195 0117 00       		.byte	0
 2196 0118 00       		.byte	0
 2197 0119 13       		.uleb128 0x13
 2198 011a 01       		.uleb128 0x1
 2199 011b 01       		.byte	0x1
 2200 011c 49       		.uleb128 0x49
 2201 011d 13       		.uleb128 0x13
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 46


 2202 011e 01       		.uleb128 0x1
 2203 011f 13       		.uleb128 0x13
 2204 0120 00       		.byte	0
 2205 0121 00       		.byte	0
 2206 0122 14       		.uleb128 0x14
 2207 0123 21       		.uleb128 0x21
 2208 0124 00       		.byte	0
 2209 0125 49       		.uleb128 0x49
 2210 0126 13       		.uleb128 0x13
 2211 0127 2F       		.uleb128 0x2f
 2212 0128 0B       		.uleb128 0xb
 2213 0129 00       		.byte	0
 2214 012a 00       		.byte	0
 2215 012b 15       		.uleb128 0x15
 2216 012c 34       		.uleb128 0x34
 2217 012d 00       		.byte	0
 2218 012e 03       		.uleb128 0x3
 2219 012f 08       		.uleb128 0x8
 2220 0130 3A       		.uleb128 0x3a
 2221 0131 0B       		.uleb128 0xb
 2222 0132 3B       		.uleb128 0x3b
 2223 0133 0B       		.uleb128 0xb
 2224 0134 49       		.uleb128 0x49
 2225 0135 13       		.uleb128 0x13
 2226 0136 3F       		.uleb128 0x3f
 2227 0137 19       		.uleb128 0x19
 2228 0138 02       		.uleb128 0x2
 2229 0139 18       		.uleb128 0x18
 2230 013a 00       		.byte	0
 2231 013b 00       		.byte	0
 2232 013c 00       		.byte	0
 2233              		.section	.debug_aranges,"",%progbits
 2234 0000 3C000000 		.4byte	0x3c
 2235 0004 0200     		.2byte	0x2
 2236 0006 00000000 		.4byte	.Ldebug_info0
 2237 000a 04       		.byte	0x4
 2238 000b 00       		.byte	0
 2239 000c 0000     		.2byte	0
 2240 000e 0000     		.2byte	0
 2241 0010 00000000 		.4byte	.LFB64
 2242 0014 78000000 		.4byte	.LFE64-.LFB64
 2243 0018 00000000 		.4byte	.LFB65
 2244 001c 54000000 		.4byte	.LFE65-.LFB65
 2245 0020 00000000 		.4byte	.LFB66
 2246 0024 6C010000 		.4byte	.LFE66-.LFB66
 2247 0028 00000000 		.4byte	.LFB67
 2248 002c C4020000 		.4byte	.LFE67-.LFB67
 2249 0030 00000000 		.4byte	.LFB68
 2250 0034 C8010000 		.4byte	.LFE68-.LFB68
 2251 0038 00000000 		.4byte	0
 2252 003c 00000000 		.4byte	0
 2253              		.section	.debug_ranges,"",%progbits
 2254              	.Ldebug_ranges0:
 2255 0000 00000000 		.4byte	.LFB64
 2256 0004 78000000 		.4byte	.LFE64
 2257 0008 00000000 		.4byte	.LFB65
 2258 000c 54000000 		.4byte	.LFE65
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 47


 2259 0010 00000000 		.4byte	.LFB66
 2260 0014 6C010000 		.4byte	.LFE66
 2261 0018 00000000 		.4byte	.LFB67
 2262 001c C4020000 		.4byte	.LFE67
 2263 0020 00000000 		.4byte	.LFB68
 2264 0024 C8010000 		.4byte	.LFE68
 2265 0028 00000000 		.4byte	0
 2266 002c 00000000 		.4byte	0
 2267              		.section	.debug_line,"",%progbits
 2268              	.Ldebug_line0:
 2269 0000 49030000 		.section	.debug_str,"MS",%progbits,1
 2269      02004C01 
 2269      00000201 
 2269      FB0E0D00 
 2269      01010101 
 2270              	.LASF40:
 2271 0000 6474735F 		.ascii	"dts_ct\000"
 2271      637400
 2272              	.LASF38:
 2273 0007 63796C5F 		.ascii	"cyl_set\000"
 2273      73657400 
 2274              	.LASF39:
 2275 000f 63796C5F 		.ascii	"cyl_tmp\000"
 2275      746D7000 
 2276              	.LASF36:
 2277 0017 70726576 		.ascii	"prev_err\000"
 2277      5F657272 
 2277      00
 2278              	.LASF32:
 2279 0020 6E65775F 		.ascii	"new_pos_set\000"
 2279      706F735F 
 2279      73657400 
 2280              	.LASF43:
 2281 002c 74656D70 		.ascii	"temp\000"
 2281      00
 2282              	.LASF2:
 2283 0031 73686F72 		.ascii	"short int\000"
 2283      7420696E 
 2283      7400
 2284              	.LASF22:
 2285 003b 6F666673 		.ascii	"offset_lower\000"
 2285      65745F6C 
 2285      6F776572 
 2285      00
 2286              	.LASF18:
 2287 0048 73697A65 		.ascii	"sizetype\000"
 2287      74797065 
 2287      00
 2288              	.LASF49:
 2289 0051 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2289      43313120 
 2289      352E342E 
 2289      31203230 
 2289      31363036 
 2290 0084 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2290      20726576 
 2290      6973696F 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 48


 2290      6E203233 
 2290      37373135 
 2291 00b7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2291      66756E63 
 2291      74696F6E 
 2291      2D736563 
 2291      74696F6E 
 2292              	.LASF6:
 2293 00df 6C6F6E67 		.ascii	"long long int\000"
 2293      206C6F6E 
 2293      6720696E 
 2293      7400
 2294              	.LASF44:
 2295 00ed 68656C70 		.ascii	"help\000"
 2295      00
 2296              	.LASF12:
 2297 00f2 75696E74 		.ascii	"uint16\000"
 2297      313600
 2298              	.LASF31:
 2299 00f9 64617461 		.ascii	"data_read_mode\000"
 2299      5F726561 
 2299      645F6D6F 
 2299      646500
 2300              	.LASF20:
 2301 0108 70756C73 		.ascii	"pulse\000"
 2301      6500
 2302              	.LASF11:
 2303 010e 75696E74 		.ascii	"uint8\000"
 2303      3800
 2304              	.LASF19:
 2305 0114 63796C69 		.ascii	"cylinder\000"
 2305      6E646572 
 2305      00
 2306              	.LASF30:
 2307 011d 6572726F 		.ascii	"errorStatus\000"
 2307      72537461 
 2307      74757300 
 2308              	.LASF0:
 2309 0129 7369676E 		.ascii	"signed char\000"
 2309      65642063 
 2309      68617200 
 2310              	.LASF13:
 2311 0135 666C6F61 		.ascii	"float\000"
 2311      7400
 2312              	.LASF23:
 2313 013b 77726974 		.ascii	"writePWM\000"
 2313      6550574D 
 2313      00
 2314              	.LASF41:
 2315 0144 6F666673 		.ascii	"offsets\000"
 2315      65747300 
 2316              	.LASF4:
 2317 014c 6C6F6E67 		.ascii	"long int\000"
 2317      20696E74 
 2317      00
 2318              	.LASF46:
 2319 0155 63796C5F 		.ascii	"cyl_no\000"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 49


 2319      6E6F00
 2320              	.LASF1:
 2321 015c 756E7369 		.ascii	"unsigned char\000"
 2321      676E6564 
 2321      20636861 
 2321      7200
 2322              	.LASF34:
 2323 016a 70756C73 		.ascii	"pulse_temp\000"
 2323      655F7465 
 2323      6D7000
 2324              	.LASF17:
 2325 0175 6C6F6E67 		.ascii	"long double\000"
 2325      20646F75 
 2325      626C6500 
 2326              	.LASF26:
 2327 0181 72785374 		.ascii	"rxStatus\000"
 2327      61747573 
 2327      00
 2328              	.LASF33:
 2329 018a 6E65775F 		.ascii	"new_pos\000"
 2329      706F7300 
 2330              	.LASF35:
 2331 0192 61646356 		.ascii	"adcValue\000"
 2331      616C7565 
 2331      00
 2332              	.LASF7:
 2333 019b 6C6F6E67 		.ascii	"long long unsigned int\000"
 2333      206C6F6E 
 2333      6720756E 
 2333      7369676E 
 2333      65642069 
 2334              	.LASF8:
 2335 01b2 756E7369 		.ascii	"unsigned int\000"
 2335      676E6564 
 2335      20696E74 
 2335      00
 2336              	.LASF53:
 2337 01bf 74696D65 		.ascii	"time\000"
 2337      00
 2338              	.LASF25:
 2339 01c4 52784973 		.ascii	"RxIsr\000"
 2339      7200
 2340              	.LASF3:
 2341 01ca 73686F72 		.ascii	"short unsigned int\000"
 2341      7420756E 
 2341      7369676E 
 2341      65642069 
 2341      6E7400
 2342              	.LASF51:
 2343 01dd 433A5C55 		.ascii	"C:\\Users\\Andrew\\Documents\\GitHub\\Hydraulic-Mim"
 2343      73657273 
 2343      5C416E64 
 2343      7265775C 
 2343      446F6375 
 2344 020b 69632D41 		.ascii	"ic-Arm\\PSOC_arm_project.cydsn\000"
 2344      726D5C50 
 2344      534F435F 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 50


 2344      61726D5F 
 2344      70726F6A 
 2345              	.LASF15:
 2346 0229 63686172 		.ascii	"char\000"
 2346      00
 2347              	.LASF28:
 2348 022e 6D61696E 		.ascii	"main\000"
 2348      00
 2349              	.LASF10:
 2350 0233 696E7433 		.ascii	"int32_t\000"
 2350      325F7400 
 2351              	.LASF50:
 2352 023b 6D61696E 		.ascii	"main.c\000"
 2352      2E6300
 2353              	.LASF16:
 2354 0242 72656738 		.ascii	"reg8\000"
 2354      00
 2355              	.LASF5:
 2356 0247 6C6F6E67 		.ascii	"long unsigned int\000"
 2356      20756E73 
 2356      69676E65 
 2356      6420696E 
 2356      7400
 2357              	.LASF37:
 2358 0259 7069645F 		.ascii	"pid_integral\000"
 2358      696E7465 
 2358      6772616C 
 2358      00
 2359              	.LASF9:
 2360 0266 5F5F696E 		.ascii	"__int32_t\000"
 2360      7433325F 
 2360      7400
 2361              	.LASF21:
 2362 0270 6F666673 		.ascii	"offset_upper\000"
 2362      65745F75 
 2362      70706572 
 2362      00
 2363              	.LASF52:
 2364 027d 70756C73 		.ascii	"pulseCheck\000"
 2364      65436865 
 2364      636B00
 2365              	.LASF45:
 2366 0288 73746172 		.ascii	"start_calib\000"
 2366      745F6361 
 2366      6C696200 
 2367              	.LASF24:
 2368 0294 6164635F 		.ascii	"adc_update\000"
 2368      75706461 
 2368      746500
 2369              	.LASF27:
 2370 029f 72784461 		.ascii	"rxData\000"
 2370      746100
 2371              	.LASF47:
 2372 02a6 6D6F7669 		.ascii	"moving_median\000"
 2372      6E675F6D 
 2372      65646961 
 2372      6E00
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc0XbFQg.s 			page 51


 2373              	.LASF48:
 2374 02b4 74656D70 		.ascii	"tempArray\000"
 2374      41727261 
 2374      7900
 2375              	.LASF42:
 2376 02be 73656E64 		.ascii	"sendValue\000"
 2376      56616C75 
 2376      6500
 2377              	.LASF14:
 2378 02c8 646F7562 		.ascii	"double\000"
 2378      6C6500
 2379              	.LASF29:
 2380 02cf 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2380      52784275 
 2380      66666572 
 2380      00
 2381              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
