ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.syntax unified
  20              		.global _printf_float
  21              		.thumb
  22              		.syntax unified
  23              		.global	errorStatus
  24              		.bss
  25              		.type	errorStatus, %object
  26              		.size	errorStatus, 1
  27              	errorStatus:
  28 0000 00       		.space	1
  29              		.section	.text.writePWM,"ax",%progbits
  30              		.align	2
  31              		.global	writePWM
  32              		.thumb
  33              		.thumb_func
  34              		.type	writePWM, %function
  35              	writePWM:
  36              	.LFB64:
  37              		.file 1 "main.c"
   1:main.c        **** 
   2:main.c        **** #include <project.h>
   3:main.c        **** #include <stdio.h>
   4:main.c        **** #include "common.h"
   5:main.c        **** #include <math.h>
   6:main.c        **** #include <stdlib.h>     /* strtod */
   7:main.c        **** 
   8:main.c        **** #define	Frequency 1000000.0			// Frequency of PWMClock
   9:main.c        **** #define	One_ms (Frequency/1000.0)	// 1 ms constant
  10:main.c        **** #define filter_size 7
  11:main.c        **** #define CYL_NO 2                    // Number of connected cylinders
  12:main.c        **** 
  13:main.c        **** /* Add an explicit reference to the floating point printf library to allow
  14:main.c        **** the usage of floating point conversion specifier */
  15:main.c        **** #if defined (__GNUC__)
  16:main.c        ****     asm (".global _printf_float");
  17:main.c        **** #endif
  18:main.c        **** 
  19:main.c        **** uint8 errorStatus = 0u;
  20:main.c        **** 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 2


  21:main.c        **** void writePWM(int cylinder, int pulse){
  38              		.loc 1 21 0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 8
  41              		@ frame_needed = 1, uses_anonymous_args = 0
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 82B0     		sub	sp, sp, #8
  47              		.cfi_def_cfa_offset 16
  48 0004 00AF     		add	r7, sp, #0
  49              		.cfi_def_cfa_register 7
  50 0006 7860     		str	r0, [r7, #4]
  51 0008 3960     		str	r1, [r7]
  22:main.c        ****     switch(cylinder){
  52              		.loc 1 22 0
  53 000a 7B68     		ldr	r3, [r7, #4]
  54 000c 032B     		cmp	r3, #3
  55 000e 2FD8     		bhi	.L8
  56 0010 01A2     		adr	r2, .L4
  57 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  58 0016 00BF     		.p2align 2
  59              	.L4:
  60 0018 29000000 		.word	.L3+1
  61 001c 3B000000 		.word	.L5+1
  62 0020 4D000000 		.word	.L6+1
  63 0024 5F000000 		.word	.L7+1
  64              		.p2align 1
  65              	.L3:
  23:main.c        ****                 case 0:
  24:main.c        ****                     PWM_0_WriteCompare(pulse + 1500);
  66              		.loc 1 24 0
  67 0028 3B68     		ldr	r3, [r7]
  68 002a 9BB2     		uxth	r3, r3
  69 002c 03F2DC53 		addw	r3, r3, #1500
  70 0030 9BB2     		uxth	r3, r3
  71 0032 1846     		mov	r0, r3
  72 0034 FFF7FEFF 		bl	PWM_0_WriteCompare
  25:main.c        ****                     break;
  73              		.loc 1 25 0
  74 0038 1AE0     		b	.L2
  75              	.L5:
  26:main.c        ****                 case 1:
  27:main.c        ****                     PWM_1_WriteCompare(pulse + 1500);
  76              		.loc 1 27 0
  77 003a 3B68     		ldr	r3, [r7]
  78 003c 9BB2     		uxth	r3, r3
  79 003e 03F2DC53 		addw	r3, r3, #1500
  80 0042 9BB2     		uxth	r3, r3
  81 0044 1846     		mov	r0, r3
  82 0046 FFF7FEFF 		bl	PWM_1_WriteCompare
  28:main.c        ****                     break;
  83              		.loc 1 28 0
  84 004a 11E0     		b	.L2
  85              	.L6:
  29:main.c        ****                 case 2:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 3


  30:main.c        ****                     PWM_2_WriteCompare(pulse + 1500);
  86              		.loc 1 30 0
  87 004c 3B68     		ldr	r3, [r7]
  88 004e 9BB2     		uxth	r3, r3
  89 0050 03F2DC53 		addw	r3, r3, #1500
  90 0054 9BB2     		uxth	r3, r3
  91 0056 1846     		mov	r0, r3
  92 0058 FFF7FEFF 		bl	PWM_2_WriteCompare
  31:main.c        ****                     break;
  93              		.loc 1 31 0
  94 005c 08E0     		b	.L2
  95              	.L7:
  32:main.c        ****                 case 3:
  33:main.c        ****                     PWM_3_WriteCompare(pulse + 1500);
  96              		.loc 1 33 0
  97 005e 3B68     		ldr	r3, [r7]
  98 0060 9BB2     		uxth	r3, r3
  99 0062 03F2DC53 		addw	r3, r3, #1500
 100 0066 9BB2     		uxth	r3, r3
 101 0068 1846     		mov	r0, r3
 102 006a FFF7FEFF 		bl	PWM_3_WriteCompare
  34:main.c        ****                     break;
 103              		.loc 1 34 0
 104 006e 00BF     		nop
 105              	.L2:
 106              	.L8:
  35:main.c        ****             }  
  36:main.c        **** }
 107              		.loc 1 36 0
 108 0070 00BF     		nop
 109 0072 0837     		adds	r7, r7, #8
 110              		.cfi_def_cfa_offset 8
 111 0074 BD46     		mov	sp, r7
 112              		.cfi_def_cfa_register 13
 113              		@ sp needed
 114 0076 80BD     		pop	{r7, pc}
 115              		.cfi_endproc
 116              	.LFE64:
 117              		.size	writePWM, .-writePWM
 118              		.section	.text.pulseCheck,"ax",%progbits
 119              		.align	2
 120              		.global	pulseCheck
 121              		.thumb
 122              		.thumb_func
 123              		.type	pulseCheck, %function
 124              	pulseCheck:
 125              	.LFB65:
  37:main.c        **** 
  38:main.c        **** int pulseCheck(int pulse, int offset_upper, int offset_lower) {
 126              		.loc 1 38 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 16
 129              		@ frame_needed = 1, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131 0000 80B4     		push	{r7}
 132              		.cfi_def_cfa_offset 4
 133              		.cfi_offset 7, -4
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 4


 134 0002 85B0     		sub	sp, sp, #20
 135              		.cfi_def_cfa_offset 24
 136 0004 00AF     		add	r7, sp, #0
 137              		.cfi_def_cfa_register 7
 138 0006 F860     		str	r0, [r7, #12]
 139 0008 B960     		str	r1, [r7, #8]
 140 000a 7A60     		str	r2, [r7, #4]
  39:main.c        ****     if(pulse<0){pulse = pulse - offset_lower;}
 141              		.loc 1 39 0
 142 000c FB68     		ldr	r3, [r7, #12]
 143 000e 002B     		cmp	r3, #0
 144 0010 03DA     		bge	.L10
 145              		.loc 1 39 0 is_stmt 0 discriminator 1
 146 0012 FA68     		ldr	r2, [r7, #12]
 147 0014 7B68     		ldr	r3, [r7, #4]
 148 0016 D31A     		subs	r3, r2, r3
 149 0018 FB60     		str	r3, [r7, #12]
 150              	.L10:
  40:main.c        ****         if(pulse>0){pulse = pulse + offset_upper;}
 151              		.loc 1 40 0 is_stmt 1
 152 001a FB68     		ldr	r3, [r7, #12]
 153 001c 002B     		cmp	r3, #0
 154 001e 03DD     		ble	.L11
 155              		.loc 1 40 0 is_stmt 0 discriminator 1
 156 0020 FA68     		ldr	r2, [r7, #12]
 157 0022 BB68     		ldr	r3, [r7, #8]
 158 0024 1344     		add	r3, r3, r2
 159 0026 FB60     		str	r3, [r7, #12]
 160              	.L11:
  41:main.c        ****         if(pulse<-500){pulse=-500;}
 161              		.loc 1 41 0 is_stmt 1
 162 0028 FB68     		ldr	r3, [r7, #12]
 163 002a 13F5FA7F 		cmn	r3, #500
 164 002e 01DA     		bge	.L12
 165              		.loc 1 41 0 is_stmt 0 discriminator 1
 166 0030 074B     		ldr	r3, .L15
 167 0032 FB60     		str	r3, [r7, #12]
 168              	.L12:
  42:main.c        ****         if(pulse>500){pulse=500;}
 169              		.loc 1 42 0 is_stmt 1
 170 0034 FB68     		ldr	r3, [r7, #12]
 171 0036 B3F5FA7F 		cmp	r3, #500
 172 003a 02DD     		ble	.L13
 173              		.loc 1 42 0 is_stmt 0 discriminator 1
 174 003c 4FF4FA73 		mov	r3, #500
 175 0040 FB60     		str	r3, [r7, #12]
 176              	.L13:
  43:main.c        ****     return pulse;
 177              		.loc 1 43 0 is_stmt 1
 178 0042 FB68     		ldr	r3, [r7, #12]
  44:main.c        **** }
 179              		.loc 1 44 0
 180 0044 1846     		mov	r0, r3
 181 0046 1437     		adds	r7, r7, #20
 182              		.cfi_def_cfa_offset 4
 183 0048 BD46     		mov	sp, r7
 184              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 5


 185              		@ sp needed
 186 004a 80BC     		pop	{r7}
 187              		.cfi_restore 7
 188              		.cfi_def_cfa_offset 0
 189 004c 7047     		bx	lr
 190              	.L16:
 191 004e 00BF     		.align	2
 192              	.L15:
 193 0050 0CFEFFFF 		.word	-500
 194              		.cfi_endproc
 195              	.LFE65:
 196              		.size	pulseCheck, .-pulseCheck
 197              		.global	data_read_mode
 198              		.bss
 199 0001 000000   		.align	2
 200              		.type	data_read_mode, %object
 201              		.size	data_read_mode, 4
 202              	data_read_mode:
 203 0004 00000000 		.space	4
 204              		.global	new_pos_set
 205              		.align	2
 206              		.type	new_pos_set, %object
 207              		.size	new_pos_set, 8
 208              	new_pos_set:
 209 0008 00000000 		.space	8
 209      00000000 
 210              		.comm	new_pos,8,4
 211              		.global	pos
 212              		.data
 213              		.align	2
 214              		.type	pos, %object
 215              		.size	pos, 8
 216              	pos:
 217 0000 D0070000 		.word	2000
 218 0004 D0070000 		.word	2000
 219              		.global	pulse
 220              		.bss
 221              		.align	2
 222              		.type	pulse, %object
 223              		.size	pulse, 8
 224              	pulse:
 225 0010 00000000 		.space	8
 225      00000000 
 226              		.global	pulse_temp
 227              		.align	2
 228              		.type	pulse_temp, %object
 229              		.size	pulse_temp, 8
 230              	pulse_temp:
 231 0018 00000000 		.space	8
 231      00000000 
 232              		.comm	err,16,8
 233              		.comm	adcValue,4,4
 234              		.global	der
 235              		.align	3
 236              		.type	der, %object
 237              		.size	der, 16
 238              	der:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 6


 239 0020 00000000 		.space	16
 239      00000000 
 239      00000000 
 239      00000000 
 240              		.global	prev_err
 241              		.align	3
 242              		.type	prev_err, %object
 243              		.size	prev_err, 16
 244              	prev_err:
 245 0030 00000000 		.space	16
 245      00000000 
 245      00000000 
 245      00000000 
 246              		.global	pid_integral
 247              		.align	3
 248              		.type	pid_integral, %object
 249              		.size	pid_integral, 16
 250              	pid_integral:
 251 0040 00000000 		.space	16
 251      00000000 
 251      00000000 
 251      00000000 
 252              		.global	cyl_set
 253              		.align	2
 254              		.type	cyl_set, %object
 255              		.size	cyl_set, 4
 256              	cyl_set:
 257 0050 00000000 		.space	4
 258              		.comm	cyl_tmp,1,4
 259              		.global	offsets
 260              		.data
 261              		.align	2
 262              		.type	offsets, %object
 263              		.size	offsets, 32
 264              	offsets:
 265 0008 85000000 		.word	133
 266 000c 86000000 		.word	134
 267 0010 85000000 		.word	133
 268 0014 86000000 		.word	134
 269 0018 00000000 		.word	0
 270 001c 00000000 		.word	0
 271 0020 00000000 		.word	0
 272 0024 00000000 		.word	0
 273              		.comm	sendValue,100,4
 274              		.comm	temp,20,4
 275              		.global	nn
 276              		.bss
 277              		.align	2
 278              		.type	nn, %object
 279              		.size	nn, 4
 280              	nn:
 281 0054 00000000 		.space	4
 282              		.global	pid
 283              		.data
 284              		.align	3
 285              		.type	pid, %object
 286              		.size	pid, 24
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 7


 287              	pid:
 288 0028 66666666 		.word	1717986918
 289 002c 6666E63F 		.word	1072064102
 290 0030 FCA9F1D2 		.word	-755914244
 291 0034 4D62503F 		.word	1062232653
 292 0038 7B14AE47 		.word	1202590843
 293 003c E17AA43F 		.word	1067743969
 294              		.comm	help,100,4
 295              		.global	tt
 296              		.bss
 297              		.align	2
 298              		.type	tt, %object
 299              		.size	tt, 4
 300              	tt:
 301 0058 00000000 		.space	4
 302              		.global	start_calib
 303              		.align	2
 304              		.type	start_calib, %object
 305              		.size	start_calib, 4
 306              	start_calib:
 307 005c 00000000 		.space	4
 308              		.global	cyl_no
 309              		.align	2
 310              		.type	cyl_no, %object
 311              		.size	cyl_no, 4
 312              	cyl_no:
 313 0060 00000000 		.space	4
 314              		.global	moving_median
 315              		.align	2
 316              		.type	moving_median, %object
 317              		.size	moving_median, 28
 318              	moving_median:
 319 0064 00000000 		.space	28
 319      00000000 
 319      00000000 
 319      00000000 
 319      00000000 
 320              		.comm	tempArray,14,4
 321              		.comm	tmp,2,2
 322              		.section	.text.adc_update,"ax",%progbits
 323              		.align	2
 324              		.global	adc_update
 325              		.thumb
 326              		.thumb_func
 327              		.type	adc_update, %function
 328              	adc_update:
 329              	.LFB66:
  45:main.c        **** 
  46:main.c        **** 
  47:main.c        **** int data_read_mode = 0;
  48:main.c        **** 
  49:main.c        **** volatile int new_pos_set[CYL_NO] = {0};
  50:main.c        **** int new_pos[CYL_NO];
  51:main.c        **** int pos[CYL_NO]={2000,2000};
  52:main.c        **** int pulse[CYL_NO] = {0};
  53:main.c        **** int pulse_temp[CYL_NO] = {0};
  54:main.c        **** double err[CYL_NO];
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 8


  55:main.c        **** uint16 adcValue[CYL_NO];
  56:main.c        **** double der[CYL_NO] = {0};
  57:main.c        **** double prev_err[CYL_NO] = {0};
  58:main.c        **** double pid_integral[CYL_NO] = {0};
  59:main.c        **** int cyl_set = 0;
  60:main.c        **** char cyl_tmp[1];
  61:main.c        **** 
  62:main.c        **** int offsets[4][2] = {{133,134},{133,134},{0,0},{0,0}}; //{lower,upper} - both positive
  63:main.c        **** 
  64:main.c        **** char sendValue[100];
  65:main.c        **** char temp[20];
  66:main.c        **** int nn=0;
  67:main.c        **** double pid[3] = {0.7,0.001,0.04};
  68:main.c        **** //double pid[3] = { -2.22,-0.0307,0.0 };
  69:main.c        **** char help[100];
  70:main.c        **** int tt = 0;
  71:main.c        **** 
  72:main.c        **** int start_calib = 0;
  73:main.c        **** int cyl_no = 0;
  74:main.c        **** 
  75:main.c        **** uint16 moving_median[CYL_NO][filter_size] = {0};
  76:main.c        **** uint16 tempArray[filter_size];
  77:main.c        **** uint16 tmp;
  78:main.c        **** 
  79:main.c        **** CY_ISR(adc_update){
 330              		.loc 1 79 0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 24
 333              		@ frame_needed = 1, uses_anonymous_args = 0
 334 0000 80B5     		push	{r7, lr}
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 7, -8
 337              		.cfi_offset 14, -4
 338 0002 86B0     		sub	sp, sp, #24
 339              		.cfi_def_cfa_offset 32
 340 0004 00AF     		add	r7, sp, #0
 341              		.cfi_def_cfa_register 7
 342              	.LBB2:
  80:main.c        ****     for(int c = 0;c<CYL_NO;c++){
 343              		.loc 1 80 0
 344 0006 0023     		movs	r3, #0
 345 0008 7B61     		str	r3, [r7, #20]
 346 000a 8FE0     		b	.L18
 347              	.L28:
  81:main.c        ****         AMux_0_FastSelect(c);
 348              		.loc 1 81 0
 349 000c 7B69     		ldr	r3, [r7, #20]
 350 000e DBB2     		uxtb	r3, r3
 351 0010 1846     		mov	r0, r3
 352 0012 FFF7FEFF 		bl	AMux_0_FastSelect
 353              	.LBB3:
  82:main.c        ****         
  83:main.c        ****         for(int j=0;j<filter_size-1;j++){
 354              		.loc 1 83 0
 355 0016 0023     		movs	r3, #0
 356 0018 3B61     		str	r3, [r7, #16]
 357 001a 16E0     		b	.L19
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 9


 358              	.L20:
  84:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 359              		.loc 1 84 0 discriminator 3
 360 001c 3B69     		ldr	r3, [r7, #16]
 361 001e 591C     		adds	r1, r3, #1
 362 0020 4748     		ldr	r0, .L29
 363 0022 7A69     		ldr	r2, [r7, #20]
 364 0024 1346     		mov	r3, r2
 365 0026 DB00     		lsls	r3, r3, #3
 366 0028 9B1A     		subs	r3, r3, r2
 367 002a 0B44     		add	r3, r3, r1
 368 002c 30F81300 		ldrh	r0, [r0, r3, lsl #1]
 369 0030 4349     		ldr	r1, .L29
 370 0032 7A69     		ldr	r2, [r7, #20]
 371 0034 1346     		mov	r3, r2
 372 0036 DB00     		lsls	r3, r3, #3
 373 0038 9B1A     		subs	r3, r3, r2
 374 003a 3A69     		ldr	r2, [r7, #16]
 375 003c 1344     		add	r3, r3, r2
 376 003e 0246     		mov	r2, r0	@ movhi
 377 0040 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
  83:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 378              		.loc 1 83 0 discriminator 3
 379 0044 3B69     		ldr	r3, [r7, #16]
 380 0046 0133     		adds	r3, r3, #1
 381 0048 3B61     		str	r3, [r7, #16]
 382              	.L19:
  83:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 383              		.loc 1 83 0 is_stmt 0 discriminator 1
 384 004a 3B69     		ldr	r3, [r7, #16]
 385 004c 052B     		cmp	r3, #5
 386 004e E5DD     		ble	.L20
 387              	.LBE3:
  85:main.c        ****         }
  86:main.c        ****         
  87:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 388              		.loc 1 87 0 is_stmt 1
 389 0050 FFF7FEFF 		bl	ADC_0_GetResult16
 390 0054 0346     		mov	r3, r0
 391 0056 98B2     		uxth	r0, r3
 392 0058 3949     		ldr	r1, .L29
 393 005a 7A69     		ldr	r2, [r7, #20]
 394 005c 1346     		mov	r3, r2
 395 005e DB00     		lsls	r3, r3, #3
 396 0060 9B1A     		subs	r3, r3, r2
 397 0062 5B00     		lsls	r3, r3, #1
 398 0064 0B44     		add	r3, r3, r1
 399 0066 0C33     		adds	r3, r3, #12
 400 0068 0246     		mov	r2, r0	@ movhi
 401 006a 1A80     		strh	r2, [r3]	@ movhi
  88:main.c        ****         ADC_0_IsEndConversion(ADC_0_WAIT_FOR_RESULT);
 402              		.loc 1 88 0
 403 006c 0020     		movs	r0, #0
 404 006e FFF7FEFF 		bl	ADC_0_IsEndConversion
  89:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 405              		.loc 1 89 0
 406 0072 FFF7FEFF 		bl	ADC_0_GetResult16
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 10


 407 0076 0346     		mov	r3, r0
 408 0078 98B2     		uxth	r0, r3
 409 007a 3149     		ldr	r1, .L29
 410 007c 7A69     		ldr	r2, [r7, #20]
 411 007e 1346     		mov	r3, r2
 412 0080 DB00     		lsls	r3, r3, #3
 413 0082 9B1A     		subs	r3, r3, r2
 414 0084 5B00     		lsls	r3, r3, #1
 415 0086 0B44     		add	r3, r3, r1
 416 0088 0C33     		adds	r3, r3, #12
 417 008a 0246     		mov	r2, r0	@ movhi
 418 008c 1A80     		strh	r2, [r3]	@ movhi
 419              	.LBB4:
  90:main.c        ****         
  91:main.c        ****         for(int j=0;j<filter_size;j++){
 420              		.loc 1 91 0
 421 008e 0023     		movs	r3, #0
 422 0090 FB60     		str	r3, [r7, #12]
 423 0092 0FE0     		b	.L21
 424              	.L22:
  92:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 425              		.loc 1 92 0 discriminator 3
 426 0094 2A49     		ldr	r1, .L29
 427 0096 7A69     		ldr	r2, [r7, #20]
 428 0098 1346     		mov	r3, r2
 429 009a DB00     		lsls	r3, r3, #3
 430 009c 9B1A     		subs	r3, r3, r2
 431 009e FA68     		ldr	r2, [r7, #12]
 432 00a0 1344     		add	r3, r3, r2
 433 00a2 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 434 00a6 274A     		ldr	r2, .L29+4
 435 00a8 FB68     		ldr	r3, [r7, #12]
 436 00aa 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  91:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 437              		.loc 1 91 0 discriminator 3
 438 00ae FB68     		ldr	r3, [r7, #12]
 439 00b0 0133     		adds	r3, r3, #1
 440 00b2 FB60     		str	r3, [r7, #12]
 441              	.L21:
  91:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 442              		.loc 1 91 0 is_stmt 0 discriminator 1
 443 00b4 FB68     		ldr	r3, [r7, #12]
 444 00b6 062B     		cmp	r3, #6
 445 00b8 ECDD     		ble	.L22
 446              	.LBE4:
 447              	.LBB5:
  93:main.c        ****         }
  94:main.c        ****         for(int i = 0; i < filter_size; i++){                     //Loop for ascending ordering
 448              		.loc 1 94 0 is_stmt 1
 449 00ba 0023     		movs	r3, #0
 450 00bc BB60     		str	r3, [r7, #8]
 451 00be 29E0     		b	.L23
 452              	.L27:
 453              	.LBB6:
  95:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 454              		.loc 1 95 0
 455 00c0 0023     		movs	r3, #0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 11


 456 00c2 7B60     		str	r3, [r7, #4]
 457 00c4 20E0     		b	.L24
 458              	.L26:
  96:main.c        ****         	{
  97:main.c        ****         		if (tempArray[j] > tempArray[i])                //Comparing other array elements
 459              		.loc 1 97 0
 460 00c6 1F4A     		ldr	r2, .L29+4
 461 00c8 7B68     		ldr	r3, [r7, #4]
 462 00ca 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 463 00ce 1D49     		ldr	r1, .L29+4
 464 00d0 BB68     		ldr	r3, [r7, #8]
 465 00d2 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 466 00d6 9A42     		cmp	r2, r3
 467 00d8 13D9     		bls	.L25
  98:main.c        ****         		{
  99:main.c        ****         			tmp = tempArray[i];         //Using temporary variable for storing last value
 468              		.loc 1 99 0
 469 00da 1A4A     		ldr	r2, .L29+4
 470 00dc BB68     		ldr	r3, [r7, #8]
 471 00de 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 472 00e2 194B     		ldr	r3, .L29+8
 473 00e4 1A80     		strh	r2, [r3]	@ movhi
 100:main.c        ****         			tempArray[i] = tempArray[j];            //replacing value
 474              		.loc 1 100 0
 475 00e6 174A     		ldr	r2, .L29+4
 476 00e8 7B68     		ldr	r3, [r7, #4]
 477 00ea 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 478 00ee 154A     		ldr	r2, .L29+4
 479 00f0 BB68     		ldr	r3, [r7, #8]
 480 00f2 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 101:main.c        ****         			tempArray[j] = tmp;             //storing last value
 481              		.loc 1 101 0
 482 00f6 144B     		ldr	r3, .L29+8
 483 00f8 1988     		ldrh	r1, [r3]
 484 00fa 124A     		ldr	r2, .L29+4
 485 00fc 7B68     		ldr	r3, [r7, #4]
 486 00fe 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 487              	.L25:
  95:main.c        ****         	{
 488              		.loc 1 95 0 discriminator 2
 489 0102 7B68     		ldr	r3, [r7, #4]
 490 0104 0133     		adds	r3, r3, #1
 491 0106 7B60     		str	r3, [r7, #4]
 492              	.L24:
  95:main.c        ****         	{
 493              		.loc 1 95 0 is_stmt 0 discriminator 1
 494 0108 7B68     		ldr	r3, [r7, #4]
 495 010a 062B     		cmp	r3, #6
 496 010c DBDD     		ble	.L26
 497              	.LBE6:
  94:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 498              		.loc 1 94 0 is_stmt 1 discriminator 2
 499 010e BB68     		ldr	r3, [r7, #8]
 500 0110 0133     		adds	r3, r3, #1
 501 0112 BB60     		str	r3, [r7, #8]
 502              	.L23:
  94:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 12


 503              		.loc 1 94 0 is_stmt 0 discriminator 1
 504 0114 BB68     		ldr	r3, [r7, #8]
 505 0116 062B     		cmp	r3, #6
 506 0118 D2DD     		ble	.L27
 507              	.LBE5:
 102:main.c        ****         		}  
 103:main.c        ****         	}
 104:main.c        ****         }
 105:main.c        ****         adcValue[c] = tempArray[(filter_size-1)/2];
 508              		.loc 1 105 0 is_stmt 1 discriminator 2
 509 011a 0A4B     		ldr	r3, .L29+4
 510 011c D988     		ldrh	r1, [r3, #6]
 511 011e 0B4A     		ldr	r2, .L29+12
 512 0120 7B69     		ldr	r3, [r7, #20]
 513 0122 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  80:main.c        ****         AMux_0_FastSelect(c);
 514              		.loc 1 80 0 discriminator 2
 515 0126 7B69     		ldr	r3, [r7, #20]
 516 0128 0133     		adds	r3, r3, #1
 517 012a 7B61     		str	r3, [r7, #20]
 518              	.L18:
  80:main.c        ****         AMux_0_FastSelect(c);
 519              		.loc 1 80 0 is_stmt 0 discriminator 1
 520 012c 7B69     		ldr	r3, [r7, #20]
 521 012e 012B     		cmp	r3, #1
 522 0130 7FF76CAF 		ble	.L28
 523              	.LBE2:
 106:main.c        ****     }
 107:main.c        ****     update_median_isr_ClearPending();
 524              		.loc 1 107 0 is_stmt 1
 525 0134 FFF7FEFF 		bl	update_median_isr_ClearPending
 108:main.c        ****     
 109:main.c        **** }
 526              		.loc 1 109 0
 527 0138 00BF     		nop
 528 013a 1837     		adds	r7, r7, #24
 529              		.cfi_def_cfa_offset 8
 530 013c BD46     		mov	sp, r7
 531              		.cfi_def_cfa_register 13
 532              		@ sp needed
 533 013e 80BD     		pop	{r7, pc}
 534              	.L30:
 535              		.align	2
 536              	.L29:
 537 0140 00000000 		.word	moving_median
 538 0144 00000000 		.word	tempArray
 539 0148 00000000 		.word	tmp
 540 014c 00000000 		.word	adcValue
 541              		.cfi_endproc
 542              	.LFE66:
 543              		.size	adc_update, .-adc_update
 544              		.section	.text.RxIsr,"ax",%progbits
 545              		.align	2
 546              		.global	RxIsr
 547              		.thumb
 548              		.thumb_func
 549              		.type	RxIsr, %function
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 13


 550              	RxIsr:
 551              	.LFB67:
 110:main.c        **** 
 111:main.c        **** 
 112:main.c        **** CY_ISR(RxIsr)
 113:main.c        **** {
 552              		.loc 1 113 0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 8
 555              		@ frame_needed = 1, uses_anonymous_args = 0
 556 0000 90B5     		push	{r4, r7, lr}
 557              		.cfi_def_cfa_offset 12
 558              		.cfi_offset 4, -12
 559              		.cfi_offset 7, -8
 560              		.cfi_offset 14, -4
 561 0002 83B0     		sub	sp, sp, #12
 562              		.cfi_def_cfa_offset 24
 563 0004 00AF     		add	r7, sp, #0
 564              		.cfi_def_cfa_register 7
 565              	.L63:
 114:main.c        ****     uint8 rxStatus;         
 115:main.c        ****     uint8 rxData;           
 116:main.c        ****     
 117:main.c        ****     do
 118:main.c        ****     {
 119:main.c        ****         /* Read receiver status register */
 120:main.c        ****         rxStatus = UART_RXSTATUS_REG;
 566              		.loc 1 120 0
 567 0006 A24B     		ldr	r3, .L66
 568 0008 1B78     		ldrb	r3, [r3]
 569 000a FB70     		strb	r3, [r7, #3]
 121:main.c        **** 
 122:main.c        ****         if((rxStatus & (UART_RX_STS_BREAK      | UART_RX_STS_PAR_ERROR |
 123:main.c        ****                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 570              		.loc 1 123 0
 571 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 572 000e 03F01E03 		and	r3, r3, #30
 122:main.c        ****                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 573              		.loc 1 122 0
 574 0012 002B     		cmp	r3, #0
 575 0014 0CD0     		beq	.L32
 124:main.c        ****         {
 125:main.c        ****             /* ERROR handling. */
 126:main.c        ****             errorStatus |= rxStatus & ( UART_RX_STS_BREAK      | UART_RX_STS_PAR_ERROR | 
 576              		.loc 1 126 0
 577 0016 97F90330 		ldrsb	r3, [r7, #3]
 578 001a 03F01E03 		and	r3, r3, #30
 579 001e 5AB2     		sxtb	r2, r3
 580 0020 9C4B     		ldr	r3, .L66+4
 581 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 582 0024 5BB2     		sxtb	r3, r3
 583 0026 1343     		orrs	r3, r3, r2
 584 0028 5BB2     		sxtb	r3, r3
 585 002a DAB2     		uxtb	r2, r3
 586 002c 994B     		ldr	r3, .L66+4
 587 002e 1A70     		strb	r2, [r3]
 588              	.L32:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 14


 127:main.c        ****                                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN);
 128:main.c        ****         }
 129:main.c        ****         
 130:main.c        ****         if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 589              		.loc 1 130 0
 590 0030 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 591 0032 03F02003 		and	r3, r3, #32
 592 0036 002B     		cmp	r3, #0
 593 0038 00F01F81 		beq	.L33
 131:main.c        ****         {
 132:main.c        ****             /* Read data from the RX data register */
 133:main.c        ****             rxData = UART_RXDATA_REG;
 594              		.loc 1 133 0
 595 003c 964B     		ldr	r3, .L66+8
 596 003e 1B78     		ldrb	r3, [r3]
 597 0040 BB70     		strb	r3, [r7, #2]
 134:main.c        ****             help[tt] = rxData;
 598              		.loc 1 134 0
 599 0042 964B     		ldr	r3, .L66+12
 600 0044 1B68     		ldr	r3, [r3]
 601 0046 9649     		ldr	r1, .L66+16
 602 0048 BA78     		ldrb	r2, [r7, #2]
 603 004a CA54     		strb	r2, [r1, r3]
 135:main.c        ****             tt++;
 604              		.loc 1 135 0
 605 004c 934B     		ldr	r3, .L66+12
 606 004e 1B68     		ldr	r3, [r3]
 607 0050 0133     		adds	r3, r3, #1
 608 0052 924A     		ldr	r2, .L66+12
 609 0054 1360     		str	r3, [r2]
 136:main.c        ****             if(tt==99){tt=0;}
 610              		.loc 1 136 0
 611 0056 914B     		ldr	r3, .L66+12
 612 0058 1B68     		ldr	r3, [r3]
 613 005a 632B     		cmp	r3, #99
 614 005c 02D1     		bne	.L34
 615              		.loc 1 136 0 is_stmt 0 discriminator 1
 616 005e 8F4B     		ldr	r3, .L66+12
 617 0060 0022     		movs	r2, #0
 618 0062 1A60     		str	r2, [r3]
 619              	.L34:
 137:main.c        ****             if(rxData=='b' ){start_calib=1;};
 620              		.loc 1 137 0 is_stmt 1
 621 0064 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 622 0066 622B     		cmp	r3, #98
 623 0068 02D1     		bne	.L35
 624              		.loc 1 137 0 is_stmt 0 discriminator 1
 625 006a 8E4B     		ldr	r3, .L66+20
 626 006c 0122     		movs	r2, #1
 627 006e 1A60     		str	r2, [r3]
 628              	.L35:
 138:main.c        ****             switch(data_read_mode)
 629              		.loc 1 138 0 is_stmt 1
 630 0070 8D4B     		ldr	r3, .L66+24
 631 0072 1B68     		ldr	r3, [r3]
 632 0074 062B     		cmp	r3, #6
 633 0076 00F20081 		bhi	.L33
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 15


 634 007a 01A2     		adr	r2, .L38
 635 007c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 636              		.p2align 2
 637              	.L38:
 638 0080 9D000000 		.word	.L37+1
 639 0084 D3000000 		.word	.L39+1
 640 0088 1B010000 		.word	.L40+1
 641 008c 6D010000 		.word	.L41+1
 642 0090 AF010000 		.word	.L42+1
 643 0094 F1010000 		.word	.L43+1
 644 0098 33020000 		.word	.L44+1
 645              		.p2align 1
 646              	.L37:
 139:main.c        ****             {
 140:main.c        ****                 case 0:
 141:main.c        ****                     if(rxData=='{' )
 647              		.loc 1 141 0
 648 009c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 649 009e 7B2B     		cmp	r3, #123
 650 00a0 40F0E880 		bne	.L64
 651              	.LBB7:
 142:main.c        ****                     {
 143:main.c        ****                         //aaaa
 144:main.c        ****                         for(int pp=1;pp<20;pp++){
 652              		.loc 1 144 0
 653 00a4 0123     		movs	r3, #1
 654 00a6 7B60     		str	r3, [r7, #4]
 655 00a8 07E0     		b	.L46
 656              	.L47:
 145:main.c        ****                             temp[pp] = ' ';
 657              		.loc 1 145 0 discriminator 3
 658 00aa 804A     		ldr	r2, .L66+28
 659 00ac 7B68     		ldr	r3, [r7, #4]
 660 00ae 1344     		add	r3, r3, r2
 661 00b0 2022     		movs	r2, #32
 662 00b2 1A70     		strb	r2, [r3]
 144:main.c        ****                             temp[pp] = ' ';
 663              		.loc 1 144 0 discriminator 3
 664 00b4 7B68     		ldr	r3, [r7, #4]
 665 00b6 0133     		adds	r3, r3, #1
 666 00b8 7B60     		str	r3, [r7, #4]
 667              	.L46:
 144:main.c        ****                             temp[pp] = ' ';
 668              		.loc 1 144 0 is_stmt 0 discriminator 1
 669 00ba 7B68     		ldr	r3, [r7, #4]
 670 00bc 132B     		cmp	r3, #19
 671 00be F4DD     		ble	.L47
 672              	.LBE7:
 146:main.c        ****                         }
 147:main.c        ****                         temp[0] = '\0';
 673              		.loc 1 147 0 is_stmt 1
 674 00c0 7A4B     		ldr	r3, .L66+28
 675 00c2 0022     		movs	r2, #0
 676 00c4 1A70     		strb	r2, [r3]
 148:main.c        ****                         data_read_mode++;
 677              		.loc 1 148 0
 678 00c6 784B     		ldr	r3, .L66+24
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 16


 679 00c8 1B68     		ldr	r3, [r3]
 680 00ca 0133     		adds	r3, r3, #1
 681 00cc 764A     		ldr	r2, .L66+24
 682 00ce 1360     		str	r3, [r2]
 149:main.c        ****                     }
 150:main.c        ****                 break;
 683              		.loc 1 150 0
 684 00d0 D0E0     		b	.L64
 685              	.L39:
 151:main.c        ****                 case 1:
 152:main.c        ****                     if(rxData=='x'){
 686              		.loc 1 152 0
 687 00d2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 688 00d4 782B     		cmp	r3, #120
 689 00d6 03D1     		bne	.L48
 153:main.c        ****                         data_read_mode = 2;}
 690              		.loc 1 153 0
 691 00d8 734B     		ldr	r3, .L66+24
 692 00da 0222     		movs	r2, #2
 693 00dc 1A60     		str	r2, [r3]
 154:main.c        ****                     else if(rxData=='p'){
 155:main.c        ****                         data_read_mode = 3;}
 156:main.c        ****                     else if(rxData=='i'){
 157:main.c        ****                         data_read_mode = 4;}
 158:main.c        ****                     else if(rxData=='d'){
 159:main.c        ****                         data_read_mode = 5;}
 160:main.c        ****                     else if(rxData=='c'){
 161:main.c        ****                         data_read_mode = 6;}
 162:main.c        ****                 break;
 694              		.loc 1 162 0
 695 00de CBE0     		b	.L65
 696              	.L48:
 154:main.c        ****                     else if(rxData=='p'){
 697              		.loc 1 154 0
 698 00e0 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 699 00e2 702B     		cmp	r3, #112
 700 00e4 03D1     		bne	.L50
 155:main.c        ****                     else if(rxData=='i'){
 701              		.loc 1 155 0
 702 00e6 704B     		ldr	r3, .L66+24
 703 00e8 0322     		movs	r2, #3
 704 00ea 1A60     		str	r2, [r3]
 705              		.loc 1 162 0
 706 00ec C4E0     		b	.L65
 707              	.L50:
 156:main.c        ****                         data_read_mode = 4;}
 708              		.loc 1 156 0
 709 00ee BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 710 00f0 692B     		cmp	r3, #105
 711 00f2 03D1     		bne	.L51
 157:main.c        ****                     else if(rxData=='d'){
 712              		.loc 1 157 0
 713 00f4 6C4B     		ldr	r3, .L66+24
 714 00f6 0422     		movs	r2, #4
 715 00f8 1A60     		str	r2, [r3]
 716              		.loc 1 162 0
 717 00fa BDE0     		b	.L65
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 17


 718              	.L51:
 158:main.c        ****                         data_read_mode = 5;}
 719              		.loc 1 158 0
 720 00fc BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 721 00fe 642B     		cmp	r3, #100
 722 0100 03D1     		bne	.L52
 159:main.c        ****                     else if(rxData=='c'){
 723              		.loc 1 159 0
 724 0102 694B     		ldr	r3, .L66+24
 725 0104 0522     		movs	r2, #5
 726 0106 1A60     		str	r2, [r3]
 727              		.loc 1 162 0
 728 0108 B6E0     		b	.L65
 729              	.L52:
 160:main.c        ****                         data_read_mode = 6;}
 730              		.loc 1 160 0
 731 010a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 732 010c 632B     		cmp	r3, #99
 733 010e 40F0B380 		bne	.L65
 161:main.c        ****                 break;
 734              		.loc 1 161 0
 735 0112 654B     		ldr	r3, .L66+24
 736 0114 0622     		movs	r2, #6
 737 0116 1A60     		str	r2, [r3]
 738              		.loc 1 162 0
 739 0118 AEE0     		b	.L65
 740              	.L40:
 163:main.c        ****                 case 2: //x
 164:main.c        ****                     if(rxData != '}'){
 741              		.loc 1 164 0
 742 011a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 743 011c 7D2B     		cmp	r3, #125
 744 011e 0AD0     		beq	.L53
 165:main.c        ****                         temp[nn] = rxData;
 745              		.loc 1 165 0
 746 0120 634B     		ldr	r3, .L66+32
 747 0122 1B68     		ldr	r3, [r3]
 748 0124 6149     		ldr	r1, .L66+28
 749 0126 BA78     		ldrb	r2, [r7, #2]
 750 0128 CA54     		strb	r2, [r1, r3]
 166:main.c        ****                         nn++;
 751              		.loc 1 166 0
 752 012a 614B     		ldr	r3, .L66+32
 753 012c 1B68     		ldr	r3, [r3]
 754 012e 0133     		adds	r3, r3, #1
 755 0130 5F4A     		ldr	r2, .L66+32
 756 0132 1360     		str	r3, [r2]
 167:main.c        ****                     }
 168:main.c        ****                     else {
 169:main.c        ****                         
 170:main.c        ****                         new_pos[cyl_no] = (int) strtol(temp, (char **)NULL, 10);
 171:main.c        ****                         new_pos_set[cyl_no] = 1;
 172:main.c        ****                         nn=0; 
 173:main.c        ****                     
 174:main.c        ****                         
 175:main.c        ****                         temp[0] = '\0';
 176:main.c        ****                         
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 18


 177:main.c        ****                         data_read_mode = 0;
 178:main.c        ****                     }
 179:main.c        ****                   
 180:main.c        ****                 break;
 757              		.loc 1 180 0
 758 0134 A1E0     		b	.L33
 759              	.L53:
 170:main.c        ****                         new_pos_set[cyl_no] = 1;
 760              		.loc 1 170 0
 761 0136 5F4B     		ldr	r3, .L66+36
 762 0138 1C68     		ldr	r4, [r3]
 763 013a 0A22     		movs	r2, #10
 764 013c 0021     		movs	r1, #0
 765 013e 5B48     		ldr	r0, .L66+28
 766 0140 FFF7FEFF 		bl	strtol
 767 0144 0246     		mov	r2, r0
 768 0146 5C4B     		ldr	r3, .L66+40
 769 0148 43F82420 		str	r2, [r3, r4, lsl #2]
 171:main.c        ****                         nn=0; 
 770              		.loc 1 171 0
 771 014c 594B     		ldr	r3, .L66+36
 772 014e 1B68     		ldr	r3, [r3]
 773 0150 5A4A     		ldr	r2, .L66+44
 774 0152 0121     		movs	r1, #1
 775 0154 42F82310 		str	r1, [r2, r3, lsl #2]
 172:main.c        ****                     
 776              		.loc 1 172 0
 777 0158 554B     		ldr	r3, .L66+32
 778 015a 0022     		movs	r2, #0
 779 015c 1A60     		str	r2, [r3]
 175:main.c        ****                         
 780              		.loc 1 175 0
 781 015e 534B     		ldr	r3, .L66+28
 782 0160 0022     		movs	r2, #0
 783 0162 1A70     		strb	r2, [r3]
 177:main.c        ****                     }
 784              		.loc 1 177 0
 785 0164 504B     		ldr	r3, .L66+24
 786 0166 0022     		movs	r2, #0
 787 0168 1A60     		str	r2, [r3]
 788              		.loc 1 180 0
 789 016a 86E0     		b	.L33
 790              	.L41:
 181:main.c        ****                 case 3: //p
 182:main.c        ****                     if(rxData != '}'){
 791              		.loc 1 182 0
 792 016c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 793 016e 7D2B     		cmp	r3, #125
 794 0170 0AD0     		beq	.L55
 183:main.c        ****                         temp[nn] = rxData;
 795              		.loc 1 183 0
 796 0172 4F4B     		ldr	r3, .L66+32
 797 0174 1B68     		ldr	r3, [r3]
 798 0176 4D49     		ldr	r1, .L66+28
 799 0178 BA78     		ldrb	r2, [r7, #2]
 800 017a CA54     		strb	r2, [r1, r3]
 184:main.c        ****                         nn++;
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 19


 801              		.loc 1 184 0
 802 017c 4C4B     		ldr	r3, .L66+32
 803 017e 1B68     		ldr	r3, [r3]
 804 0180 0133     		adds	r3, r3, #1
 805 0182 4B4A     		ldr	r2, .L66+32
 806 0184 1360     		str	r3, [r2]
 185:main.c        ****                     }
 186:main.c        ****                     else {
 187:main.c        ****                         pid[0] = strtod(temp, NULL);
 188:main.c        ****                         nn=0;
 189:main.c        ****                         temp[0] = '\0';
 190:main.c        ****                         data_read_mode = 0;
 191:main.c        ****                     }
 192:main.c        ****                     
 193:main.c        ****                 break;
 807              		.loc 1 193 0
 808 0186 78E0     		b	.L33
 809              	.L55:
 187:main.c        ****                         nn=0;
 810              		.loc 1 187 0
 811 0188 0021     		movs	r1, #0
 812 018a 4848     		ldr	r0, .L66+28
 813 018c FFF7FEFF 		bl	strtod
 814 0190 0346     		mov	r3, r0
 815 0192 0C46     		mov	r4, r1
 816 0194 4A4A     		ldr	r2, .L66+48
 817 0196 C2E90034 		strd	r3, [r2]
 188:main.c        ****                         temp[0] = '\0';
 818              		.loc 1 188 0
 819 019a 454B     		ldr	r3, .L66+32
 820 019c 0022     		movs	r2, #0
 821 019e 1A60     		str	r2, [r3]
 189:main.c        ****                         data_read_mode = 0;
 822              		.loc 1 189 0
 823 01a0 424B     		ldr	r3, .L66+28
 824 01a2 0022     		movs	r2, #0
 825 01a4 1A70     		strb	r2, [r3]
 190:main.c        ****                     }
 826              		.loc 1 190 0
 827 01a6 404B     		ldr	r3, .L66+24
 828 01a8 0022     		movs	r2, #0
 829 01aa 1A60     		str	r2, [r3]
 830              		.loc 1 193 0
 831 01ac 65E0     		b	.L33
 832              	.L42:
 194:main.c        ****                 case 4: //i
 195:main.c        ****                     if(rxData != '}'){
 833              		.loc 1 195 0
 834 01ae BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 835 01b0 7D2B     		cmp	r3, #125
 836 01b2 0AD0     		beq	.L57
 196:main.c        ****                         temp[nn] = rxData;
 837              		.loc 1 196 0
 838 01b4 3E4B     		ldr	r3, .L66+32
 839 01b6 1B68     		ldr	r3, [r3]
 840 01b8 3C49     		ldr	r1, .L66+28
 841 01ba BA78     		ldrb	r2, [r7, #2]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 20


 842 01bc CA54     		strb	r2, [r1, r3]
 197:main.c        ****                         nn++;
 843              		.loc 1 197 0
 844 01be 3C4B     		ldr	r3, .L66+32
 845 01c0 1B68     		ldr	r3, [r3]
 846 01c2 0133     		adds	r3, r3, #1
 847 01c4 3A4A     		ldr	r2, .L66+32
 848 01c6 1360     		str	r3, [r2]
 198:main.c        ****                     }
 199:main.c        ****                     else {
 200:main.c        ****                         pid[1] = strtod(temp, NULL);
 201:main.c        ****                         nn=0;
 202:main.c        ****                         temp[0] = '\0';
 203:main.c        ****                         data_read_mode = 0;
 204:main.c        ****                     }
 205:main.c        ****                     
 206:main.c        ****                 break;
 849              		.loc 1 206 0
 850 01c8 57E0     		b	.L33
 851              	.L57:
 200:main.c        ****                         nn=0;
 852              		.loc 1 200 0
 853 01ca 0021     		movs	r1, #0
 854 01cc 3748     		ldr	r0, .L66+28
 855 01ce FFF7FEFF 		bl	strtod
 856 01d2 0346     		mov	r3, r0
 857 01d4 0C46     		mov	r4, r1
 858 01d6 3A4A     		ldr	r2, .L66+48
 859 01d8 C2E90234 		strd	r3, [r2, #8]
 201:main.c        ****                         temp[0] = '\0';
 860              		.loc 1 201 0
 861 01dc 344B     		ldr	r3, .L66+32
 862 01de 0022     		movs	r2, #0
 863 01e0 1A60     		str	r2, [r3]
 202:main.c        ****                         data_read_mode = 0;
 864              		.loc 1 202 0
 865 01e2 324B     		ldr	r3, .L66+28
 866 01e4 0022     		movs	r2, #0
 867 01e6 1A70     		strb	r2, [r3]
 203:main.c        ****                     }
 868              		.loc 1 203 0
 869 01e8 2F4B     		ldr	r3, .L66+24
 870 01ea 0022     		movs	r2, #0
 871 01ec 1A60     		str	r2, [r3]
 872              		.loc 1 206 0
 873 01ee 44E0     		b	.L33
 874              	.L43:
 207:main.c        ****                 case 5: //d
 208:main.c        ****                     if(rxData != '}'){
 875              		.loc 1 208 0
 876 01f0 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 877 01f2 7D2B     		cmp	r3, #125
 878 01f4 0AD0     		beq	.L59
 209:main.c        ****                         temp[nn] = rxData;
 879              		.loc 1 209 0
 880 01f6 2E4B     		ldr	r3, .L66+32
 881 01f8 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 21


 882 01fa 2C49     		ldr	r1, .L66+28
 883 01fc BA78     		ldrb	r2, [r7, #2]
 884 01fe CA54     		strb	r2, [r1, r3]
 210:main.c        ****                         nn++;
 885              		.loc 1 210 0
 886 0200 2B4B     		ldr	r3, .L66+32
 887 0202 1B68     		ldr	r3, [r3]
 888 0204 0133     		adds	r3, r3, #1
 889 0206 2A4A     		ldr	r2, .L66+32
 890 0208 1360     		str	r3, [r2]
 211:main.c        ****                     }
 212:main.c        ****                     else {
 213:main.c        ****                         pid[2] = strtod(temp, NULL);
 214:main.c        ****                         nn=0;
 215:main.c        ****                         temp[0] = '\0';
 216:main.c        ****                         data_read_mode = 0;
 217:main.c        ****                     }
 218:main.c        ****                     
 219:main.c        ****                 break;
 891              		.loc 1 219 0
 892 020a 36E0     		b	.L33
 893              	.L59:
 213:main.c        ****                         nn=0;
 894              		.loc 1 213 0
 895 020c 0021     		movs	r1, #0
 896 020e 2748     		ldr	r0, .L66+28
 897 0210 FFF7FEFF 		bl	strtod
 898 0214 0346     		mov	r3, r0
 899 0216 0C46     		mov	r4, r1
 900 0218 294A     		ldr	r2, .L66+48
 901 021a C2E90434 		strd	r3, [r2, #16]
 214:main.c        ****                         temp[0] = '\0';
 902              		.loc 1 214 0
 903 021e 244B     		ldr	r3, .L66+32
 904 0220 0022     		movs	r2, #0
 905 0222 1A60     		str	r2, [r3]
 215:main.c        ****                         data_read_mode = 0;
 906              		.loc 1 215 0
 907 0224 214B     		ldr	r3, .L66+28
 908 0226 0022     		movs	r2, #0
 909 0228 1A70     		strb	r2, [r3]
 216:main.c        ****                     }
 910              		.loc 1 216 0
 911 022a 1F4B     		ldr	r3, .L66+24
 912 022c 0022     		movs	r2, #0
 913 022e 1A60     		str	r2, [r3]
 914              		.loc 1 219 0
 915 0230 23E0     		b	.L33
 916              	.L44:
 220:main.c        ****                 case 6: //c
 221:main.c        ****                     if(rxData != '}'){
 917              		.loc 1 221 0
 918 0232 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 919 0234 7D2B     		cmp	r3, #125
 920 0236 0AD0     		beq	.L61
 222:main.c        ****                         temp[nn] = rxData;
 921              		.loc 1 222 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 22


 922 0238 1D4B     		ldr	r3, .L66+32
 923 023a 1B68     		ldr	r3, [r3]
 924 023c 1B49     		ldr	r1, .L66+28
 925 023e BA78     		ldrb	r2, [r7, #2]
 926 0240 CA54     		strb	r2, [r1, r3]
 223:main.c        ****                         nn++;
 927              		.loc 1 223 0
 928 0242 1B4B     		ldr	r3, .L66+32
 929 0244 1B68     		ldr	r3, [r3]
 930 0246 0133     		adds	r3, r3, #1
 931 0248 194A     		ldr	r2, .L66+32
 932 024a 1360     		str	r3, [r2]
 224:main.c        ****                     }
 225:main.c        ****                     else {
 226:main.c        ****                         cyl_no = (int) strtol(temp, (char **)NULL, 10);
 227:main.c        ****                         nn=0; 
 228:main.c        ****                         temp[0] = '\0';
 229:main.c        ****                         data_read_mode = 0;
 230:main.c        ****                     }
 231:main.c        ****                   
 232:main.c        ****                 break;
 933              		.loc 1 232 0
 934 024c 15E0     		b	.L33
 935              	.L61:
 226:main.c        ****                         nn=0; 
 936              		.loc 1 226 0
 937 024e 0A22     		movs	r2, #10
 938 0250 0021     		movs	r1, #0
 939 0252 1648     		ldr	r0, .L66+28
 940 0254 FFF7FEFF 		bl	strtol
 941 0258 0246     		mov	r2, r0
 942 025a 164B     		ldr	r3, .L66+36
 943 025c 1A60     		str	r2, [r3]
 227:main.c        ****                         temp[0] = '\0';
 944              		.loc 1 227 0
 945 025e 144B     		ldr	r3, .L66+32
 946 0260 0022     		movs	r2, #0
 947 0262 1A60     		str	r2, [r3]
 228:main.c        ****                         data_read_mode = 0;
 948              		.loc 1 228 0
 949 0264 114B     		ldr	r3, .L66+28
 950 0266 0022     		movs	r2, #0
 951 0268 1A70     		strb	r2, [r3]
 229:main.c        ****                     }
 952              		.loc 1 229 0
 953 026a 0F4B     		ldr	r3, .L66+24
 954 026c 0022     		movs	r2, #0
 955 026e 1A60     		str	r2, [r3]
 956              		.loc 1 232 0
 957 0270 00BF     		nop
 958 0272 02E0     		b	.L33
 959              	.L64:
 150:main.c        ****                 case 1:
 960              		.loc 1 150 0
 961 0274 00BF     		nop
 962 0276 00E0     		b	.L33
 963              	.L65:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 23


 162:main.c        ****                 case 2: //x
 964              		.loc 1 162 0
 965 0278 00BF     		nop
 966              	.L33:
 233:main.c        ****             }
 234:main.c        ****             
 235:main.c        ****             if(errorStatus == 0u)
 236:main.c        ****             {
 237:main.c        ****                 /* Send data backward */
 238:main.c        ****                 //UART_TXDATA_REG = rxData;
 239:main.c        ****             }
 240:main.c        ****         }
 241:main.c        ****     }while((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u);
 967              		.loc 1 241 0
 968 027a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 969 027c 03F02003 		and	r3, r3, #32
 970 0280 002B     		cmp	r3, #0
 971 0282 7FF4C0AE 		bne	.L63
 242:main.c        **** 
 243:main.c        **** }
 972              		.loc 1 243 0
 973 0286 00BF     		nop
 974 0288 0C37     		adds	r7, r7, #12
 975              		.cfi_def_cfa_offset 12
 976 028a BD46     		mov	sp, r7
 977              		.cfi_def_cfa_register 13
 978              		@ sp needed
 979 028c 90BD     		pop	{r4, r7, pc}
 980              	.L67:
 981 028e 00BF     		.align	2
 982              	.L66:
 983 0290 6A650040 		.word	1073767786
 984 0294 00000000 		.word	errorStatus
 985 0298 4A650040 		.word	1073767754
 986 029c 00000000 		.word	tt
 987 02a0 00000000 		.word	help
 988 02a4 00000000 		.word	start_calib
 989 02a8 00000000 		.word	data_read_mode
 990 02ac 00000000 		.word	temp
 991 02b0 00000000 		.word	nn
 992 02b4 00000000 		.word	cyl_no
 993 02b8 00000000 		.word	new_pos
 994 02bc 00000000 		.word	new_pos_set
 995 02c0 00000000 		.word	pid
 996              		.cfi_endproc
 997              	.LFE67:
 998              		.size	RxIsr, .-RxIsr
 999              		.global	led_switch
 1000              		.bss
 1001              		.align	2
 1002              		.type	led_switch, %object
 1003              		.size	led_switch, 4
 1004              	led_switch:
 1005 0080 00000000 		.space	4
 1006              		.section	.rodata
 1007              		.align	2
 1008              	.LC0:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 24


 1009 0000 25303864 		.ascii	"%08d\011%08.2f\011%08d\011%08.2f\000"
 1009      09253038 
 1009      2E326609 
 1009      25303864 
 1009      09253038 
 1010              		.global	__aeabi_i2d
 1011              		.global	__aeabi_dsub
 1012              		.global	__aeabi_dadd
 1013              		.global	__aeabi_dmul
 1014              		.global	__aeabi_ddiv
 1015              		.global	__aeabi_d2iz
 1016              		.align	2
 1017              	.LC1:
 1018 0018 55505045 		.ascii	"UPPER:\011Lower Offset: %d \011Upper Offset: %d \011"
 1018      523A094C 
 1018      6F776572 
 1018      204F6666 
 1018      7365743A 
 1019 0043 20414443 		.ascii	" ADC Diff: %d\012\000"
 1019      20446966 
 1019      663A2025 
 1019      640A00
 1020 0052 0000     		.align	2
 1021              	.LC2:
 1022 0054 4C4F5745 		.ascii	"LOWER:\011Lower Offset: %d \011Upper Offset: %d \011"
 1022      523A094C 
 1022      6F776572 
 1022      204F6666 
 1022      7365743A 
 1023 007f 20414443 		.ascii	" ADC Diff: %d\012\000"
 1023      20446966 
 1023      663A2025 
 1023      640A00
 1024 008e 0000     		.align	2
 1025              	.LC3:
 1026 0090 4C6F7765 		.ascii	"Lower Offset: %d \011 Upper Offset: %d \012\000"
 1026      72204F66 
 1026      66736574 
 1026      3A202564 
 1026      20092055 
 1027              		.global	__aeabi_ui2d
 1028              		.section	.text.main,"ax",%progbits
 1029              		.align	2
 1030              		.global	main
 1031              		.thumb
 1032              		.thumb_func
 1033              		.type	main, %function
 1034              	main:
 1035              	.LFB68:
 244:main.c        ****     
 245:main.c        **** 
 246:main.c        **** 
 247:main.c        **** int led_switch = 0;
 248:main.c        **** int main()
 249:main.c        **** {
 1036              		.loc 1 249 0
 1037              		.cfi_startproc
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 25


 1038              		@ args = 0, pretend = 0, frame = 64
 1039              		@ frame_needed = 1, uses_anonymous_args = 0
 1040 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1041              		.cfi_def_cfa_offset 20
 1042              		.cfi_offset 4, -20
 1043              		.cfi_offset 5, -16
 1044              		.cfi_offset 6, -12
 1045              		.cfi_offset 7, -8
 1046              		.cfi_offset 14, -4
 1047 0002 97B0     		sub	sp, sp, #92
 1048              		.cfi_def_cfa_offset 112
 1049 0004 06AF     		add	r7, sp, #24
 1050              		.cfi_def_cfa 7, 88
 250:main.c        ****     
 251:main.c        ****     //PWM variables
 252:main.c        ****     PWM_0_Start();
 1051              		.loc 1 252 0
 1052 0006 FFF7FEFF 		bl	PWM_0_Start
 253:main.c        ****     PWM_1_Start();
 1053              		.loc 1 253 0
 1054 000a FFF7FEFF 		bl	PWM_1_Start
 254:main.c        ****     PWM_2_Start();
 1055              		.loc 1 254 0
 1056 000e FFF7FEFF 		bl	PWM_2_Start
 255:main.c        ****     PWM_3_Start();
 1057              		.loc 1 255 0
 1058 0012 FFF7FEFF 		bl	PWM_3_Start
 256:main.c        ****     ADC_0_Start();
 1059              		.loc 1 256 0
 1060 0016 FFF7FEFF 		bl	ADC_0_Start
 257:main.c        ****     ADC_0_StartConvert();
 1061              		.loc 1 257 0
 1062 001a FFF7FEFF 		bl	ADC_0_StartConvert
 258:main.c        ****     AMux_0_Init();
 1063              		.loc 1 258 0
 1064 001e FFF7FEFF 		bl	AMux_0_Start
 259:main.c        ****     
 260:main.c        ****     UART_Start();           /* Start communication component */
 1065              		.loc 1 260 0
 1066 0022 FFF7FEFF 		bl	UART_Start
 261:main.c        **** 
 262:main.c        **** #if(INTERRUPT_CODE_ENABLED == ENABLED)
 263:main.c        ****     isr_rx_StartEx(RxIsr);
 1067              		.loc 1 263 0
 1068 0026 AA48     		ldr	r0, .L87+8
 1069 0028 FFF7FEFF 		bl	isr_rx_StartEx
 264:main.c        ****     update_median_isr_StartEx(adc_update);
 1070              		.loc 1 264 0
 1071 002c A948     		ldr	r0, .L87+12
 1072 002e FFF7FEFF 		bl	update_median_isr_StartEx
 265:main.c        **** #endif /* INTERRUPT_CODE_ENABLED == ENABLED */
 266:main.c        ****     
 267:main.c        ****     CyGlobalIntEnable;      /* Enable global interrupts. */
 1073              		.loc 1 267 0
 1074              		.syntax unified
 1075              	@ 267 "main.c" 1
 1076 0032 62B6     		CPSIE   i
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 26


 1077              	@ 0 "" 2
 268:main.c        ****     
 269:main.c        ****     double dt;
 270:main.c        ****     double time;
 271:main.c        ****     
 272:main.c        ****     dt = 0.025; //initialised dt, corrected by timer  below
 1078              		.loc 1 272 0
 1079              		.thumb
 1080              		.syntax unified
 1081 0034 A4A4     		adr	r4, .L87
 1082 0036 D4E90034 		ldrd	r3, [r4]
 1083 003a C7E90E34 		strd	r3, [r7, #56]
 273:main.c        **** 
 274:main.c        ****     sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[1],err[1]);
 1084              		.loc 1 274 0
 1085 003e A64B     		ldr	r3, .L87+16
 1086 0040 1B88     		ldrh	r3, [r3]
 1087 0042 1D46     		mov	r5, r3
 1088 0044 A54B     		ldr	r3, .L87+20
 1089 0046 18CB     		ldmia	r3, {r3-r4}
 1090 0048 A34A     		ldr	r2, .L87+16
 1091 004a 5288     		ldrh	r2, [r2, #2]
 1092 004c 1046     		mov	r0, r2
 1093 004e A34A     		ldr	r2, .L87+20
 1094 0050 D2E90212 		ldrd	r1, [r2, #8]
 1095 0054 CDE90412 		strd	r1, [sp, #16]
 1096 0058 0290     		str	r0, [sp, #8]
 1097 005a CDE90034 		strd	r3, [sp]
 1098 005e 2A46     		mov	r2, r5
 1099 0060 9F49     		ldr	r1, .L87+24
 1100 0062 A048     		ldr	r0, .L87+28
 1101 0064 FFF7FEFF 		bl	sprintf
 275:main.c        ****     UART_PutString(sendValue);
 1102              		.loc 1 275 0
 1103 0068 9E48     		ldr	r0, .L87+28
 1104 006a FFF7FEFF 		bl	UART_PutString
 276:main.c        ****     
 277:main.c        ****     median_timer_Start();
 1105              		.loc 1 277 0
 1106 006e FFF7FEFF 		bl	median_timer_Start
 278:main.c        ****     Timer_1_Start();
 1107              		.loc 1 278 0
 1108 0072 FFF7FEFF 		bl	Timer_1_Start
 279:main.c        ****    int send_now = 0;
 1109              		.loc 1 279 0
 1110 0076 0023     		movs	r3, #0
 1111 0078 7B61     		str	r3, [r7, #20]
 1112              	.L86:
 280:main.c        ****     for(;;)
 281:main.c        ****     {
 282:main.c        ****         Timer_1_WriteCounter(65535);
 1113              		.loc 1 282 0
 1114 007a 4FF6FF70 		movw	r0, #65535
 1115 007e FFF7FEFF 		bl	Timer_1_WriteCounter
 283:main.c        ****         
 284:main.c        ****         sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[1],err[1]);
 1116              		.loc 1 284 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 27


 1117 0082 954B     		ldr	r3, .L87+16
 1118 0084 1B88     		ldrh	r3, [r3]
 1119 0086 1D46     		mov	r5, r3
 1120 0088 944B     		ldr	r3, .L87+20
 1121 008a 18CB     		ldmia	r3, {r3-r4}
 1122 008c 924A     		ldr	r2, .L87+16
 1123 008e 5288     		ldrh	r2, [r2, #2]
 1124 0090 1046     		mov	r0, r2
 1125 0092 924A     		ldr	r2, .L87+20
 1126 0094 D2E90212 		ldrd	r1, [r2, #8]
 1127 0098 CDE90412 		strd	r1, [sp, #16]
 1128 009c 0290     		str	r0, [sp, #8]
 1129 009e CDE90034 		strd	r3, [sp]
 1130 00a2 2A46     		mov	r2, r5
 1131 00a4 8E49     		ldr	r1, .L87+24
 1132 00a6 8F48     		ldr	r0, .L87+28
 1133 00a8 FFF7FEFF 		bl	sprintf
 285:main.c        ****         UART_PutString(sendValue);
 1134              		.loc 1 285 0
 1135 00ac 8D48     		ldr	r0, .L87+28
 1136 00ae FFF7FEFF 		bl	UART_PutString
 1137              	.LBB8:
 286:main.c        ****         /* START PID CODE */
 287:main.c        ****         for(int cyl = 0;cyl<CYL_NO;cyl++){
 1138              		.loc 1 287 0
 1139 00b2 0023     		movs	r3, #0
 1140 00b4 7B63     		str	r3, [r7, #52]
 1141 00b6 D7E0     		b	.L69
 1142              	.L71:
 288:main.c        ****             if(new_pos_set[cyl]){
 1143              		.loc 1 288 0
 1144 00b8 8B4A     		ldr	r2, .L87+32
 1145 00ba 7B6B     		ldr	r3, [r7, #52]
 1146 00bc 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1147 00c0 002B     		cmp	r3, #0
 1148 00c2 0CD0     		beq	.L70
 289:main.c        ****                 pos[cyl] = new_pos[cyl];
 1149              		.loc 1 289 0
 1150 00c4 894A     		ldr	r2, .L87+36
 1151 00c6 7B6B     		ldr	r3, [r7, #52]
 1152 00c8 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1153 00cc 8849     		ldr	r1, .L87+40
 1154 00ce 7B6B     		ldr	r3, [r7, #52]
 1155 00d0 41F82320 		str	r2, [r1, r3, lsl #2]
 290:main.c        ****                 new_pos_set[cyl] = 0;
 1156              		.loc 1 290 0
 1157 00d4 844A     		ldr	r2, .L87+32
 1158 00d6 7B6B     		ldr	r3, [r7, #52]
 1159 00d8 0021     		movs	r1, #0
 1160 00da 42F82310 		str	r1, [r2, r3, lsl #2]
 1161              	.L70:
 291:main.c        ****             }
 292:main.c        ****             
 293:main.c        ****             err[cyl] = -pos[cyl] + adcValue[cyl];
 1162              		.loc 1 293 0 discriminator 2
 1163 00de 7E4A     		ldr	r2, .L87+16
 1164 00e0 7B6B     		ldr	r3, [r7, #52]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 28


 1165 00e2 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1166 00e6 1946     		mov	r1, r3
 1167 00e8 814A     		ldr	r2, .L87+40
 1168 00ea 7B6B     		ldr	r3, [r7, #52]
 1169 00ec 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1170 00f0 CB1A     		subs	r3, r1, r3
 1171 00f2 1846     		mov	r0, r3
 1172 00f4 FFF7FEFF 		bl	__aeabi_i2d
 1173 00f8 0346     		mov	r3, r0
 1174 00fa 0C46     		mov	r4, r1
 1175 00fc 7749     		ldr	r1, .L87+20
 1176 00fe 7A6B     		ldr	r2, [r7, #52]
 1177 0100 D200     		lsls	r2, r2, #3
 1178 0102 0A44     		add	r2, r2, r1
 1179 0104 C2E90034 		strd	r3, [r2]
 294:main.c        ****             der[cyl] = err[cyl] - prev_err[cyl];
 1180              		.loc 1 294 0 discriminator 2
 1181 0108 744A     		ldr	r2, .L87+20
 1182 010a 7B6B     		ldr	r3, [r7, #52]
 1183 010c DB00     		lsls	r3, r3, #3
 1184 010e 1344     		add	r3, r3, r2
 1185 0110 D3E90001 		ldrd	r0, [r3]
 1186 0114 774A     		ldr	r2, .L87+44
 1187 0116 7B6B     		ldr	r3, [r7, #52]
 1188 0118 DB00     		lsls	r3, r3, #3
 1189 011a 1344     		add	r3, r3, r2
 1190 011c 18CB     		ldmia	r3, {r3-r4}
 1191 011e 1A46     		mov	r2, r3
 1192 0120 2346     		mov	r3, r4
 1193 0122 FFF7FEFF 		bl	__aeabi_dsub
 1194 0126 0346     		mov	r3, r0
 1195 0128 0C46     		mov	r4, r1
 1196 012a 7349     		ldr	r1, .L87+48
 1197 012c 7A6B     		ldr	r2, [r7, #52]
 1198 012e D200     		lsls	r2, r2, #3
 1199 0130 0A44     		add	r2, r2, r1
 1200 0132 C2E90034 		strd	r3, [r2]
 295:main.c        ****             pid_integral[cyl] = err[cyl] + pid_integral[cyl];
 1201              		.loc 1 295 0 discriminator 2
 1202 0136 694A     		ldr	r2, .L87+20
 1203 0138 7B6B     		ldr	r3, [r7, #52]
 1204 013a DB00     		lsls	r3, r3, #3
 1205 013c 1344     		add	r3, r3, r2
 1206 013e D3E90001 		ldrd	r0, [r3]
 1207 0142 6E4A     		ldr	r2, .L87+52
 1208 0144 7B6B     		ldr	r3, [r7, #52]
 1209 0146 DB00     		lsls	r3, r3, #3
 1210 0148 1344     		add	r3, r3, r2
 1211 014a 18CB     		ldmia	r3, {r3-r4}
 1212 014c 1A46     		mov	r2, r3
 1213 014e 2346     		mov	r3, r4
 1214 0150 FFF7FEFF 		bl	__aeabi_dadd
 1215 0154 0346     		mov	r3, r0
 1216 0156 0C46     		mov	r4, r1
 1217 0158 6849     		ldr	r1, .L87+52
 1218 015a 7A6B     		ldr	r2, [r7, #52]
 1219 015c D200     		lsls	r2, r2, #3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 29


 1220 015e 0A44     		add	r2, r2, r1
 1221 0160 C2E90034 		strd	r3, [r2]
 296:main.c        ****             pulse_temp[cyl] = pid[0] * err[cyl] + ( pid[1] * pid_integral[cyl] * dt) + ( pid[2] * d
 1222              		.loc 1 296 0 discriminator 2
 1223 0164 664B     		ldr	r3, .L87+56
 1224 0166 D3E90001 		ldrd	r0, [r3]
 1225 016a 5C4A     		ldr	r2, .L87+20
 1226 016c 7B6B     		ldr	r3, [r7, #52]
 1227 016e DB00     		lsls	r3, r3, #3
 1228 0170 1344     		add	r3, r3, r2
 1229 0172 18CB     		ldmia	r3, {r3-r4}
 1230 0174 1A46     		mov	r2, r3
 1231 0176 2346     		mov	r3, r4
 1232 0178 FFF7FEFF 		bl	__aeabi_dmul
 1233 017c 0346     		mov	r3, r0
 1234 017e 0C46     		mov	r4, r1
 1235 0180 1D46     		mov	r5, r3
 1236 0182 2646     		mov	r6, r4
 1237 0184 5E4B     		ldr	r3, .L87+56
 1238 0186 D3E90201 		ldrd	r0, [r3, #8]
 1239 018a 5C4A     		ldr	r2, .L87+52
 1240 018c 7B6B     		ldr	r3, [r7, #52]
 1241 018e DB00     		lsls	r3, r3, #3
 1242 0190 1344     		add	r3, r3, r2
 1243 0192 18CB     		ldmia	r3, {r3-r4}
 1244 0194 1A46     		mov	r2, r3
 1245 0196 2346     		mov	r3, r4
 1246 0198 FFF7FEFF 		bl	__aeabi_dmul
 1247 019c 0346     		mov	r3, r0
 1248 019e 0C46     		mov	r4, r1
 1249 01a0 1846     		mov	r0, r3
 1250 01a2 2146     		mov	r1, r4
 1251 01a4 D7E90E23 		ldrd	r2, [r7, #56]
 1252 01a8 FFF7FEFF 		bl	__aeabi_dmul
 1253 01ac 0346     		mov	r3, r0
 1254 01ae 0C46     		mov	r4, r1
 1255 01b0 1A46     		mov	r2, r3
 1256 01b2 2346     		mov	r3, r4
 1257 01b4 2846     		mov	r0, r5
 1258 01b6 3146     		mov	r1, r6
 1259 01b8 FFF7FEFF 		bl	__aeabi_dadd
 1260 01bc 0346     		mov	r3, r0
 1261 01be 0C46     		mov	r4, r1
 1262 01c0 1D46     		mov	r5, r3
 1263 01c2 2646     		mov	r6, r4
 1264 01c4 4E4B     		ldr	r3, .L87+56
 1265 01c6 D3E90401 		ldrd	r0, [r3, #16]
 1266 01ca 4B4A     		ldr	r2, .L87+48
 1267 01cc 7B6B     		ldr	r3, [r7, #52]
 1268 01ce DB00     		lsls	r3, r3, #3
 1269 01d0 1344     		add	r3, r3, r2
 1270 01d2 18CB     		ldmia	r3, {r3-r4}
 1271 01d4 1A46     		mov	r2, r3
 1272 01d6 2346     		mov	r3, r4
 1273 01d8 FFF7FEFF 		bl	__aeabi_dmul
 1274 01dc 0346     		mov	r3, r0
 1275 01de 0C46     		mov	r4, r1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 30


 1276 01e0 1846     		mov	r0, r3
 1277 01e2 2146     		mov	r1, r4
 1278 01e4 D7E90E23 		ldrd	r2, [r7, #56]
 1279 01e8 FFF7FEFF 		bl	__aeabi_ddiv
 1280 01ec 0346     		mov	r3, r0
 1281 01ee 0C46     		mov	r4, r1
 1282 01f0 1A46     		mov	r2, r3
 1283 01f2 2346     		mov	r3, r4
 1284 01f4 2846     		mov	r0, r5
 1285 01f6 3146     		mov	r1, r6
 1286 01f8 FFF7FEFF 		bl	__aeabi_dadd
 1287 01fc 0346     		mov	r3, r0
 1288 01fe 0C46     		mov	r4, r1
 1289 0200 1846     		mov	r0, r3
 1290 0202 2146     		mov	r1, r4
 1291 0204 FFF7FEFF 		bl	__aeabi_d2iz
 1292 0208 0146     		mov	r1, r0
 1293 020a 3E4A     		ldr	r2, .L87+60
 1294 020c 7B6B     		ldr	r3, [r7, #52]
 1295 020e 42F82310 		str	r1, [r2, r3, lsl #2]
 297:main.c        ****             
 298:main.c        ****             pulse[cyl] = pulseCheck(pulse_temp[cyl],offsets[cyl][1],offsets[cyl][0]);
 1296              		.loc 1 298 0 discriminator 2
 1297 0212 3C4A     		ldr	r2, .L87+60
 1298 0214 7B6B     		ldr	r3, [r7, #52]
 1299 0216 52F82300 		ldr	r0, [r2, r3, lsl #2]
 1300 021a 3B4A     		ldr	r2, .L87+64
 1301 021c 7B6B     		ldr	r3, [r7, #52]
 1302 021e DB00     		lsls	r3, r3, #3
 1303 0220 1344     		add	r3, r3, r2
 1304 0222 5968     		ldr	r1, [r3, #4]
 1305 0224 384A     		ldr	r2, .L87+64
 1306 0226 7B6B     		ldr	r3, [r7, #52]
 1307 0228 52F83330 		ldr	r3, [r2, r3, lsl #3]
 1308 022c 1A46     		mov	r2, r3
 1309 022e FFF7FEFF 		bl	pulseCheck
 1310 0232 0146     		mov	r1, r0
 1311 0234 354A     		ldr	r2, .L87+68
 1312 0236 7B6B     		ldr	r3, [r7, #52]
 1313 0238 42F82310 		str	r1, [r2, r3, lsl #2]
 299:main.c        ****             
 300:main.c        ****             writePWM(cyl,pulse[cyl]);
 1314              		.loc 1 300 0 discriminator 2
 1315 023c 334A     		ldr	r2, .L87+68
 1316 023e 7B6B     		ldr	r3, [r7, #52]
 1317 0240 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1318 0244 1946     		mov	r1, r3
 1319 0246 786B     		ldr	r0, [r7, #52]
 1320 0248 FFF7FEFF 		bl	writePWM
 301:main.c        ****             prev_err[cyl] = err[cyl];
 1321              		.loc 1 301 0 discriminator 2
 1322 024c 234A     		ldr	r2, .L87+20
 1323 024e 7B6B     		ldr	r3, [r7, #52]
 1324 0250 DB00     		lsls	r3, r3, #3
 1325 0252 1344     		add	r3, r3, r2
 1326 0254 18CB     		ldmia	r3, {r3-r4}
 1327 0256 2749     		ldr	r1, .L87+44
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 31


 1328 0258 7A6B     		ldr	r2, [r7, #52]
 1329 025a D200     		lsls	r2, r2, #3
 1330 025c 0A44     		add	r2, r2, r1
 1331 025e C2E90034 		strd	r3, [r2]
 287:main.c        ****             if(new_pos_set[cyl]){
 1332              		.loc 1 287 0 discriminator 2
 1333 0262 7B6B     		ldr	r3, [r7, #52]
 1334 0264 0133     		adds	r3, r3, #1
 1335 0266 7B63     		str	r3, [r7, #52]
 1336              	.L69:
 287:main.c        ****             if(new_pos_set[cyl]){
 1337              		.loc 1 287 0 is_stmt 0 discriminator 1
 1338 0268 7B6B     		ldr	r3, [r7, #52]
 1339 026a 012B     		cmp	r3, #1
 1340 026c 7FF724AF 		ble	.L71
 1341              	.LBE8:
 302:main.c        ****         }
 303:main.c        ****         
 304:main.c        ****         
 305:main.c        ****         /* END PID CODE */
 306:main.c        ****         if(start_calib){
 1342              		.loc 1 306 0 is_stmt 1
 1343 0270 274B     		ldr	r3, .L87+72
 1344 0272 1B68     		ldr	r3, [r3]
 1345 0274 002B     		cmp	r3, #0
 1346 0276 00F0D580 		beq	.L72
 1347              	.LBB9:
 307:main.c        ****             int calib_cyl = 0;
 1348              		.loc 1 307 0
 1349 027a 0023     		movs	r3, #0
 1350 027c 3B61     		str	r3, [r7, #16]
 308:main.c        ****             int upper_offset_set = 0;
 1351              		.loc 1 308 0
 1352 027e 0023     		movs	r3, #0
 1353 0280 3B63     		str	r3, [r7, #48]
 309:main.c        ****             int lower_offset_set = 0;
 1354              		.loc 1 309 0
 1355 0282 0023     		movs	r3, #0
 1356 0284 FB62     		str	r3, [r7, #44]
 310:main.c        ****             int upper_offset = 120;
 1357              		.loc 1 310 0
 1358 0286 7823     		movs	r3, #120
 1359 0288 BB62     		str	r3, [r7, #40]
 311:main.c        ****             int lower_offset = -120;
 1360              		.loc 1 311 0
 1361 028a 6FF07703 		mvn	r3, #119
 1362 028e 7B62     		str	r3, [r7, #36]
 312:main.c        ****             int lower_check_no = 0;
 1363              		.loc 1 312 0
 1364 0290 0023     		movs	r3, #0
 1365 0292 3B62     		str	r3, [r7, #32]
 313:main.c        ****             int upper_check_no = 0;
 1366              		.loc 1 313 0
 1367 0294 0023     		movs	r3, #0
 1368 0296 FB61     		str	r3, [r7, #28]
 314:main.c        ****             uint16 prev_adcValue = adcValue[0];
 1369              		.loc 1 314 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 32


 1370 0298 0F4B     		ldr	r3, .L87+16
 1371 029a 1B88     		ldrh	r3, [r3]	@ movhi
 1372 029c FB81     		strh	r3, [r7, #14]	@ movhi
 315:main.c        ****             uint16 diff = 0;
 1373              		.loc 1 315 0
 1374 029e 0023     		movs	r3, #0
 1375 02a0 BB81     		strh	r3, [r7, #12]	@ movhi
 1376              	.LBB10:
 316:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1377              		.loc 1 316 0
 1378 02a2 0023     		movs	r3, #0
 1379 02a4 BB61     		str	r3, [r7, #24]
 1380 02a6 06E0     		b	.L73
 1381              	.L74:
 317:main.c        ****                 writePWM(g,0);
 1382              		.loc 1 317 0 discriminator 3
 1383 02a8 0021     		movs	r1, #0
 1384 02aa B869     		ldr	r0, [r7, #24]
 1385 02ac FFF7FEFF 		bl	writePWM
 316:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1386              		.loc 1 316 0 discriminator 3
 1387 02b0 BB69     		ldr	r3, [r7, #24]
 1388 02b2 0133     		adds	r3, r3, #1
 1389 02b4 BB61     		str	r3, [r7, #24]
 1390              	.L73:
 316:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1391              		.loc 1 316 0 is_stmt 0 discriminator 1
 1392 02b6 BB69     		ldr	r3, [r7, #24]
 1393 02b8 012B     		cmp	r3, #1
 1394 02ba F5DD     		ble	.L74
 1395              	.LBE10:
 318:main.c        ****                 
 319:main.c        ****             CyDelay(1000);
 1396              		.loc 1 319 0 is_stmt 1
 1397 02bc 4FF47A70 		mov	r0, #1000
 1398 02c0 FFF7FEFF 		bl	CyDelay
 320:main.c        ****         
 321:main.c        ****             while(upper_offset_set==0 && lower_offset_set==0){
 1399              		.loc 1 321 0
 1400 02c4 9CE0     		b	.L75
 1401              	.L88:
 1402 02c6 00BF     		.align	3
 1403              	.L87:
 1404 02c8 9A999999 		.word	-1717986918
 1405 02cc 9999993F 		.word	1067030937
 1406 02d0 00000000 		.word	RxIsr
 1407 02d4 00000000 		.word	adc_update
 1408 02d8 00000000 		.word	adcValue
 1409 02dc 00000000 		.word	err
 1410 02e0 00000000 		.word	.LC0
 1411 02e4 00000000 		.word	sendValue
 1412 02e8 00000000 		.word	new_pos_set
 1413 02ec 00000000 		.word	new_pos
 1414 02f0 00000000 		.word	pos
 1415 02f4 00000000 		.word	prev_err
 1416 02f8 00000000 		.word	der
 1417 02fc 00000000 		.word	pid_integral
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 33


 1418 0300 00000000 		.word	pid
 1419 0304 00000000 		.word	pulse_temp
 1420 0308 00000000 		.word	offsets
 1421 030c 00000000 		.word	pulse
 1422 0310 00000000 		.word	start_calib
 1423              	.L85:
 322:main.c        ****                 
 323:main.c        ****                 prev_adcValue = adcValue[calib_cyl];
 1424              		.loc 1 323 0
 1425 0314 584A     		ldr	r2, .L89+16
 1426 0316 3B69     		ldr	r3, [r7, #16]
 1427 0318 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 1428 031c FB81     		strh	r3, [r7, #14]	@ movhi
 324:main.c        ****                 if(upper_offset_set==0){
 1429              		.loc 1 324 0
 1430 031e 3B6B     		ldr	r3, [r7, #48]
 1431 0320 002B     		cmp	r3, #0
 1432 0322 25D1     		bne	.L76
 325:main.c        ****                     writePWM(calib_cyl,upper_offset);
 1433              		.loc 1 325 0
 1434 0324 B96A     		ldr	r1, [r7, #40]
 1435 0326 3869     		ldr	r0, [r7, #16]
 1436 0328 FFF7FEFF 		bl	writePWM
 326:main.c        ****                     CyDelay(200);
 1437              		.loc 1 326 0
 1438 032c C820     		movs	r0, #200
 1439 032e FFF7FEFF 		bl	CyDelay
 327:main.c        ****                     diff = abs(prev_adcValue-adcValue[calib_cyl]);
 1440              		.loc 1 327 0
 1441 0332 FB89     		ldrh	r3, [r7, #14]
 1442 0334 5049     		ldr	r1, .L89+16
 1443 0336 3A69     		ldr	r2, [r7, #16]
 1444 0338 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1445 033c 9B1A     		subs	r3, r3, r2
 1446 033e 002B     		cmp	r3, #0
 1447 0340 B8BF     		it	lt
 1448 0342 5B42     		rsblt	r3, r3, #0
 1449 0344 BB81     		strh	r3, [r7, #12]	@ movhi
 328:main.c        ****                     if(diff>10){
 1450              		.loc 1 328 0
 1451 0346 BB89     		ldrh	r3, [r7, #12]
 1452 0348 0A2B     		cmp	r3, #10
 1453 034a 03D9     		bls	.L77
 329:main.c        ****                         upper_check_no ++;;
 1454              		.loc 1 329 0
 1455 034c FB69     		ldr	r3, [r7, #28]
 1456 034e 0133     		adds	r3, r3, #1
 1457 0350 FB61     		str	r3, [r7, #28]
 1458 0352 02E0     		b	.L78
 1459              	.L77:
 330:main.c        ****                     }else{
 331:main.c        ****                         upper_offset = upper_offset + 1;
 1460              		.loc 1 331 0
 1461 0354 BB6A     		ldr	r3, [r7, #40]
 1462 0356 0133     		adds	r3, r3, #1
 1463 0358 BB62     		str	r3, [r7, #40]
 1464              	.L78:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 34


 332:main.c        ****                     }
 333:main.c        ****                     sprintf(sendValue,"UPPER:\tLower Offset: %d \tUpper Offset: %d \t ADC Diff: %d\
 1465              		.loc 1 333 0
 1466 035a BB89     		ldrh	r3, [r7, #12]
 1467 035c 0093     		str	r3, [sp]
 1468 035e BB6A     		ldr	r3, [r7, #40]
 1469 0360 7A6A     		ldr	r2, [r7, #36]
 1470 0362 4649     		ldr	r1, .L89+20
 1471 0364 4648     		ldr	r0, .L89+24
 1472 0366 FFF7FEFF 		bl	sprintf
 334:main.c        ****                     UART_PutString(sendValue);
 1473              		.loc 1 334 0
 1474 036a 4548     		ldr	r0, .L89+24
 1475 036c FFF7FEFF 		bl	UART_PutString
 1476              	.L76:
 335:main.c        ****                 }
 336:main.c        ****                 writePWM(calib_cyl,0);
 1477              		.loc 1 336 0
 1478 0370 0021     		movs	r1, #0
 1479 0372 3869     		ldr	r0, [r7, #16]
 1480 0374 FFF7FEFF 		bl	writePWM
 337:main.c        ****                 CyDelay(500);
 1481              		.loc 1 337 0
 1482 0378 4FF4FA70 		mov	r0, #500
 1483 037c FFF7FEFF 		bl	CyDelay
 338:main.c        ****                 
 339:main.c        ****                 prev_adcValue = adcValue[calib_cyl];
 1484              		.loc 1 339 0
 1485 0380 3D4A     		ldr	r2, .L89+16
 1486 0382 3B69     		ldr	r3, [r7, #16]
 1487 0384 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 1488 0388 FB81     		strh	r3, [r7, #14]	@ movhi
 340:main.c        ****                 if(lower_offset_set==0){
 1489              		.loc 1 340 0
 1490 038a FB6A     		ldr	r3, [r7, #44]
 1491 038c 002B     		cmp	r3, #0
 1492 038e 25D1     		bne	.L79
 341:main.c        ****                     writePWM(calib_cyl,lower_offset);
 1493              		.loc 1 341 0
 1494 0390 796A     		ldr	r1, [r7, #36]
 1495 0392 3869     		ldr	r0, [r7, #16]
 1496 0394 FFF7FEFF 		bl	writePWM
 342:main.c        ****                     CyDelay(200);
 1497              		.loc 1 342 0
 1498 0398 C820     		movs	r0, #200
 1499 039a FFF7FEFF 		bl	CyDelay
 343:main.c        ****                     diff = abs(prev_adcValue-adcValue[calib_cyl]);
 1500              		.loc 1 343 0
 1501 039e FB89     		ldrh	r3, [r7, #14]
 1502 03a0 3549     		ldr	r1, .L89+16
 1503 03a2 3A69     		ldr	r2, [r7, #16]
 1504 03a4 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1505 03a8 9B1A     		subs	r3, r3, r2
 1506 03aa 002B     		cmp	r3, #0
 1507 03ac B8BF     		it	lt
 1508 03ae 5B42     		rsblt	r3, r3, #0
 1509 03b0 BB81     		strh	r3, [r7, #12]	@ movhi
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 35


 344:main.c        ****                     if(diff>10){
 1510              		.loc 1 344 0
 1511 03b2 BB89     		ldrh	r3, [r7, #12]
 1512 03b4 0A2B     		cmp	r3, #10
 1513 03b6 03D9     		bls	.L80
 345:main.c        ****                         lower_check_no++;
 1514              		.loc 1 345 0
 1515 03b8 3B6A     		ldr	r3, [r7, #32]
 1516 03ba 0133     		adds	r3, r3, #1
 1517 03bc 3B62     		str	r3, [r7, #32]
 1518 03be 02E0     		b	.L81
 1519              	.L80:
 346:main.c        ****                     }else{
 347:main.c        ****                         lower_offset = lower_offset - 1;
 1520              		.loc 1 347 0
 1521 03c0 7B6A     		ldr	r3, [r7, #36]
 1522 03c2 013B     		subs	r3, r3, #1
 1523 03c4 7B62     		str	r3, [r7, #36]
 1524              	.L81:
 348:main.c        ****                     }
 349:main.c        ****                     sprintf(sendValue,"LOWER:\tLower Offset: %d \tUpper Offset: %d \t ADC Diff: %d\
 1525              		.loc 1 349 0
 1526 03c6 BB89     		ldrh	r3, [r7, #12]
 1527 03c8 0093     		str	r3, [sp]
 1528 03ca BB6A     		ldr	r3, [r7, #40]
 1529 03cc 7A6A     		ldr	r2, [r7, #36]
 1530 03ce 2D49     		ldr	r1, .L89+28
 1531 03d0 2B48     		ldr	r0, .L89+24
 1532 03d2 FFF7FEFF 		bl	sprintf
 350:main.c        ****                     UART_PutString(sendValue);
 1533              		.loc 1 350 0
 1534 03d6 2A48     		ldr	r0, .L89+24
 1535 03d8 FFF7FEFF 		bl	UART_PutString
 1536              	.L79:
 351:main.c        ****             
 352:main.c        ****                 }
 353:main.c        ****                 
 354:main.c        ****                 if(upper_check_no>2){
 1537              		.loc 1 354 0
 1538 03dc FB69     		ldr	r3, [r7, #28]
 1539 03de 022B     		cmp	r3, #2
 1540 03e0 01DD     		ble	.L82
 355:main.c        ****                     upper_offset_set=1;}
 1541              		.loc 1 355 0
 1542 03e2 0123     		movs	r3, #1
 1543 03e4 3B63     		str	r3, [r7, #48]
 1544              	.L82:
 356:main.c        ****                 if(lower_check_no>2){
 1545              		.loc 1 356 0
 1546 03e6 3B6A     		ldr	r3, [r7, #32]
 1547 03e8 022B     		cmp	r3, #2
 1548 03ea 01DD     		ble	.L83
 357:main.c        ****                     lower_offset_set=1;}
 1549              		.loc 1 357 0
 1550 03ec 0123     		movs	r3, #1
 1551 03ee FB62     		str	r3, [r7, #44]
 1552              	.L83:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 36


 358:main.c        ****                 
 359:main.c        ****                 writePWM(calib_cyl,0);
 1553              		.loc 1 359 0
 1554 03f0 0021     		movs	r1, #0
 1555 03f2 3869     		ldr	r0, [r7, #16]
 1556 03f4 FFF7FEFF 		bl	writePWM
 360:main.c        ****                 CyDelay(500);
 1557              		.loc 1 360 0
 1558 03f8 4FF4FA70 		mov	r0, #500
 1559 03fc FFF7FEFF 		bl	CyDelay
 1560              	.L75:
 321:main.c        ****                 
 1561              		.loc 1 321 0
 1562 0400 3B6B     		ldr	r3, [r7, #48]
 1563 0402 002B     		cmp	r3, #0
 1564 0404 02D1     		bne	.L84
 321:main.c        ****                 
 1565              		.loc 1 321 0 is_stmt 0 discriminator 1
 1566 0406 FB6A     		ldr	r3, [r7, #44]
 1567 0408 002B     		cmp	r3, #0
 1568 040a 83D0     		beq	.L85
 1569              	.L84:
 361:main.c        ****                 
 362:main.c        ****             }
 363:main.c        ****             
 364:main.c        ****             sprintf(sendValue,"Lower Offset: %d \t Upper Offset: %d \n",lower_offset,upper_offset);
 1570              		.loc 1 364 0 is_stmt 1
 1571 040c BB6A     		ldr	r3, [r7, #40]
 1572 040e 7A6A     		ldr	r2, [r7, #36]
 1573 0410 1D49     		ldr	r1, .L89+32
 1574 0412 1B48     		ldr	r0, .L89+24
 1575 0414 FFF7FEFF 		bl	sprintf
 365:main.c        ****             UART_PutString(sendValue);
 1576              		.loc 1 365 0
 1577 0418 1948     		ldr	r0, .L89+24
 1578 041a FFF7FEFF 		bl	UART_PutString
 366:main.c        ****             
 367:main.c        ****             //while(1){CyDelay(100);};
 368:main.c        ****             start_calib = 0;
 1579              		.loc 1 368 0
 1580 041e 1B4B     		ldr	r3, .L89+36
 1581 0420 0022     		movs	r2, #0
 1582 0422 1A60     		str	r2, [r3]
 1583              	.L72:
 1584              	.LBE9:
 369:main.c        ****         }
 370:main.c        ****         CyDelay(10);
 1585              		.loc 1 370 0
 1586 0424 0A20     		movs	r0, #10
 1587 0426 FFF7FEFF 		bl	CyDelay
 371:main.c        ****         time = Timer_1_ReadCounter();
 1588              		.loc 1 371 0
 1589 042a FFF7FEFF 		bl	Timer_1_ReadCounter
 1590 042e 0346     		mov	r3, r0
 1591 0430 1846     		mov	r0, r3
 1592 0432 FFF7FEFF 		bl	__aeabi_ui2d
 1593 0436 0346     		mov	r3, r0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 37


 1594 0438 0C46     		mov	r4, r1
 1595 043a C7E90034 		strd	r3, [r7]
 372:main.c        ****         dt=(double)(65535-time)/1000000;
 1596              		.loc 1 372 0
 1597 043e D7E90023 		ldrd	r2, [r7]
 1598 0442 09A1     		adr	r1, .L89
 1599 0444 D1E90001 		ldrd	r0, [r1]
 1600 0448 FFF7FEFF 		bl	__aeabi_dsub
 1601 044c 0346     		mov	r3, r0
 1602 044e 0C46     		mov	r4, r1
 1603 0450 1846     		mov	r0, r3
 1604 0452 2146     		mov	r1, r4
 1605 0454 06A3     		adr	r3, .L89+8
 1606 0456 D3E90023 		ldrd	r2, [r3]
 1607 045a FFF7FEFF 		bl	__aeabi_ddiv
 1608 045e 0346     		mov	r3, r0
 1609 0460 0C46     		mov	r4, r1
 1610 0462 C7E90E34 		strd	r3, [r7, #56]
 373:main.c        **** 
 374:main.c        ****     }
 1611              		.loc 1 374 0
 1612 0466 08E6     		b	.L86
 1613              	.L90:
 1614              		.align	3
 1615              	.L89:
 1616 0468 00000000 		.word	0
 1617 046c E0FFEF40 		.word	1089470432
 1618 0470 00000000 		.word	0
 1619 0474 80842E41 		.word	1093567616
 1620 0478 00000000 		.word	adcValue
 1621 047c 18000000 		.word	.LC1
 1622 0480 00000000 		.word	sendValue
 1623 0484 54000000 		.word	.LC2
 1624 0488 90000000 		.word	.LC3
 1625 048c 00000000 		.word	start_calib
 1626              		.cfi_endproc
 1627              	.LFE68:
 1628              		.size	main, .-main
 1629              		.text
 1630              	.Letext0:
 1631              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1632              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1633              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1634              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 1635              		.section	.debug_info,"",%progbits
 1636              	.Ldebug_info0:
 1637 0000 C5050000 		.4byte	0x5c5
 1638 0004 0400     		.2byte	0x4
 1639 0006 00000000 		.4byte	.Ldebug_abbrev0
 1640 000a 04       		.byte	0x4
 1641 000b 01       		.uleb128 0x1
 1642 000c 75000000 		.4byte	.LASF60
 1643 0010 0C       		.byte	0xc
 1644 0011 A0020000 		.4byte	.LASF61
 1645 0015 27020000 		.4byte	.LASF62
 1646 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1647 001d 00000000 		.4byte	0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 38


 1648 0021 00000000 		.4byte	.Ldebug_line0
 1649 0025 02       		.uleb128 0x2
 1650 0026 01       		.byte	0x1
 1651 0027 06       		.byte	0x6
 1652 0028 51010000 		.4byte	.LASF0
 1653 002c 02       		.uleb128 0x2
 1654 002d 01       		.byte	0x1
 1655 002e 08       		.byte	0x8
 1656 002f A5010000 		.4byte	.LASF1
 1657 0033 02       		.uleb128 0x2
 1658 0034 02       		.byte	0x2
 1659 0035 05       		.byte	0x5
 1660 0036 50000000 		.4byte	.LASF2
 1661 003a 02       		.uleb128 0x2
 1662 003b 02       		.byte	0x2
 1663 003c 07       		.byte	0x7
 1664 003d 14020000 		.4byte	.LASF3
 1665 0041 03       		.uleb128 0x3
 1666 0042 D9020000 		.4byte	.LASF9
 1667 0046 02       		.byte	0x2
 1668 0047 3F       		.byte	0x3f
 1669 0048 4C000000 		.4byte	0x4c
 1670 004c 02       		.uleb128 0x2
 1671 004d 04       		.byte	0x4
 1672 004e 05       		.byte	0x5
 1673 004f 84010000 		.4byte	.LASF4
 1674 0053 02       		.uleb128 0x2
 1675 0054 04       		.byte	0x4
 1676 0055 07       		.byte	0x7
 1677 0056 AC020000 		.4byte	.LASF5
 1678 005a 02       		.uleb128 0x2
 1679 005b 08       		.byte	0x8
 1680 005c 05       		.byte	0x5
 1681 005d 03010000 		.4byte	.LASF6
 1682 0061 02       		.uleb128 0x2
 1683 0062 08       		.byte	0x8
 1684 0063 07       		.byte	0x7
 1685 0064 E5010000 		.4byte	.LASF7
 1686 0068 04       		.uleb128 0x4
 1687 0069 04       		.byte	0x4
 1688 006a 05       		.byte	0x5
 1689 006b 696E7400 		.ascii	"int\000"
 1690 006f 02       		.uleb128 0x2
 1691 0070 04       		.byte	0x4
 1692 0071 07       		.byte	0x7
 1693 0072 FC010000 		.4byte	.LASF8
 1694 0076 03       		.uleb128 0x3
 1695 0077 82020000 		.4byte	.LASF10
 1696 007b 03       		.byte	0x3
 1697 007c 2C       		.byte	0x2c
 1698 007d 41000000 		.4byte	0x41
 1699 0081 05       		.uleb128 0x5
 1700 0082 36010000 		.4byte	.LASF11
 1701 0086 04       		.byte	0x4
 1702 0087 9201     		.2byte	0x192
 1703 0089 2C000000 		.4byte	0x2c
 1704 008d 05       		.uleb128 0x5
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 39


 1705 008e 8A020000 		.4byte	.LASF12
 1706 0092 04       		.byte	0x4
 1707 0093 9301     		.2byte	0x193
 1708 0095 3A000000 		.4byte	0x3a
 1709 0099 02       		.uleb128 0x2
 1710 009a 04       		.byte	0x4
 1711 009b 04       		.byte	0x4
 1712 009c 2B000000 		.4byte	.LASF13
 1713 00a0 02       		.uleb128 0x2
 1714 00a1 08       		.byte	0x8
 1715 00a2 04       		.byte	0x4
 1716 00a3 3B030000 		.4byte	.LASF14
 1717 00a7 02       		.uleb128 0x2
 1718 00a8 01       		.byte	0x1
 1719 00a9 08       		.byte	0x8
 1720 00aa 73020000 		.4byte	.LASF15
 1721 00ae 05       		.uleb128 0x5
 1722 00af A7020000 		.4byte	.LASF16
 1723 00b3 04       		.byte	0x4
 1724 00b4 3C02     		.2byte	0x23c
 1725 00b6 BA000000 		.4byte	0xba
 1726 00ba 06       		.uleb128 0x6
 1727 00bb 81000000 		.4byte	0x81
 1728 00bf 02       		.uleb128 0x2
 1729 00c0 08       		.byte	0x8
 1730 00c1 04       		.byte	0x4
 1731 00c2 00000000 		.4byte	.LASF17
 1732 00c6 02       		.uleb128 0x2
 1733 00c7 04       		.byte	0x4
 1734 00c8 07       		.byte	0x7
 1735 00c9 67000000 		.4byte	.LASF18
 1736 00cd 07       		.uleb128 0x7
 1737 00ce 66010000 		.4byte	.LASF23
 1738 00d2 01       		.byte	0x1
 1739 00d3 15       		.byte	0x15
 1740 00d4 00000000 		.4byte	.LFB64
 1741 00d8 78000000 		.4byte	.LFE64-.LFB64
 1742 00dc 01       		.uleb128 0x1
 1743 00dd 9C       		.byte	0x9c
 1744 00de FF000000 		.4byte	0xff
 1745 00e2 08       		.uleb128 0x8
 1746 00e3 3C010000 		.4byte	.LASF19
 1747 00e7 01       		.byte	0x1
 1748 00e8 15       		.byte	0x15
 1749 00e9 68000000 		.4byte	0x68
 1750 00ed 02       		.uleb128 0x2
 1751 00ee 91       		.byte	0x91
 1752 00ef 74       		.sleb128 -12
 1753 00f0 08       		.uleb128 0x8
 1754 00f1 30010000 		.4byte	.LASF20
 1755 00f5 01       		.byte	0x1
 1756 00f6 15       		.byte	0x15
 1757 00f7 68000000 		.4byte	0x68
 1758 00fb 02       		.uleb128 0x2
 1759 00fc 91       		.byte	0x91
 1760 00fd 70       		.sleb128 -16
 1761 00fe 00       		.byte	0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 40


 1762 00ff 09       		.uleb128 0x9
 1763 0100 F0020000 		.4byte	.LASF63
 1764 0104 01       		.byte	0x1
 1765 0105 26       		.byte	0x26
 1766 0106 68000000 		.4byte	0x68
 1767 010a 00000000 		.4byte	.LFB65
 1768 010e 54000000 		.4byte	.LFE65-.LFB65
 1769 0112 01       		.uleb128 0x1
 1770 0113 9C       		.byte	0x9c
 1771 0114 43010000 		.4byte	0x143
 1772 0118 08       		.uleb128 0x8
 1773 0119 30010000 		.4byte	.LASF20
 1774 011d 01       		.byte	0x1
 1775 011e 26       		.byte	0x26
 1776 011f 68000000 		.4byte	0x68
 1777 0123 02       		.uleb128 0x2
 1778 0124 91       		.byte	0x91
 1779 0125 74       		.sleb128 -12
 1780 0126 08       		.uleb128 0x8
 1781 0127 E3020000 		.4byte	.LASF21
 1782 012b 01       		.byte	0x1
 1783 012c 26       		.byte	0x26
 1784 012d 68000000 		.4byte	0x68
 1785 0131 02       		.uleb128 0x2
 1786 0132 91       		.byte	0x91
 1787 0133 70       		.sleb128 -16
 1788 0134 08       		.uleb128 0x8
 1789 0135 5A000000 		.4byte	.LASF22
 1790 0139 01       		.byte	0x1
 1791 013a 26       		.byte	0x26
 1792 013b 68000000 		.4byte	0x68
 1793 013f 02       		.uleb128 0x2
 1794 0140 91       		.byte	0x91
 1795 0141 6C       		.sleb128 -20
 1796 0142 00       		.byte	0
 1797 0143 07       		.uleb128 0x7
 1798 0144 07030000 		.4byte	.LASF24
 1799 0148 01       		.byte	0x1
 1800 0149 4F       		.byte	0x4f
 1801 014a 00000000 		.4byte	.LFB66
 1802 014e 50010000 		.4byte	.LFE66-.LFB66
 1803 0152 01       		.uleb128 0x1
 1804 0153 9C       		.byte	0x9c
 1805 0154 CF010000 		.4byte	0x1cf
 1806 0158 0A       		.uleb128 0xa
 1807 0159 06000000 		.4byte	.LBB2
 1808 015d 2E010000 		.4byte	.LBE2-.LBB2
 1809 0161 0B       		.uleb128 0xb
 1810 0162 6300     		.ascii	"c\000"
 1811 0164 01       		.byte	0x1
 1812 0165 50       		.byte	0x50
 1813 0166 68000000 		.4byte	0x68
 1814 016a 02       		.uleb128 0x2
 1815 016b 91       		.byte	0x91
 1816 016c 74       		.sleb128 -12
 1817 016d 0C       		.uleb128 0xc
 1818 016e 16000000 		.4byte	.LBB3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 41


 1819 0172 3A000000 		.4byte	.LBE3-.LBB3
 1820 0176 87010000 		.4byte	0x187
 1821 017a 0B       		.uleb128 0xb
 1822 017b 6A00     		.ascii	"j\000"
 1823 017d 01       		.byte	0x1
 1824 017e 53       		.byte	0x53
 1825 017f 68000000 		.4byte	0x68
 1826 0183 02       		.uleb128 0x2
 1827 0184 91       		.byte	0x91
 1828 0185 70       		.sleb128 -16
 1829 0186 00       		.byte	0
 1830 0187 0C       		.uleb128 0xc
 1831 0188 8E000000 		.4byte	.LBB4
 1832 018c 2C000000 		.4byte	.LBE4-.LBB4
 1833 0190 A1010000 		.4byte	0x1a1
 1834 0194 0B       		.uleb128 0xb
 1835 0195 6A00     		.ascii	"j\000"
 1836 0197 01       		.byte	0x1
 1837 0198 5B       		.byte	0x5b
 1838 0199 68000000 		.4byte	0x68
 1839 019d 02       		.uleb128 0x2
 1840 019e 91       		.byte	0x91
 1841 019f 6C       		.sleb128 -20
 1842 01a0 00       		.byte	0
 1843 01a1 0A       		.uleb128 0xa
 1844 01a2 BA000000 		.4byte	.LBB5
 1845 01a6 60000000 		.4byte	.LBE5-.LBB5
 1846 01aa 0B       		.uleb128 0xb
 1847 01ab 6900     		.ascii	"i\000"
 1848 01ad 01       		.byte	0x1
 1849 01ae 5E       		.byte	0x5e
 1850 01af 68000000 		.4byte	0x68
 1851 01b3 02       		.uleb128 0x2
 1852 01b4 91       		.byte	0x91
 1853 01b5 68       		.sleb128 -24
 1854 01b6 0A       		.uleb128 0xa
 1855 01b7 C0000000 		.4byte	.LBB6
 1856 01bb 4E000000 		.4byte	.LBE6-.LBB6
 1857 01bf 0B       		.uleb128 0xb
 1858 01c0 6A00     		.ascii	"j\000"
 1859 01c2 01       		.byte	0x1
 1860 01c3 5F       		.byte	0x5f
 1861 01c4 68000000 		.4byte	0x68
 1862 01c8 02       		.uleb128 0x2
 1863 01c9 91       		.byte	0x91
 1864 01ca 64       		.sleb128 -28
 1865 01cb 00       		.byte	0
 1866 01cc 00       		.byte	0
 1867 01cd 00       		.byte	0
 1868 01ce 00       		.byte	0
 1869 01cf 07       		.uleb128 0x7
 1870 01d0 0E020000 		.4byte	.LASF25
 1871 01d4 01       		.byte	0x1
 1872 01d5 70       		.byte	0x70
 1873 01d6 00000000 		.4byte	.LFB67
 1874 01da C4020000 		.4byte	.LFE67-.LFB67
 1875 01de 01       		.uleb128 0x1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 42


 1876 01df 9C       		.byte	0x9c
 1877 01e0 18020000 		.4byte	0x218
 1878 01e4 0D       		.uleb128 0xd
 1879 01e5 CB010000 		.4byte	.LASF26
 1880 01e9 01       		.byte	0x1
 1881 01ea 72       		.byte	0x72
 1882 01eb 81000000 		.4byte	0x81
 1883 01ef 02       		.uleb128 0x2
 1884 01f0 91       		.byte	0x91
 1885 01f1 6B       		.sleb128 -21
 1886 01f2 0D       		.uleb128 0xd
 1887 01f3 12030000 		.4byte	.LASF27
 1888 01f7 01       		.byte	0x1
 1889 01f8 73       		.byte	0x73
 1890 01f9 81000000 		.4byte	0x81
 1891 01fd 02       		.uleb128 0x2
 1892 01fe 91       		.byte	0x91
 1893 01ff 6A       		.sleb128 -22
 1894 0200 0A       		.uleb128 0xa
 1895 0201 A4000000 		.4byte	.LBB7
 1896 0205 1C000000 		.4byte	.LBE7-.LBB7
 1897 0209 0B       		.uleb128 0xb
 1898 020a 707000   		.ascii	"pp\000"
 1899 020d 01       		.byte	0x1
 1900 020e 90       		.byte	0x90
 1901 020f 68000000 		.4byte	0x68
 1902 0213 02       		.uleb128 0x2
 1903 0214 91       		.byte	0x91
 1904 0215 6C       		.sleb128 -20
 1905 0216 00       		.byte	0
 1906 0217 00       		.byte	0
 1907 0218 0E       		.uleb128 0xe
 1908 0219 70000000 		.4byte	.LASF28
 1909 021d 01       		.byte	0x1
 1910 021e F8       		.byte	0xf8
 1911 021f 68000000 		.4byte	0x68
 1912 0223 00000000 		.4byte	.LFB68
 1913 0227 90040000 		.4byte	.LFE68-.LFB68
 1914 022b 01       		.uleb128 0x1
 1915 022c 9C       		.byte	0x9c
 1916 022d 28030000 		.4byte	0x328
 1917 0231 0F       		.uleb128 0xf
 1918 0232 647400   		.ascii	"dt\000"
 1919 0235 01       		.byte	0x1
 1920 0236 0D01     		.2byte	0x10d
 1921 0238 A0000000 		.4byte	0xa0
 1922 023c 02       		.uleb128 0x2
 1923 023d 91       		.byte	0x91
 1924 023e 60       		.sleb128 -32
 1925 023f 10       		.uleb128 0x10
 1926 0240 09020000 		.4byte	.LASF29
 1927 0244 01       		.byte	0x1
 1928 0245 0E01     		.2byte	0x10e
 1929 0247 A0000000 		.4byte	0xa0
 1930 024b 03       		.uleb128 0x3
 1931 024c 91       		.byte	0x91
 1932 024d A87F     		.sleb128 -88
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 43


 1933 024f 10       		.uleb128 0x10
 1934 0250 5D010000 		.4byte	.LASF30
 1935 0254 01       		.byte	0x1
 1936 0255 1701     		.2byte	0x117
 1937 0257 68000000 		.4byte	0x68
 1938 025b 03       		.uleb128 0x3
 1939 025c 91       		.byte	0x91
 1940 025d BC7F     		.sleb128 -68
 1941 025f 0C       		.uleb128 0xc
 1942 0260 B2000000 		.4byte	.LBB8
 1943 0264 BE010000 		.4byte	.LBE8-.LBB8
 1944 0268 7C020000 		.4byte	0x27c
 1945 026c 0F       		.uleb128 0xf
 1946 026d 63796C00 		.ascii	"cyl\000"
 1947 0271 01       		.byte	0x1
 1948 0272 1F01     		.2byte	0x11f
 1949 0274 68000000 		.4byte	0x68
 1950 0278 02       		.uleb128 0x2
 1951 0279 91       		.byte	0x91
 1952 027a 5C       		.sleb128 -36
 1953 027b 00       		.byte	0
 1954 027c 0A       		.uleb128 0xa
 1955 027d 7A020000 		.4byte	.LBB9
 1956 0281 AA010000 		.4byte	.LBE9-.LBB9
 1957 0285 10       		.uleb128 0x10
 1958 0286 78020000 		.4byte	.LASF31
 1959 028a 01       		.byte	0x1
 1960 028b 3301     		.2byte	0x133
 1961 028d 68000000 		.4byte	0x68
 1962 0291 03       		.uleb128 0x3
 1963 0292 91       		.byte	0x91
 1964 0293 B87F     		.sleb128 -72
 1965 0295 10       		.uleb128 0x10
 1966 0296 4F030000 		.4byte	.LASF32
 1967 029a 01       		.byte	0x1
 1968 029b 3401     		.2byte	0x134
 1969 029d 68000000 		.4byte	0x68
 1970 02a1 02       		.uleb128 0x2
 1971 02a2 91       		.byte	0x91
 1972 02a3 58       		.sleb128 -40
 1973 02a4 10       		.uleb128 0x10
 1974 02a5 94010000 		.4byte	.LASF33
 1975 02a9 01       		.byte	0x1
 1976 02aa 3501     		.2byte	0x135
 1977 02ac 68000000 		.4byte	0x68
 1978 02b0 02       		.uleb128 0x2
 1979 02b1 91       		.byte	0x91
 1980 02b2 54       		.sleb128 -44
 1981 02b3 10       		.uleb128 0x10
 1982 02b4 77010000 		.4byte	.LASF34
 1983 02b8 01       		.byte	0x1
 1984 02b9 3601     		.2byte	0x136
 1985 02bb 68000000 		.4byte	0x68
 1986 02bf 02       		.uleb128 0x2
 1987 02c0 91       		.byte	0x91
 1988 02c1 50       		.sleb128 -48
 1989 02c2 10       		.uleb128 0x10
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 44


 1990 02c3 BE010000 		.4byte	.LASF35
 1991 02c7 01       		.byte	0x1
 1992 02c8 3701     		.2byte	0x137
 1993 02ca 68000000 		.4byte	0x68
 1994 02ce 02       		.uleb128 0x2
 1995 02cf 91       		.byte	0x91
 1996 02d0 4C       		.sleb128 -52
 1997 02d1 10       		.uleb128 0x10
 1998 02d2 0C000000 		.4byte	.LASF36
 1999 02d6 01       		.byte	0x1
 2000 02d7 3801     		.2byte	0x138
 2001 02d9 68000000 		.4byte	0x68
 2002 02dd 02       		.uleb128 0x2
 2003 02de 91       		.byte	0x91
 2004 02df 48       		.sleb128 -56
 2005 02e0 10       		.uleb128 0x10
 2006 02e1 91020000 		.4byte	.LASF37
 2007 02e5 01       		.byte	0x1
 2008 02e6 3901     		.2byte	0x139
 2009 02e8 68000000 		.4byte	0x68
 2010 02ec 02       		.uleb128 0x2
 2011 02ed 91       		.byte	0x91
 2012 02ee 44       		.sleb128 -60
 2013 02ef 10       		.uleb128 0x10
 2014 02f0 CB020000 		.4byte	.LASF38
 2015 02f4 01       		.byte	0x1
 2016 02f5 3A01     		.2byte	0x13a
 2017 02f7 8D000000 		.4byte	0x8d
 2018 02fb 03       		.uleb128 0x3
 2019 02fc 91       		.byte	0x91
 2020 02fd B67F     		.sleb128 -74
 2021 02ff 10       		.uleb128 0x10
 2022 0300 3A000000 		.4byte	.LASF39
 2023 0304 01       		.byte	0x1
 2024 0305 3B01     		.2byte	0x13b
 2025 0307 8D000000 		.4byte	0x8d
 2026 030b 03       		.uleb128 0x3
 2027 030c 91       		.byte	0x91
 2028 030d B47F     		.sleb128 -76
 2029 030f 0A       		.uleb128 0xa
 2030 0310 A2020000 		.4byte	.LBB10
 2031 0314 1A000000 		.4byte	.LBE10-.LBB10
 2032 0318 0F       		.uleb128 0xf
 2033 0319 6700     		.ascii	"g\000"
 2034 031b 01       		.byte	0x1
 2035 031c 3C01     		.2byte	0x13c
 2036 031e 68000000 		.4byte	0x68
 2037 0322 02       		.uleb128 0x2
 2038 0323 91       		.byte	0x91
 2039 0324 40       		.sleb128 -64
 2040 0325 00       		.byte	0
 2041 0326 00       		.byte	0
 2042 0327 00       		.byte	0
 2043 0328 11       		.uleb128 0x11
 2044 0329 42030000 		.4byte	.LASF40
 2045 032d 05       		.byte	0x5
 2046 032e 1207     		.2byte	0x712
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 45


 2047 0330 34030000 		.4byte	0x334
 2048 0334 06       		.uleb128 0x6
 2049 0335 76000000 		.4byte	0x76
 2050 0339 12       		.uleb128 0x12
 2051 033a 45010000 		.4byte	.LASF41
 2052 033e 01       		.byte	0x1
 2053 033f 13       		.byte	0x13
 2054 0340 81000000 		.4byte	0x81
 2055 0344 05       		.uleb128 0x5
 2056 0345 03       		.byte	0x3
 2057 0346 00000000 		.4byte	errorStatus
 2058 034a 12       		.uleb128 0x12
 2059 034b 21010000 		.4byte	.LASF42
 2060 034f 01       		.byte	0x1
 2061 0350 2F       		.byte	0x2f
 2062 0351 68000000 		.4byte	0x68
 2063 0355 05       		.uleb128 0x5
 2064 0356 03       		.byte	0x3
 2065 0357 00000000 		.4byte	data_read_mode
 2066 035b 13       		.uleb128 0x13
 2067 035c 6B030000 		.4byte	0x36b
 2068 0360 6B030000 		.4byte	0x36b
 2069 0364 14       		.uleb128 0x14
 2070 0365 C6000000 		.4byte	0xc6
 2071 0369 01       		.byte	0x1
 2072 036a 00       		.byte	0
 2073 036b 06       		.uleb128 0x6
 2074 036c 68000000 		.4byte	0x68
 2075 0370 12       		.uleb128 0x12
 2076 0371 3F000000 		.4byte	.LASF43
 2077 0375 01       		.byte	0x1
 2078 0376 31       		.byte	0x31
 2079 0377 81030000 		.4byte	0x381
 2080 037b 05       		.uleb128 0x5
 2081 037c 03       		.byte	0x3
 2082 037d 00000000 		.4byte	new_pos_set
 2083 0381 06       		.uleb128 0x6
 2084 0382 5B030000 		.4byte	0x35b
 2085 0386 13       		.uleb128 0x13
 2086 0387 68000000 		.4byte	0x68
 2087 038b 96030000 		.4byte	0x396
 2088 038f 14       		.uleb128 0x14
 2089 0390 C6000000 		.4byte	0xc6
 2090 0394 01       		.byte	0x1
 2091 0395 00       		.byte	0
 2092 0396 12       		.uleb128 0x12
 2093 0397 D4010000 		.4byte	.LASF44
 2094 039b 01       		.byte	0x1
 2095 039c 32       		.byte	0x32
 2096 039d 86030000 		.4byte	0x386
 2097 03a1 05       		.uleb128 0x5
 2098 03a2 03       		.byte	0x3
 2099 03a3 00000000 		.4byte	new_pos
 2100 03a7 15       		.uleb128 0x15
 2101 03a8 706F7300 		.ascii	"pos\000"
 2102 03ac 01       		.byte	0x1
 2103 03ad 33       		.byte	0x33
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 46


 2104 03ae 86030000 		.4byte	0x386
 2105 03b2 05       		.uleb128 0x5
 2106 03b3 03       		.byte	0x3
 2107 03b4 00000000 		.4byte	pos
 2108 03b8 12       		.uleb128 0x12
 2109 03b9 30010000 		.4byte	.LASF20
 2110 03bd 01       		.byte	0x1
 2111 03be 34       		.byte	0x34
 2112 03bf 86030000 		.4byte	0x386
 2113 03c3 05       		.uleb128 0x5
 2114 03c4 03       		.byte	0x3
 2115 03c5 00000000 		.4byte	pulse
 2116 03c9 12       		.uleb128 0x12
 2117 03ca B3010000 		.4byte	.LASF45
 2118 03ce 01       		.byte	0x1
 2119 03cf 35       		.byte	0x35
 2120 03d0 86030000 		.4byte	0x386
 2121 03d4 05       		.uleb128 0x5
 2122 03d5 03       		.byte	0x3
 2123 03d6 00000000 		.4byte	pulse_temp
 2124 03da 13       		.uleb128 0x13
 2125 03db A0000000 		.4byte	0xa0
 2126 03df EA030000 		.4byte	0x3ea
 2127 03e3 14       		.uleb128 0x14
 2128 03e4 C6000000 		.4byte	0xc6
 2129 03e8 01       		.byte	0x1
 2130 03e9 00       		.byte	0
 2131 03ea 15       		.uleb128 0x15
 2132 03eb 65727200 		.ascii	"err\000"
 2133 03ef 01       		.byte	0x1
 2134 03f0 36       		.byte	0x36
 2135 03f1 DA030000 		.4byte	0x3da
 2136 03f5 05       		.uleb128 0x5
 2137 03f6 03       		.byte	0x3
 2138 03f7 00000000 		.4byte	err
 2139 03fb 13       		.uleb128 0x13
 2140 03fc 8D000000 		.4byte	0x8d
 2141 0400 0B040000 		.4byte	0x40b
 2142 0404 14       		.uleb128 0x14
 2143 0405 C6000000 		.4byte	0xc6
 2144 0409 01       		.byte	0x1
 2145 040a 00       		.byte	0
 2146 040b 12       		.uleb128 0x12
 2147 040c DC010000 		.4byte	.LASF46
 2148 0410 01       		.byte	0x1
 2149 0411 37       		.byte	0x37
 2150 0412 FB030000 		.4byte	0x3fb
 2151 0416 05       		.uleb128 0x5
 2152 0417 03       		.byte	0x3
 2153 0418 00000000 		.4byte	adcValue
 2154 041c 15       		.uleb128 0x15
 2155 041d 64657200 		.ascii	"der\000"
 2156 0421 01       		.byte	0x1
 2157 0422 38       		.byte	0x38
 2158 0423 DA030000 		.4byte	0x3da
 2159 0427 05       		.uleb128 0x5
 2160 0428 03       		.byte	0x3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 47


 2161 0429 00000000 		.4byte	der
 2162 042d 12       		.uleb128 0x12
 2163 042e 31000000 		.4byte	.LASF47
 2164 0432 01       		.byte	0x1
 2165 0433 39       		.byte	0x39
 2166 0434 DA030000 		.4byte	0x3da
 2167 0438 05       		.uleb128 0x5
 2168 0439 03       		.byte	0x3
 2169 043a 00000000 		.4byte	prev_err
 2170 043e 12       		.uleb128 0x12
 2171 043f BE020000 		.4byte	.LASF48
 2172 0443 01       		.byte	0x1
 2173 0444 3A       		.byte	0x3a
 2174 0445 DA030000 		.4byte	0x3da
 2175 0449 05       		.uleb128 0x5
 2176 044a 03       		.byte	0x3
 2177 044b 00000000 		.4byte	pid_integral
 2178 044f 12       		.uleb128 0x12
 2179 0450 1B000000 		.4byte	.LASF49
 2180 0454 01       		.byte	0x1
 2181 0455 3B       		.byte	0x3b
 2182 0456 68000000 		.4byte	0x68
 2183 045a 05       		.uleb128 0x5
 2184 045b 03       		.byte	0x3
 2185 045c 00000000 		.4byte	cyl_set
 2186 0460 13       		.uleb128 0x13
 2187 0461 A7000000 		.4byte	0xa7
 2188 0465 70040000 		.4byte	0x470
 2189 0469 14       		.uleb128 0x14
 2190 046a C6000000 		.4byte	0xc6
 2191 046e 00       		.byte	0
 2192 046f 00       		.byte	0
 2193 0470 12       		.uleb128 0x12
 2194 0471 23000000 		.4byte	.LASF50
 2195 0475 01       		.byte	0x1
 2196 0476 3C       		.byte	0x3c
 2197 0477 60040000 		.4byte	0x460
 2198 047b 05       		.uleb128 0x5
 2199 047c 03       		.byte	0x3
 2200 047d 00000000 		.4byte	cyl_tmp
 2201 0481 13       		.uleb128 0x13
 2202 0482 68000000 		.4byte	0x68
 2203 0486 97040000 		.4byte	0x497
 2204 048a 14       		.uleb128 0x14
 2205 048b C6000000 		.4byte	0xc6
 2206 048f 03       		.byte	0x3
 2207 0490 14       		.uleb128 0x14
 2208 0491 C6000000 		.4byte	0xc6
 2209 0495 01       		.byte	0x1
 2210 0496 00       		.byte	0
 2211 0497 12       		.uleb128 0x12
 2212 0498 6F010000 		.4byte	.LASF51
 2213 049c 01       		.byte	0x1
 2214 049d 3E       		.byte	0x3e
 2215 049e 81040000 		.4byte	0x481
 2216 04a2 05       		.uleb128 0x5
 2217 04a3 03       		.byte	0x3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 48


 2218 04a4 00000000 		.4byte	offsets
 2219 04a8 13       		.uleb128 0x13
 2220 04a9 A7000000 		.4byte	0xa7
 2221 04ad B8040000 		.4byte	0x4b8
 2222 04b1 14       		.uleb128 0x14
 2223 04b2 C6000000 		.4byte	0xc6
 2224 04b6 63       		.byte	0x63
 2225 04b7 00       		.byte	0
 2226 04b8 12       		.uleb128 0x12
 2227 04b9 31030000 		.4byte	.LASF52
 2228 04bd 01       		.byte	0x1
 2229 04be 40       		.byte	0x40
 2230 04bf A8040000 		.4byte	0x4a8
 2231 04c3 05       		.uleb128 0x5
 2232 04c4 03       		.byte	0x3
 2233 04c5 00000000 		.4byte	sendValue
 2234 04c9 13       		.uleb128 0x13
 2235 04ca A7000000 		.4byte	0xa7
 2236 04ce D9040000 		.4byte	0x4d9
 2237 04d2 14       		.uleb128 0x14
 2238 04d3 C6000000 		.4byte	0xc6
 2239 04d7 13       		.byte	0x13
 2240 04d8 00       		.byte	0
 2241 04d9 12       		.uleb128 0x12
 2242 04da 4B000000 		.4byte	.LASF53
 2243 04de 01       		.byte	0x1
 2244 04df 41       		.byte	0x41
 2245 04e0 C9040000 		.4byte	0x4c9
 2246 04e4 05       		.uleb128 0x5
 2247 04e5 03       		.byte	0x3
 2248 04e6 00000000 		.4byte	temp
 2249 04ea 15       		.uleb128 0x15
 2250 04eb 6E6E00   		.ascii	"nn\000"
 2251 04ee 01       		.byte	0x1
 2252 04ef 42       		.byte	0x42
 2253 04f0 68000000 		.4byte	0x68
 2254 04f4 05       		.uleb128 0x5
 2255 04f5 03       		.byte	0x3
 2256 04f6 00000000 		.4byte	nn
 2257 04fa 13       		.uleb128 0x13
 2258 04fb A0000000 		.4byte	0xa0
 2259 04ff 0A050000 		.4byte	0x50a
 2260 0503 14       		.uleb128 0x14
 2261 0504 C6000000 		.4byte	0xc6
 2262 0508 02       		.byte	0x2
 2263 0509 00       		.byte	0
 2264 050a 15       		.uleb128 0x15
 2265 050b 70696400 		.ascii	"pid\000"
 2266 050f 01       		.byte	0x1
 2267 0510 43       		.byte	0x43
 2268 0511 FA040000 		.4byte	0x4fa
 2269 0515 05       		.uleb128 0x5
 2270 0516 03       		.byte	0x3
 2271 0517 00000000 		.4byte	pid
 2272 051b 12       		.uleb128 0x12
 2273 051c 11010000 		.4byte	.LASF54
 2274 0520 01       		.byte	0x1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 49


 2275 0521 45       		.byte	0x45
 2276 0522 A8040000 		.4byte	0x4a8
 2277 0526 05       		.uleb128 0x5
 2278 0527 03       		.byte	0x3
 2279 0528 00000000 		.4byte	help
 2280 052c 15       		.uleb128 0x15
 2281 052d 747400   		.ascii	"tt\000"
 2282 0530 01       		.byte	0x1
 2283 0531 46       		.byte	0x46
 2284 0532 68000000 		.4byte	0x68
 2285 0536 05       		.uleb128 0x5
 2286 0537 03       		.byte	0x3
 2287 0538 00000000 		.4byte	tt
 2288 053c 12       		.uleb128 0x12
 2289 053d FB020000 		.4byte	.LASF55
 2290 0541 01       		.byte	0x1
 2291 0542 48       		.byte	0x48
 2292 0543 68000000 		.4byte	0x68
 2293 0547 05       		.uleb128 0x5
 2294 0548 03       		.byte	0x3
 2295 0549 00000000 		.4byte	start_calib
 2296 054d 12       		.uleb128 0x12
 2297 054e 8D010000 		.4byte	.LASF56
 2298 0552 01       		.byte	0x1
 2299 0553 49       		.byte	0x49
 2300 0554 68000000 		.4byte	0x68
 2301 0558 05       		.uleb128 0x5
 2302 0559 03       		.byte	0x3
 2303 055a 00000000 		.4byte	cyl_no
 2304 055e 13       		.uleb128 0x13
 2305 055f 8D000000 		.4byte	0x8d
 2306 0563 74050000 		.4byte	0x574
 2307 0567 14       		.uleb128 0x14
 2308 0568 C6000000 		.4byte	0xc6
 2309 056c 01       		.byte	0x1
 2310 056d 14       		.uleb128 0x14
 2311 056e C6000000 		.4byte	0xc6
 2312 0572 06       		.byte	0x6
 2313 0573 00       		.byte	0
 2314 0574 12       		.uleb128 0x12
 2315 0575 19030000 		.4byte	.LASF57
 2316 0579 01       		.byte	0x1
 2317 057a 4B       		.byte	0x4b
 2318 057b 5E050000 		.4byte	0x55e
 2319 057f 05       		.uleb128 0x5
 2320 0580 03       		.byte	0x3
 2321 0581 00000000 		.4byte	moving_median
 2322 0585 13       		.uleb128 0x13
 2323 0586 8D000000 		.4byte	0x8d
 2324 058a 95050000 		.4byte	0x595
 2325 058e 14       		.uleb128 0x14
 2326 058f C6000000 		.4byte	0xc6
 2327 0593 06       		.byte	0x6
 2328 0594 00       		.byte	0
 2329 0595 12       		.uleb128 0x12
 2330 0596 27030000 		.4byte	.LASF58
 2331 059a 01       		.byte	0x1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 50


 2332 059b 4C       		.byte	0x4c
 2333 059c 85050000 		.4byte	0x585
 2334 05a0 05       		.uleb128 0x5
 2335 05a1 03       		.byte	0x3
 2336 05a2 00000000 		.4byte	tempArray
 2337 05a6 15       		.uleb128 0x15
 2338 05a7 746D7000 		.ascii	"tmp\000"
 2339 05ab 01       		.byte	0x1
 2340 05ac 4D       		.byte	0x4d
 2341 05ad 8D000000 		.4byte	0x8d
 2342 05b1 05       		.uleb128 0x5
 2343 05b2 03       		.byte	0x3
 2344 05b3 00000000 		.4byte	tmp
 2345 05b7 12       		.uleb128 0x12
 2346 05b8 16010000 		.4byte	.LASF59
 2347 05bc 01       		.byte	0x1
 2348 05bd F7       		.byte	0xf7
 2349 05be 68000000 		.4byte	0x68
 2350 05c2 05       		.uleb128 0x5
 2351 05c3 03       		.byte	0x3
 2352 05c4 00000000 		.4byte	led_switch
 2353 05c8 00       		.byte	0
 2354              		.section	.debug_abbrev,"",%progbits
 2355              	.Ldebug_abbrev0:
 2356 0000 01       		.uleb128 0x1
 2357 0001 11       		.uleb128 0x11
 2358 0002 01       		.byte	0x1
 2359 0003 25       		.uleb128 0x25
 2360 0004 0E       		.uleb128 0xe
 2361 0005 13       		.uleb128 0x13
 2362 0006 0B       		.uleb128 0xb
 2363 0007 03       		.uleb128 0x3
 2364 0008 0E       		.uleb128 0xe
 2365 0009 1B       		.uleb128 0x1b
 2366 000a 0E       		.uleb128 0xe
 2367 000b 55       		.uleb128 0x55
 2368 000c 17       		.uleb128 0x17
 2369 000d 11       		.uleb128 0x11
 2370 000e 01       		.uleb128 0x1
 2371 000f 10       		.uleb128 0x10
 2372 0010 17       		.uleb128 0x17
 2373 0011 00       		.byte	0
 2374 0012 00       		.byte	0
 2375 0013 02       		.uleb128 0x2
 2376 0014 24       		.uleb128 0x24
 2377 0015 00       		.byte	0
 2378 0016 0B       		.uleb128 0xb
 2379 0017 0B       		.uleb128 0xb
 2380 0018 3E       		.uleb128 0x3e
 2381 0019 0B       		.uleb128 0xb
 2382 001a 03       		.uleb128 0x3
 2383 001b 0E       		.uleb128 0xe
 2384 001c 00       		.byte	0
 2385 001d 00       		.byte	0
 2386 001e 03       		.uleb128 0x3
 2387 001f 16       		.uleb128 0x16
 2388 0020 00       		.byte	0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 51


 2389 0021 03       		.uleb128 0x3
 2390 0022 0E       		.uleb128 0xe
 2391 0023 3A       		.uleb128 0x3a
 2392 0024 0B       		.uleb128 0xb
 2393 0025 3B       		.uleb128 0x3b
 2394 0026 0B       		.uleb128 0xb
 2395 0027 49       		.uleb128 0x49
 2396 0028 13       		.uleb128 0x13
 2397 0029 00       		.byte	0
 2398 002a 00       		.byte	0
 2399 002b 04       		.uleb128 0x4
 2400 002c 24       		.uleb128 0x24
 2401 002d 00       		.byte	0
 2402 002e 0B       		.uleb128 0xb
 2403 002f 0B       		.uleb128 0xb
 2404 0030 3E       		.uleb128 0x3e
 2405 0031 0B       		.uleb128 0xb
 2406 0032 03       		.uleb128 0x3
 2407 0033 08       		.uleb128 0x8
 2408 0034 00       		.byte	0
 2409 0035 00       		.byte	0
 2410 0036 05       		.uleb128 0x5
 2411 0037 16       		.uleb128 0x16
 2412 0038 00       		.byte	0
 2413 0039 03       		.uleb128 0x3
 2414 003a 0E       		.uleb128 0xe
 2415 003b 3A       		.uleb128 0x3a
 2416 003c 0B       		.uleb128 0xb
 2417 003d 3B       		.uleb128 0x3b
 2418 003e 05       		.uleb128 0x5
 2419 003f 49       		.uleb128 0x49
 2420 0040 13       		.uleb128 0x13
 2421 0041 00       		.byte	0
 2422 0042 00       		.byte	0
 2423 0043 06       		.uleb128 0x6
 2424 0044 35       		.uleb128 0x35
 2425 0045 00       		.byte	0
 2426 0046 49       		.uleb128 0x49
 2427 0047 13       		.uleb128 0x13
 2428 0048 00       		.byte	0
 2429 0049 00       		.byte	0
 2430 004a 07       		.uleb128 0x7
 2431 004b 2E       		.uleb128 0x2e
 2432 004c 01       		.byte	0x1
 2433 004d 3F       		.uleb128 0x3f
 2434 004e 19       		.uleb128 0x19
 2435 004f 03       		.uleb128 0x3
 2436 0050 0E       		.uleb128 0xe
 2437 0051 3A       		.uleb128 0x3a
 2438 0052 0B       		.uleb128 0xb
 2439 0053 3B       		.uleb128 0x3b
 2440 0054 0B       		.uleb128 0xb
 2441 0055 27       		.uleb128 0x27
 2442 0056 19       		.uleb128 0x19
 2443 0057 11       		.uleb128 0x11
 2444 0058 01       		.uleb128 0x1
 2445 0059 12       		.uleb128 0x12
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 52


 2446 005a 06       		.uleb128 0x6
 2447 005b 40       		.uleb128 0x40
 2448 005c 18       		.uleb128 0x18
 2449 005d 9642     		.uleb128 0x2116
 2450 005f 19       		.uleb128 0x19
 2451 0060 01       		.uleb128 0x1
 2452 0061 13       		.uleb128 0x13
 2453 0062 00       		.byte	0
 2454 0063 00       		.byte	0
 2455 0064 08       		.uleb128 0x8
 2456 0065 05       		.uleb128 0x5
 2457 0066 00       		.byte	0
 2458 0067 03       		.uleb128 0x3
 2459 0068 0E       		.uleb128 0xe
 2460 0069 3A       		.uleb128 0x3a
 2461 006a 0B       		.uleb128 0xb
 2462 006b 3B       		.uleb128 0x3b
 2463 006c 0B       		.uleb128 0xb
 2464 006d 49       		.uleb128 0x49
 2465 006e 13       		.uleb128 0x13
 2466 006f 02       		.uleb128 0x2
 2467 0070 18       		.uleb128 0x18
 2468 0071 00       		.byte	0
 2469 0072 00       		.byte	0
 2470 0073 09       		.uleb128 0x9
 2471 0074 2E       		.uleb128 0x2e
 2472 0075 01       		.byte	0x1
 2473 0076 3F       		.uleb128 0x3f
 2474 0077 19       		.uleb128 0x19
 2475 0078 03       		.uleb128 0x3
 2476 0079 0E       		.uleb128 0xe
 2477 007a 3A       		.uleb128 0x3a
 2478 007b 0B       		.uleb128 0xb
 2479 007c 3B       		.uleb128 0x3b
 2480 007d 0B       		.uleb128 0xb
 2481 007e 27       		.uleb128 0x27
 2482 007f 19       		.uleb128 0x19
 2483 0080 49       		.uleb128 0x49
 2484 0081 13       		.uleb128 0x13
 2485 0082 11       		.uleb128 0x11
 2486 0083 01       		.uleb128 0x1
 2487 0084 12       		.uleb128 0x12
 2488 0085 06       		.uleb128 0x6
 2489 0086 40       		.uleb128 0x40
 2490 0087 18       		.uleb128 0x18
 2491 0088 9742     		.uleb128 0x2117
 2492 008a 19       		.uleb128 0x19
 2493 008b 01       		.uleb128 0x1
 2494 008c 13       		.uleb128 0x13
 2495 008d 00       		.byte	0
 2496 008e 00       		.byte	0
 2497 008f 0A       		.uleb128 0xa
 2498 0090 0B       		.uleb128 0xb
 2499 0091 01       		.byte	0x1
 2500 0092 11       		.uleb128 0x11
 2501 0093 01       		.uleb128 0x1
 2502 0094 12       		.uleb128 0x12
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 53


 2503 0095 06       		.uleb128 0x6
 2504 0096 00       		.byte	0
 2505 0097 00       		.byte	0
 2506 0098 0B       		.uleb128 0xb
 2507 0099 34       		.uleb128 0x34
 2508 009a 00       		.byte	0
 2509 009b 03       		.uleb128 0x3
 2510 009c 08       		.uleb128 0x8
 2511 009d 3A       		.uleb128 0x3a
 2512 009e 0B       		.uleb128 0xb
 2513 009f 3B       		.uleb128 0x3b
 2514 00a0 0B       		.uleb128 0xb
 2515 00a1 49       		.uleb128 0x49
 2516 00a2 13       		.uleb128 0x13
 2517 00a3 02       		.uleb128 0x2
 2518 00a4 18       		.uleb128 0x18
 2519 00a5 00       		.byte	0
 2520 00a6 00       		.byte	0
 2521 00a7 0C       		.uleb128 0xc
 2522 00a8 0B       		.uleb128 0xb
 2523 00a9 01       		.byte	0x1
 2524 00aa 11       		.uleb128 0x11
 2525 00ab 01       		.uleb128 0x1
 2526 00ac 12       		.uleb128 0x12
 2527 00ad 06       		.uleb128 0x6
 2528 00ae 01       		.uleb128 0x1
 2529 00af 13       		.uleb128 0x13
 2530 00b0 00       		.byte	0
 2531 00b1 00       		.byte	0
 2532 00b2 0D       		.uleb128 0xd
 2533 00b3 34       		.uleb128 0x34
 2534 00b4 00       		.byte	0
 2535 00b5 03       		.uleb128 0x3
 2536 00b6 0E       		.uleb128 0xe
 2537 00b7 3A       		.uleb128 0x3a
 2538 00b8 0B       		.uleb128 0xb
 2539 00b9 3B       		.uleb128 0x3b
 2540 00ba 0B       		.uleb128 0xb
 2541 00bb 49       		.uleb128 0x49
 2542 00bc 13       		.uleb128 0x13
 2543 00bd 02       		.uleb128 0x2
 2544 00be 18       		.uleb128 0x18
 2545 00bf 00       		.byte	0
 2546 00c0 00       		.byte	0
 2547 00c1 0E       		.uleb128 0xe
 2548 00c2 2E       		.uleb128 0x2e
 2549 00c3 01       		.byte	0x1
 2550 00c4 3F       		.uleb128 0x3f
 2551 00c5 19       		.uleb128 0x19
 2552 00c6 03       		.uleb128 0x3
 2553 00c7 0E       		.uleb128 0xe
 2554 00c8 3A       		.uleb128 0x3a
 2555 00c9 0B       		.uleb128 0xb
 2556 00ca 3B       		.uleb128 0x3b
 2557 00cb 0B       		.uleb128 0xb
 2558 00cc 49       		.uleb128 0x49
 2559 00cd 13       		.uleb128 0x13
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 54


 2560 00ce 11       		.uleb128 0x11
 2561 00cf 01       		.uleb128 0x1
 2562 00d0 12       		.uleb128 0x12
 2563 00d1 06       		.uleb128 0x6
 2564 00d2 40       		.uleb128 0x40
 2565 00d3 18       		.uleb128 0x18
 2566 00d4 9642     		.uleb128 0x2116
 2567 00d6 19       		.uleb128 0x19
 2568 00d7 01       		.uleb128 0x1
 2569 00d8 13       		.uleb128 0x13
 2570 00d9 00       		.byte	0
 2571 00da 00       		.byte	0
 2572 00db 0F       		.uleb128 0xf
 2573 00dc 34       		.uleb128 0x34
 2574 00dd 00       		.byte	0
 2575 00de 03       		.uleb128 0x3
 2576 00df 08       		.uleb128 0x8
 2577 00e0 3A       		.uleb128 0x3a
 2578 00e1 0B       		.uleb128 0xb
 2579 00e2 3B       		.uleb128 0x3b
 2580 00e3 05       		.uleb128 0x5
 2581 00e4 49       		.uleb128 0x49
 2582 00e5 13       		.uleb128 0x13
 2583 00e6 02       		.uleb128 0x2
 2584 00e7 18       		.uleb128 0x18
 2585 00e8 00       		.byte	0
 2586 00e9 00       		.byte	0
 2587 00ea 10       		.uleb128 0x10
 2588 00eb 34       		.uleb128 0x34
 2589 00ec 00       		.byte	0
 2590 00ed 03       		.uleb128 0x3
 2591 00ee 0E       		.uleb128 0xe
 2592 00ef 3A       		.uleb128 0x3a
 2593 00f0 0B       		.uleb128 0xb
 2594 00f1 3B       		.uleb128 0x3b
 2595 00f2 05       		.uleb128 0x5
 2596 00f3 49       		.uleb128 0x49
 2597 00f4 13       		.uleb128 0x13
 2598 00f5 02       		.uleb128 0x2
 2599 00f6 18       		.uleb128 0x18
 2600 00f7 00       		.byte	0
 2601 00f8 00       		.byte	0
 2602 00f9 11       		.uleb128 0x11
 2603 00fa 34       		.uleb128 0x34
 2604 00fb 00       		.byte	0
 2605 00fc 03       		.uleb128 0x3
 2606 00fd 0E       		.uleb128 0xe
 2607 00fe 3A       		.uleb128 0x3a
 2608 00ff 0B       		.uleb128 0xb
 2609 0100 3B       		.uleb128 0x3b
 2610 0101 05       		.uleb128 0x5
 2611 0102 49       		.uleb128 0x49
 2612 0103 13       		.uleb128 0x13
 2613 0104 3F       		.uleb128 0x3f
 2614 0105 19       		.uleb128 0x19
 2615 0106 3C       		.uleb128 0x3c
 2616 0107 19       		.uleb128 0x19
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 55


 2617 0108 00       		.byte	0
 2618 0109 00       		.byte	0
 2619 010a 12       		.uleb128 0x12
 2620 010b 34       		.uleb128 0x34
 2621 010c 00       		.byte	0
 2622 010d 03       		.uleb128 0x3
 2623 010e 0E       		.uleb128 0xe
 2624 010f 3A       		.uleb128 0x3a
 2625 0110 0B       		.uleb128 0xb
 2626 0111 3B       		.uleb128 0x3b
 2627 0112 0B       		.uleb128 0xb
 2628 0113 49       		.uleb128 0x49
 2629 0114 13       		.uleb128 0x13
 2630 0115 3F       		.uleb128 0x3f
 2631 0116 19       		.uleb128 0x19
 2632 0117 02       		.uleb128 0x2
 2633 0118 18       		.uleb128 0x18
 2634 0119 00       		.byte	0
 2635 011a 00       		.byte	0
 2636 011b 13       		.uleb128 0x13
 2637 011c 01       		.uleb128 0x1
 2638 011d 01       		.byte	0x1
 2639 011e 49       		.uleb128 0x49
 2640 011f 13       		.uleb128 0x13
 2641 0120 01       		.uleb128 0x1
 2642 0121 13       		.uleb128 0x13
 2643 0122 00       		.byte	0
 2644 0123 00       		.byte	0
 2645 0124 14       		.uleb128 0x14
 2646 0125 21       		.uleb128 0x21
 2647 0126 00       		.byte	0
 2648 0127 49       		.uleb128 0x49
 2649 0128 13       		.uleb128 0x13
 2650 0129 2F       		.uleb128 0x2f
 2651 012a 0B       		.uleb128 0xb
 2652 012b 00       		.byte	0
 2653 012c 00       		.byte	0
 2654 012d 15       		.uleb128 0x15
 2655 012e 34       		.uleb128 0x34
 2656 012f 00       		.byte	0
 2657 0130 03       		.uleb128 0x3
 2658 0131 08       		.uleb128 0x8
 2659 0132 3A       		.uleb128 0x3a
 2660 0133 0B       		.uleb128 0xb
 2661 0134 3B       		.uleb128 0x3b
 2662 0135 0B       		.uleb128 0xb
 2663 0136 49       		.uleb128 0x49
 2664 0137 13       		.uleb128 0x13
 2665 0138 3F       		.uleb128 0x3f
 2666 0139 19       		.uleb128 0x19
 2667 013a 02       		.uleb128 0x2
 2668 013b 18       		.uleb128 0x18
 2669 013c 00       		.byte	0
 2670 013d 00       		.byte	0
 2671 013e 00       		.byte	0
 2672              		.section	.debug_aranges,"",%progbits
 2673 0000 3C000000 		.4byte	0x3c
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 56


 2674 0004 0200     		.2byte	0x2
 2675 0006 00000000 		.4byte	.Ldebug_info0
 2676 000a 04       		.byte	0x4
 2677 000b 00       		.byte	0
 2678 000c 0000     		.2byte	0
 2679 000e 0000     		.2byte	0
 2680 0010 00000000 		.4byte	.LFB64
 2681 0014 78000000 		.4byte	.LFE64-.LFB64
 2682 0018 00000000 		.4byte	.LFB65
 2683 001c 54000000 		.4byte	.LFE65-.LFB65
 2684 0020 00000000 		.4byte	.LFB66
 2685 0024 50010000 		.4byte	.LFE66-.LFB66
 2686 0028 00000000 		.4byte	.LFB67
 2687 002c C4020000 		.4byte	.LFE67-.LFB67
 2688 0030 00000000 		.4byte	.LFB68
 2689 0034 90040000 		.4byte	.LFE68-.LFB68
 2690 0038 00000000 		.4byte	0
 2691 003c 00000000 		.4byte	0
 2692              		.section	.debug_ranges,"",%progbits
 2693              	.Ldebug_ranges0:
 2694 0000 00000000 		.4byte	.LFB64
 2695 0004 78000000 		.4byte	.LFE64
 2696 0008 00000000 		.4byte	.LFB65
 2697 000c 54000000 		.4byte	.LFE65
 2698 0010 00000000 		.4byte	.LFB66
 2699 0014 50010000 		.4byte	.LFE66
 2700 0018 00000000 		.4byte	.LFB67
 2701 001c C4020000 		.4byte	.LFE67
 2702 0020 00000000 		.4byte	.LFB68
 2703 0024 90040000 		.4byte	.LFE68
 2704 0028 00000000 		.4byte	0
 2705 002c 00000000 		.4byte	0
 2706              		.section	.debug_line,"",%progbits
 2707              	.Ldebug_line0:
 2708 0000 65030000 		.section	.debug_str,"MS",%progbits,1
 2708      02004C01 
 2708      00000201 
 2708      FB0E0D00 
 2708      01010101 
 2709              	.LASF17:
 2710 0000 6C6F6E67 		.ascii	"long double\000"
 2710      20646F75 
 2710      626C6500 
 2711              	.LASF36:
 2712 000c 6C6F7765 		.ascii	"lower_check_no\000"
 2712      725F6368 
 2712      65636B5F 
 2712      6E6F00
 2713              	.LASF49:
 2714 001b 63796C5F 		.ascii	"cyl_set\000"
 2714      73657400 
 2715              	.LASF50:
 2716 0023 63796C5F 		.ascii	"cyl_tmp\000"
 2716      746D7000 
 2717              	.LASF13:
 2718 002b 666C6F61 		.ascii	"float\000"
 2718      7400
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 57


 2719              	.LASF47:
 2720 0031 70726576 		.ascii	"prev_err\000"
 2720      5F657272 
 2720      00
 2721              	.LASF39:
 2722 003a 64696666 		.ascii	"diff\000"
 2722      00
 2723              	.LASF43:
 2724 003f 6E65775F 		.ascii	"new_pos_set\000"
 2724      706F735F 
 2724      73657400 
 2725              	.LASF53:
 2726 004b 74656D70 		.ascii	"temp\000"
 2726      00
 2727              	.LASF2:
 2728 0050 73686F72 		.ascii	"short int\000"
 2728      7420696E 
 2728      7400
 2729              	.LASF22:
 2730 005a 6F666673 		.ascii	"offset_lower\000"
 2730      65745F6C 
 2730      6F776572 
 2730      00
 2731              	.LASF18:
 2732 0067 73697A65 		.ascii	"sizetype\000"
 2732      74797065 
 2732      00
 2733              	.LASF28:
 2734 0070 6D61696E 		.ascii	"main\000"
 2734      00
 2735              	.LASF60:
 2736 0075 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2736      43313120 
 2736      352E342E 
 2736      31203230 
 2736      31363036 
 2737 00a8 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2737      20726576 
 2737      6973696F 
 2737      6E203233 
 2737      37373135 
 2738 00db 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2738      66756E63 
 2738      74696F6E 
 2738      2D736563 
 2738      74696F6E 
 2739              	.LASF6:
 2740 0103 6C6F6E67 		.ascii	"long long int\000"
 2740      206C6F6E 
 2740      6720696E 
 2740      7400
 2741              	.LASF54:
 2742 0111 68656C70 		.ascii	"help\000"
 2742      00
 2743              	.LASF59:
 2744 0116 6C65645F 		.ascii	"led_switch\000"
 2744      73776974 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 58


 2744      636800
 2745              	.LASF42:
 2746 0121 64617461 		.ascii	"data_read_mode\000"
 2746      5F726561 
 2746      645F6D6F 
 2746      646500
 2747              	.LASF20:
 2748 0130 70756C73 		.ascii	"pulse\000"
 2748      6500
 2749              	.LASF11:
 2750 0136 75696E74 		.ascii	"uint8\000"
 2750      3800
 2751              	.LASF19:
 2752 013c 63796C69 		.ascii	"cylinder\000"
 2752      6E646572 
 2752      00
 2753              	.LASF41:
 2754 0145 6572726F 		.ascii	"errorStatus\000"
 2754      72537461 
 2754      74757300 
 2755              	.LASF0:
 2756 0151 7369676E 		.ascii	"signed char\000"
 2756      65642063 
 2756      68617200 
 2757              	.LASF30:
 2758 015d 73656E64 		.ascii	"send_now\000"
 2758      5F6E6F77 
 2758      00
 2759              	.LASF23:
 2760 0166 77726974 		.ascii	"writePWM\000"
 2760      6550574D 
 2760      00
 2761              	.LASF51:
 2762 016f 6F666673 		.ascii	"offsets\000"
 2762      65747300 
 2763              	.LASF34:
 2764 0177 75707065 		.ascii	"upper_offset\000"
 2764      725F6F66 
 2764      66736574 
 2764      00
 2765              	.LASF4:
 2766 0184 6C6F6E67 		.ascii	"long int\000"
 2766      20696E74 
 2766      00
 2767              	.LASF56:
 2768 018d 63796C5F 		.ascii	"cyl_no\000"
 2768      6E6F00
 2769              	.LASF33:
 2770 0194 6C6F7765 		.ascii	"lower_offset_set\000"
 2770      725F6F66 
 2770      66736574 
 2770      5F736574 
 2770      00
 2771              	.LASF1:
 2772 01a5 756E7369 		.ascii	"unsigned char\000"
 2772      676E6564 
 2772      20636861 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 59


 2772      7200
 2773              	.LASF45:
 2774 01b3 70756C73 		.ascii	"pulse_temp\000"
 2774      655F7465 
 2774      6D7000
 2775              	.LASF35:
 2776 01be 6C6F7765 		.ascii	"lower_offset\000"
 2776      725F6F66 
 2776      66736574 
 2776      00
 2777              	.LASF26:
 2778 01cb 72785374 		.ascii	"rxStatus\000"
 2778      61747573 
 2778      00
 2779              	.LASF44:
 2780 01d4 6E65775F 		.ascii	"new_pos\000"
 2780      706F7300 
 2781              	.LASF46:
 2782 01dc 61646356 		.ascii	"adcValue\000"
 2782      616C7565 
 2782      00
 2783              	.LASF7:
 2784 01e5 6C6F6E67 		.ascii	"long long unsigned int\000"
 2784      206C6F6E 
 2784      6720756E 
 2784      7369676E 
 2784      65642069 
 2785              	.LASF8:
 2786 01fc 756E7369 		.ascii	"unsigned int\000"
 2786      676E6564 
 2786      20696E74 
 2786      00
 2787              	.LASF29:
 2788 0209 74696D65 		.ascii	"time\000"
 2788      00
 2789              	.LASF25:
 2790 020e 52784973 		.ascii	"RxIsr\000"
 2790      7200
 2791              	.LASF3:
 2792 0214 73686F72 		.ascii	"short unsigned int\000"
 2792      7420756E 
 2792      7369676E 
 2792      65642069 
 2792      6E7400
 2793              	.LASF62:
 2794 0227 433A5C55 		.ascii	"C:\\Users\\Andrew\\Documents\\GitHub\\Hydraulic-Mim"
 2794      73657273 
 2794      5C416E64 
 2794      7265775C 
 2794      446F6375 
 2795 0255 69632D41 		.ascii	"ic-Arm\\PSOC_arm_project.cydsn\000"
 2795      726D5C50 
 2795      534F435F 
 2795      61726D5F 
 2795      70726F6A 
 2796              	.LASF15:
 2797 0273 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 60


 2797      00
 2798              	.LASF31:
 2799 0278 63616C69 		.ascii	"calib_cyl\000"
 2799      625F6379 
 2799      6C00
 2800              	.LASF10:
 2801 0282 696E7433 		.ascii	"int32_t\000"
 2801      325F7400 
 2802              	.LASF12:
 2803 028a 75696E74 		.ascii	"uint16\000"
 2803      313600
 2804              	.LASF37:
 2805 0291 75707065 		.ascii	"upper_check_no\000"
 2805      725F6368 
 2805      65636B5F 
 2805      6E6F00
 2806              	.LASF61:
 2807 02a0 6D61696E 		.ascii	"main.c\000"
 2807      2E6300
 2808              	.LASF16:
 2809 02a7 72656738 		.ascii	"reg8\000"
 2809      00
 2810              	.LASF5:
 2811 02ac 6C6F6E67 		.ascii	"long unsigned int\000"
 2811      20756E73 
 2811      69676E65 
 2811      6420696E 
 2811      7400
 2812              	.LASF48:
 2813 02be 7069645F 		.ascii	"pid_integral\000"
 2813      696E7465 
 2813      6772616C 
 2813      00
 2814              	.LASF38:
 2815 02cb 70726576 		.ascii	"prev_adcValue\000"
 2815      5F616463 
 2815      56616C75 
 2815      6500
 2816              	.LASF9:
 2817 02d9 5F5F696E 		.ascii	"__int32_t\000"
 2817      7433325F 
 2817      7400
 2818              	.LASF21:
 2819 02e3 6F666673 		.ascii	"offset_upper\000"
 2819      65745F75 
 2819      70706572 
 2819      00
 2820              	.LASF63:
 2821 02f0 70756C73 		.ascii	"pulseCheck\000"
 2821      65436865 
 2821      636B00
 2822              	.LASF55:
 2823 02fb 73746172 		.ascii	"start_calib\000"
 2823      745F6361 
 2823      6C696200 
 2824              	.LASF24:
 2825 0307 6164635F 		.ascii	"adc_update\000"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cc5gC4rD.s 			page 61


 2825      75706461 
 2825      746500
 2826              	.LASF27:
 2827 0312 72784461 		.ascii	"rxData\000"
 2827      746100
 2828              	.LASF57:
 2829 0319 6D6F7669 		.ascii	"moving_median\000"
 2829      6E675F6D 
 2829      65646961 
 2829      6E00
 2830              	.LASF58:
 2831 0327 74656D70 		.ascii	"tempArray\000"
 2831      41727261 
 2831      7900
 2832              	.LASF52:
 2833 0331 73656E64 		.ascii	"sendValue\000"
 2833      56616C75 
 2833      6500
 2834              	.LASF14:
 2835 033b 646F7562 		.ascii	"double\000"
 2835      6C6500
 2836              	.LASF40:
 2837 0342 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2837      52784275 
 2837      66666572 
 2837      00
 2838              	.LASF32:
 2839 034f 75707065 		.ascii	"upper_offset_set\000"
 2839      725F6F66 
 2839      66736574 
 2839      5F736574 
 2839      00
 2840              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
