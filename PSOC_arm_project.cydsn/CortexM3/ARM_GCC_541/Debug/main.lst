ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.syntax unified
  20              		.global _printf_float
  21              		.thumb
  22              		.syntax unified
  23              		.global	errorStatus
  24              		.bss
  25              		.type	errorStatus, %object
  26              		.size	errorStatus, 1
  27              	errorStatus:
  28 0000 00       		.space	1
  29              		.global	__aeabi_i2d
  30              		.global	__aeabi_dadd
  31              		.global	__aeabi_ddiv
  32              		.global	__aeabi_dmul
  33              		.global	__aeabi_d2uiz
  34              		.section	.text.dutycyclelength,"ax",%progbits
  35              		.align	2
  36              		.global	dutycyclelength
  37              		.thumb
  38              		.thumb_func
  39              		.type	dutycyclelength, %function
  40              	dutycyclelength:
  41              	.LFB64:
  42              		.file 1 "main.c"
   1:main.c        **** 
   2:main.c        **** #include <project.h>
   3:main.c        **** #include <stdio.h>
   4:main.c        **** #include "common.h"
   5:main.c        **** #include <math.h>
   6:main.c        **** #include <stdlib.h>     /* strtod */
   7:main.c        **** 
   8:main.c        **** #define	Frequency 1000000.0			// Frequency of PWMClock
   9:main.c        **** #define	One_ms (Frequency/1000.0)	// 1 ms constant
  10:main.c        **** #define filter_size 7
  11:main.c        **** 
  12:main.c        **** /* Add an explicit reference to the floating point printf library to allow
  13:main.c        **** the usage of floating point conversion specifier */
  14:main.c        **** #if defined (__GNUC__)
  15:main.c        ****     asm (".global _printf_float");
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 2


  16:main.c        **** #endif
  17:main.c        **** 
  18:main.c        **** uint8 errorStatus = 0u;
  19:main.c        **** 
  20:main.c        **** uint16 dutycyclelength(int angle)
  21:main.c        **** {
  43              		.loc 1 21 0
  44              		.cfi_startproc
  45              		@ args = 0, pretend = 0, frame = 16
  46              		@ frame_needed = 1, uses_anonymous_args = 0
  47 0000 90B5     		push	{r4, r7, lr}
  48              		.cfi_def_cfa_offset 12
  49              		.cfi_offset 4, -12
  50              		.cfi_offset 7, -8
  51              		.cfi_offset 14, -4
  52 0002 85B0     		sub	sp, sp, #20
  53              		.cfi_def_cfa_offset 32
  54 0004 00AF     		add	r7, sp, #0
  55              		.cfi_def_cfa_register 7
  56 0006 7860     		str	r0, [r7, #4]
  22:main.c        ****     uint16 pulselength=(uint16)One_ms + ((angle+45.0)/90.0) * One_ms;
  57              		.loc 1 22 0
  58 0008 7868     		ldr	r0, [r7, #4]
  59 000a FFF7FEFF 		bl	__aeabi_i2d
  60 000e 4FF00002 		mov	r2, #0
  61 0012 154B     		ldr	r3, .L3
  62 0014 FFF7FEFF 		bl	__aeabi_dadd
  63 0018 0346     		mov	r3, r0
  64 001a 0C46     		mov	r4, r1
  65 001c 1846     		mov	r0, r3
  66 001e 2146     		mov	r1, r4
  67 0020 4FF00002 		mov	r2, #0
  68 0024 114B     		ldr	r3, .L3+4
  69 0026 FFF7FEFF 		bl	__aeabi_ddiv
  70 002a 0346     		mov	r3, r0
  71 002c 0C46     		mov	r4, r1
  72 002e 1846     		mov	r0, r3
  73 0030 2146     		mov	r1, r4
  74 0032 4FF00002 		mov	r2, #0
  75 0036 0E4B     		ldr	r3, .L3+8
  76 0038 FFF7FEFF 		bl	__aeabi_dmul
  77 003c 0346     		mov	r3, r0
  78 003e 0C46     		mov	r4, r1
  79 0040 1846     		mov	r0, r3
  80 0042 2146     		mov	r1, r4
  81 0044 4FF00002 		mov	r2, #0
  82 0048 094B     		ldr	r3, .L3+8
  83 004a FFF7FEFF 		bl	__aeabi_dadd
  84 004e 0346     		mov	r3, r0
  85 0050 0C46     		mov	r4, r1
  86 0052 1846     		mov	r0, r3
  87 0054 2146     		mov	r1, r4
  88 0056 FFF7FEFF 		bl	__aeabi_d2uiz
  89 005a 0346     		mov	r3, r0
  90 005c FB81     		strh	r3, [r7, #14]	@ movhi
  23:main.c        ****     return pulselength;
  91              		.loc 1 23 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 3


  92 005e FB89     		ldrh	r3, [r7, #14]
  24:main.c        **** }
  93              		.loc 1 24 0
  94 0060 1846     		mov	r0, r3
  95 0062 1437     		adds	r7, r7, #20
  96              		.cfi_def_cfa_offset 12
  97 0064 BD46     		mov	sp, r7
  98              		.cfi_def_cfa_register 13
  99              		@ sp needed
 100 0066 90BD     		pop	{r4, r7, pc}
 101              	.L4:
 102              		.align	2
 103              	.L3:
 104 0068 00804640 		.word	1078362112
 105 006c 00805640 		.word	1079410688
 106 0070 00408F40 		.word	1083129856
 107              		.cfi_endproc
 108              	.LFE64:
 109              		.size	dutycyclelength, .-dutycyclelength
 110              		.global	data_read_mode
 111              		.bss
 112 0001 000000   		.align	2
 113              		.type	data_read_mode, %object
 114              		.size	data_read_mode, 4
 115              	data_read_mode:
 116 0004 00000000 		.space	4
 117              		.global	new_angle
 118              		.align	2
 119              		.type	new_angle, %object
 120              		.size	new_angle, 4
 121              	new_angle:
 122 0008 00000000 		.space	4
 123              		.global	new_pos_set
 124              		.align	2
 125              		.type	new_pos_set, %object
 126              		.size	new_pos_set, 4
 127              	new_pos_set:
 128 000c 00000000 		.space	4
 129              		.global	angle
 130              		.align	2
 131              		.type	angle, %object
 132              		.size	angle, 4
 133              	angle:
 134 0010 00000000 		.space	4
 135              		.global	angletemp
 136              		.align	2
 137              		.type	angletemp, %object
 138              		.size	angletemp, 4
 139              	angletemp:
 140 0014 00000000 		.space	4
 141              		.global	isNegative
 142              		.align	2
 143              		.type	isNegative, %object
 144              		.size	isNegative, 4
 145              	isNegative:
 146 0018 00000000 		.space	4
 147              		.comm	sendValue,100,4
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 4


 148              		.comm	adcValue1,2,2
 149              		.comm	adcValue2,2,2
 150              		.comm	temp,9,4
 151              		.global	nn
 152              		.align	2
 153              		.type	nn, %object
 154              		.size	nn, 4
 155              	nn:
 156 001c 00000000 		.space	4
 157              		.global	pid
 158              		.data
 159              		.align	3
 160              		.type	pid, %object
 161              		.size	pid, 24
 162              	pid:
 163 0000 9A999999 		.word	-1717986918
 164 0004 9999A93F 		.word	1068079513
 165 0008 00000000 		.word	0
 166 000c 00000000 		.word	0
 167 0010 00000000 		.word	0
 168 0014 00000000 		.word	0
 169              		.comm	help,100,4
 170              		.global	tt
 171              		.bss
 172              		.align	2
 173              		.type	tt, %object
 174              		.size	tt, 4
 175              	tt:
 176 0020 00000000 		.space	4
 177              		.global	pos
 178              		.data
 179              		.align	2
 180              		.type	pos, %object
 181              		.size	pos, 4
 182              	pos:
 183 0018 40060000 		.word	1600
 184              		.comm	new_pos,4,4
 185              		.comm	err,8,8
 186              		.global	moving_median
 187              		.bss
 188              		.align	2
 189              		.type	moving_median, %object
 190              		.size	moving_median, 14
 191              	moving_median:
 192 0024 00000000 		.space	14
 192      00000000 
 192      00000000 
 192      0000
 193              		.comm	tempArray,14,4
 194              		.comm	tmp,2,2
 195              		.section	.text.adc_update,"ax",%progbits
 196              		.align	2
 197              		.global	adc_update
 198              		.thumb
 199              		.thumb_func
 200              		.type	adc_update, %function
 201              	adc_update:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 5


 202              	.LFB65:
  25:main.c        **** 
  26:main.c        **** /*******************************************************************************
  27:main.c        **** * Function Name: RxIsr
  28:main.c        **** ********************************************************************************
  29:main.c        **** *
  30:main.c        **** * Summary:
  31:main.c        **** *  Interrupt Service Routine for RX portion of the UART
  32:main.c        **** *
  33:main.c        **** * Parameters:
  34:main.c        **** *  None.
  35:main.c        **** *
  36:main.c        **** * Return:
  37:main.c        **** *  None.
  38:main.c        **** *
  39:main.c        **** *******************************************************************************/
  40:main.c        **** int data_read_mode = 0;
  41:main.c        **** volatile int new_angle = 0;
  42:main.c        **** volatile int new_pos_set = 0;
  43:main.c        **** int angle = 0;
  44:main.c        **** int angletemp=0;
  45:main.c        **** int isNegative=0;
  46:main.c        **** char sendValue[100];
  47:main.c        **** uint16 adcValue1;
  48:main.c        **** uint16 adcValue2;
  49:main.c        **** char temp[9];
  50:main.c        **** int nn=0;
  51:main.c        **** double pid[3] = {0.05,0.000,0};
  52:main.c        **** //double pid[3] = { -2.22,-0.0307,0.0 };
  53:main.c        **** char help[100];
  54:main.c        **** int tt = 0;
  55:main.c        **** int pos=1600;
  56:main.c        **** int new_pos;
  57:main.c        **** double err;
  58:main.c        **** 
  59:main.c        **** 
  60:main.c        **** uint16 moving_median[filter_size] = {0,0,0};
  61:main.c        **** uint16 tempArray[filter_size];
  62:main.c        **** uint16 tmp;
  63:main.c        **** 
  64:main.c        **** CY_ISR(adc_update){
 203              		.loc 1 64 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 16
 206              		@ frame_needed = 1, uses_anonymous_args = 0
 207 0000 80B5     		push	{r7, lr}
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 7, -8
 210              		.cfi_offset 14, -4
 211 0002 84B0     		sub	sp, sp, #16
 212              		.cfi_def_cfa_offset 24
 213 0004 00AF     		add	r7, sp, #0
 214              		.cfi_def_cfa_register 7
 215              	.LBB2:
  65:main.c        ****     for(int j=0;j<filter_size-1;j++){
 216              		.loc 1 65 0
 217 0006 0023     		movs	r3, #0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 6


 218 0008 FB60     		str	r3, [r7, #12]
 219 000a 0BE0     		b	.L6
 220              	.L7:
  66:main.c        ****             moving_median[j] = moving_median[j+1]; 
 221              		.loc 1 66 0 discriminator 3
 222 000c FB68     		ldr	r3, [r7, #12]
 223 000e 0133     		adds	r3, r3, #1
 224 0010 354A     		ldr	r2, .L16
 225 0012 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 226 0016 344A     		ldr	r2, .L16
 227 0018 FB68     		ldr	r3, [r7, #12]
 228 001a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  65:main.c        ****     for(int j=0;j<filter_size-1;j++){
 229              		.loc 1 65 0 discriminator 3
 230 001e FB68     		ldr	r3, [r7, #12]
 231 0020 0133     		adds	r3, r3, #1
 232 0022 FB60     		str	r3, [r7, #12]
 233              	.L6:
  65:main.c        ****     for(int j=0;j<filter_size-1;j++){
 234              		.loc 1 65 0 is_stmt 0 discriminator 1
 235 0024 FB68     		ldr	r3, [r7, #12]
 236 0026 052B     		cmp	r3, #5
 237 0028 F0DD     		ble	.L7
 238              	.LBE2:
  67:main.c        ****     }
  68:main.c        ****     ADC_SAR_1_StartConvert();
 239              		.loc 1 68 0 is_stmt 1
 240 002a FFF7FEFF 		bl	ADC_SAR_1_StartConvert
  69:main.c        ****     ADC_SAR_1_IsEndConversion(ADC_SAR_1_WAIT_FOR_RESULT);
 241              		.loc 1 69 0
 242 002e 0020     		movs	r0, #0
 243 0030 FFF7FEFF 		bl	ADC_SAR_1_IsEndConversion
  70:main.c        ****         
  71:main.c        ****     moving_median[filter_size-1] = ADC_SAR_1_GetResult16();
 244              		.loc 1 71 0
 245 0034 FFF7FEFF 		bl	ADC_SAR_1_GetResult16
 246 0038 0346     		mov	r3, r0
 247 003a 9AB2     		uxth	r2, r3
 248 003c 2A4B     		ldr	r3, .L16
 249 003e 9A81     		strh	r2, [r3, #12]	@ movhi
 250              	.LBB3:
  72:main.c        ****     
  73:main.c        ****     for(int j=0;j<filter_size;j++){
 251              		.loc 1 73 0
 252 0040 0023     		movs	r3, #0
 253 0042 BB60     		str	r3, [r7, #8]
 254 0044 0AE0     		b	.L8
 255              	.L9:
  74:main.c        ****             tempArray[j] = moving_median[j]; 
 256              		.loc 1 74 0 discriminator 3
 257 0046 284A     		ldr	r2, .L16
 258 0048 BB68     		ldr	r3, [r7, #8]
 259 004a 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 260 004e 274A     		ldr	r2, .L16+4
 261 0050 BB68     		ldr	r3, [r7, #8]
 262 0052 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  73:main.c        ****             tempArray[j] = moving_median[j]; 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 7


 263              		.loc 1 73 0 discriminator 3
 264 0056 BB68     		ldr	r3, [r7, #8]
 265 0058 0133     		adds	r3, r3, #1
 266 005a BB60     		str	r3, [r7, #8]
 267              	.L8:
  73:main.c        ****             tempArray[j] = moving_median[j]; 
 268              		.loc 1 73 0 is_stmt 0 discriminator 1
 269 005c BB68     		ldr	r3, [r7, #8]
 270 005e 062B     		cmp	r3, #6
 271 0060 F1DD     		ble	.L9
 272              	.LBE3:
 273              	.LBB4:
  75:main.c        ****     }
  76:main.c        ****     for(int i = 0; i < filter_size; i++){                     //Loop for ascending ordering
 274              		.loc 1 76 0 is_stmt 1
 275 0062 0023     		movs	r3, #0
 276 0064 7B60     		str	r3, [r7, #4]
 277 0066 29E0     		b	.L10
 278              	.L14:
 279              	.LBB5:
  77:main.c        ****     	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 280              		.loc 1 77 0
 281 0068 0023     		movs	r3, #0
 282 006a 3B60     		str	r3, [r7]
 283 006c 20E0     		b	.L11
 284              	.L13:
  78:main.c        ****     	{
  79:main.c        ****     		if (tempArray[j] > tempArray[i])                //Comparing other array elements
 285              		.loc 1 79 0
 286 006e 1F4A     		ldr	r2, .L16+4
 287 0070 3B68     		ldr	r3, [r7]
 288 0072 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 289 0076 1D49     		ldr	r1, .L16+4
 290 0078 7B68     		ldr	r3, [r7, #4]
 291 007a 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 292 007e 9A42     		cmp	r2, r3
 293 0080 13D9     		bls	.L12
  80:main.c        ****     		{
  81:main.c        ****     			tmp = tempArray[i];         //Using temporary variable for storing last value
 294              		.loc 1 81 0
 295 0082 1A4A     		ldr	r2, .L16+4
 296 0084 7B68     		ldr	r3, [r7, #4]
 297 0086 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 298 008a 194B     		ldr	r3, .L16+8
 299 008c 1A80     		strh	r2, [r3]	@ movhi
  82:main.c        ****     			tempArray[i] = tempArray[j];            //replacing value
 300              		.loc 1 82 0
 301 008e 174A     		ldr	r2, .L16+4
 302 0090 3B68     		ldr	r3, [r7]
 303 0092 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 304 0096 154A     		ldr	r2, .L16+4
 305 0098 7B68     		ldr	r3, [r7, #4]
 306 009a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  83:main.c        ****     			tempArray[j] = tmp;             //storing last value
 307              		.loc 1 83 0
 308 009e 144B     		ldr	r3, .L16+8
 309 00a0 1988     		ldrh	r1, [r3]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 8


 310 00a2 124A     		ldr	r2, .L16+4
 311 00a4 3B68     		ldr	r3, [r7]
 312 00a6 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 313              	.L12:
  77:main.c        ****     	{
 314              		.loc 1 77 0 discriminator 2
 315 00aa 3B68     		ldr	r3, [r7]
 316 00ac 0133     		adds	r3, r3, #1
 317 00ae 3B60     		str	r3, [r7]
 318              	.L11:
  77:main.c        ****     	{
 319              		.loc 1 77 0 is_stmt 0 discriminator 1
 320 00b0 3B68     		ldr	r3, [r7]
 321 00b2 062B     		cmp	r3, #6
 322 00b4 DBDD     		ble	.L13
 323              	.LBE5:
  76:main.c        ****     	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 324              		.loc 1 76 0 is_stmt 1 discriminator 2
 325 00b6 7B68     		ldr	r3, [r7, #4]
 326 00b8 0133     		adds	r3, r3, #1
 327 00ba 7B60     		str	r3, [r7, #4]
 328              	.L10:
  76:main.c        ****     	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 329              		.loc 1 76 0 is_stmt 0 discriminator 1
 330 00bc 7B68     		ldr	r3, [r7, #4]
 331 00be 062B     		cmp	r3, #6
 332 00c0 D2DD     		ble	.L14
 333              	.LBE4:
  84:main.c        ****     		}  
  85:main.c        ****     	}
  86:main.c        ****     }
  87:main.c        ****     adcValue1 = tempArray[(filter_size-1)/2];
 334              		.loc 1 87 0 is_stmt 1
 335 00c2 0A4B     		ldr	r3, .L16+4
 336 00c4 DA88     		ldrh	r2, [r3, #6]
 337 00c6 0B4B     		ldr	r3, .L16+12
 338 00c8 1A80     		strh	r2, [r3]	@ movhi
  88:main.c        ****     if(adcValue1<4000){
 339              		.loc 1 88 0
 340 00ca 0A4B     		ldr	r3, .L16+12
 341 00cc 1B88     		ldrh	r3, [r3]
 342 00ce B3F57A6F 		cmp	r3, #4000
 343 00d2 03D2     		bcs	.L15
  89:main.c        ****         adcValue1 = adcValue1;
 344              		.loc 1 89 0
 345 00d4 074B     		ldr	r3, .L16+12
 346 00d6 1A88     		ldrh	r2, [r3]
 347 00d8 064B     		ldr	r3, .L16+12
 348 00da 1A80     		strh	r2, [r3]	@ movhi
 349              	.L15:
  90:main.c        ****     }
  91:main.c        ****     
  92:main.c        ****     update_median_isr_ClearPending();
 350              		.loc 1 92 0
 351 00dc FFF7FEFF 		bl	update_median_isr_ClearPending
  93:main.c        ****     
  94:main.c        **** }
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 9


 352              		.loc 1 94 0
 353 00e0 00BF     		nop
 354 00e2 1037     		adds	r7, r7, #16
 355              		.cfi_def_cfa_offset 8
 356 00e4 BD46     		mov	sp, r7
 357              		.cfi_def_cfa_register 13
 358              		@ sp needed
 359 00e6 80BD     		pop	{r7, pc}
 360              	.L17:
 361              		.align	2
 362              	.L16:
 363 00e8 00000000 		.word	moving_median
 364 00ec 00000000 		.word	tempArray
 365 00f0 00000000 		.word	tmp
 366 00f4 00000000 		.word	adcValue1
 367              		.cfi_endproc
 368              	.LFE65:
 369              		.size	adc_update, .-adc_update
 370              		.section	.rodata
 371              		.align	2
 372              	.LC0:
 373 0000 25303864 		.ascii	"%08d\011%08.0f\011%08d\000"
 373      09253038 
 373      2E306609 
 373      25303864 
 373      00
 374              		.section	.text.RxIsr,"ax",%progbits
 375              		.align	2
 376              		.global	RxIsr
 377              		.thumb
 378              		.thumb_func
 379              		.type	RxIsr, %function
 380              	RxIsr:
 381              	.LFB66:
  95:main.c        **** 
  96:main.c        **** 
  97:main.c        **** CY_ISR(RxIsr)
  98:main.c        **** {
 382              		.loc 1 98 0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 8
 385              		@ frame_needed = 1, uses_anonymous_args = 0
 386 0000 90B5     		push	{r4, r7, lr}
 387              		.cfi_def_cfa_offset 12
 388              		.cfi_offset 4, -12
 389              		.cfi_offset 7, -8
 390              		.cfi_offset 14, -4
 391 0002 87B0     		sub	sp, sp, #28
 392              		.cfi_def_cfa_offset 40
 393 0004 04AF     		add	r7, sp, #16
 394              		.cfi_def_cfa 7, 24
 395              	.L45:
  99:main.c        ****     uint8 rxStatus;         
 100:main.c        ****     uint8 rxData;           
 101:main.c        ****     
 102:main.c        ****     do
 103:main.c        ****     {
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 10


 104:main.c        ****         /* Read receiver status register */
 105:main.c        ****         rxStatus = UART_RXSTATUS_REG;
 396              		.loc 1 105 0
 397 0006 924B     		ldr	r3, .L48
 398 0008 1B78     		ldrb	r3, [r3]
 399 000a FB70     		strb	r3, [r7, #3]
 106:main.c        **** 
 107:main.c        ****         if((rxStatus & (UART_RX_STS_BREAK      | UART_RX_STS_PAR_ERROR |
 108:main.c        ****                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 400              		.loc 1 108 0
 401 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 402 000e 03F01E03 		and	r3, r3, #30
 107:main.c        ****                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 403              		.loc 1 107 0
 404 0012 002B     		cmp	r3, #0
 405 0014 0CD0     		beq	.L19
 109:main.c        ****         {
 110:main.c        ****             /* ERROR handling. */
 111:main.c        ****             errorStatus |= rxStatus & ( UART_RX_STS_BREAK      | UART_RX_STS_PAR_ERROR | 
 406              		.loc 1 111 0
 407 0016 97F90330 		ldrsb	r3, [r7, #3]
 408 001a 03F01E03 		and	r3, r3, #30
 409 001e 5AB2     		sxtb	r2, r3
 410 0020 8C4B     		ldr	r3, .L48+4
 411 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 412 0024 5BB2     		sxtb	r3, r3
 413 0026 1343     		orrs	r3, r3, r2
 414 0028 5BB2     		sxtb	r3, r3
 415 002a DAB2     		uxtb	r2, r3
 416 002c 894B     		ldr	r3, .L48+4
 417 002e 1A70     		strb	r2, [r3]
 418              	.L19:
 112:main.c        ****                                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN);
 113:main.c        ****         }
 114:main.c        ****         
 115:main.c        ****         if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 419              		.loc 1 115 0
 420 0030 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 421 0032 03F02003 		and	r3, r3, #32
 422 0036 002B     		cmp	r3, #0
 423 0038 00F0FF80 		beq	.L20
 116:main.c        ****         {
 117:main.c        ****             /* Read data from the RX data register */
 118:main.c        ****             rxData = UART_RXDATA_REG;
 424              		.loc 1 118 0
 425 003c 864B     		ldr	r3, .L48+8
 426 003e 1B78     		ldrb	r3, [r3]
 427 0040 BB70     		strb	r3, [r7, #2]
 119:main.c        ****             help[tt] = rxData;
 428              		.loc 1 119 0
 429 0042 864B     		ldr	r3, .L48+12
 430 0044 1B68     		ldr	r3, [r3]
 431 0046 8649     		ldr	r1, .L48+16
 432 0048 BA78     		ldrb	r2, [r7, #2]
 433 004a CA54     		strb	r2, [r1, r3]
 120:main.c        ****             tt++;
 434              		.loc 1 120 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 11


 435 004c 834B     		ldr	r3, .L48+12
 436 004e 1B68     		ldr	r3, [r3]
 437 0050 0133     		adds	r3, r3, #1
 438 0052 824A     		ldr	r2, .L48+12
 439 0054 1360     		str	r3, [r2]
 121:main.c        ****             if(tt==99){tt=0;}
 440              		.loc 1 121 0
 441 0056 814B     		ldr	r3, .L48+12
 442 0058 1B68     		ldr	r3, [r3]
 443 005a 632B     		cmp	r3, #99
 444 005c 02D1     		bne	.L21
 445              		.loc 1 121 0 is_stmt 0 discriminator 1
 446 005e 7F4B     		ldr	r3, .L48+12
 447 0060 0022     		movs	r2, #0
 448 0062 1A60     		str	r2, [r3]
 449              	.L21:
 122:main.c        ****             
 123:main.c        ****             switch(data_read_mode)
 450              		.loc 1 123 0 is_stmt 1
 451 0064 7F4B     		ldr	r3, .L48+20
 452 0066 1B68     		ldr	r3, [r3]
 453 0068 052B     		cmp	r3, #5
 454 006a 00F2E680 		bhi	.L20
 455 006e 01A2     		adr	r2, .L24
 456 0070 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 457              		.p2align 2
 458              	.L24:
 459 0074 8D000000 		.word	.L23+1
 460 0078 C9000000 		.word	.L25+1
 461 007c 03010000 		.word	.L26+1
 462 0080 6D010000 		.word	.L27+1
 463 0084 AF010000 		.word	.L28+1
 464 0088 F1010000 		.word	.L29+1
 465              		.p2align 1
 466              	.L23:
 124:main.c        ****             {
 125:main.c        ****                 case 0:
 126:main.c        ****                     if(rxData=='{' )
 467              		.loc 1 126 0
 468 008c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 469 008e 7B2B     		cmp	r3, #123
 470 0090 40F0D080 		bne	.L46
 471              	.LBB6:
 127:main.c        ****                     {
 128:main.c        ****                         for(int pp=1;pp<9;pp++){
 472              		.loc 1 128 0
 473 0094 0123     		movs	r3, #1
 474 0096 7B60     		str	r3, [r7, #4]
 475 0098 07E0     		b	.L31
 476              	.L32:
 129:main.c        ****                             temp[pp] = ' ';
 477              		.loc 1 129 0 discriminator 3
 478 009a 734A     		ldr	r2, .L48+24
 479 009c 7B68     		ldr	r3, [r7, #4]
 480 009e 1344     		add	r3, r3, r2
 481 00a0 2022     		movs	r2, #32
 482 00a2 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 12


 128:main.c        ****                             temp[pp] = ' ';
 483              		.loc 1 128 0 discriminator 3
 484 00a4 7B68     		ldr	r3, [r7, #4]
 485 00a6 0133     		adds	r3, r3, #1
 486 00a8 7B60     		str	r3, [r7, #4]
 487              	.L31:
 128:main.c        ****                             temp[pp] = ' ';
 488              		.loc 1 128 0 is_stmt 0 discriminator 1
 489 00aa 7B68     		ldr	r3, [r7, #4]
 490 00ac 082B     		cmp	r3, #8
 491 00ae F4DD     		ble	.L32
 492              	.LBE6:
 130:main.c        ****                         }
 131:main.c        ****                         temp[0] = '\0';
 493              		.loc 1 131 0 is_stmt 1
 494 00b0 6D4B     		ldr	r3, .L48+24
 495 00b2 0022     		movs	r2, #0
 496 00b4 1A70     		strb	r2, [r3]
 132:main.c        ****                         new_angle = 0;
 497              		.loc 1 132 0
 498 00b6 6D4B     		ldr	r3, .L48+28
 499 00b8 0022     		movs	r2, #0
 500 00ba 1A60     		str	r2, [r3]
 133:main.c        ****                         data_read_mode++;
 501              		.loc 1 133 0
 502 00bc 694B     		ldr	r3, .L48+20
 503 00be 1B68     		ldr	r3, [r3]
 504 00c0 0133     		adds	r3, r3, #1
 505 00c2 684A     		ldr	r2, .L48+20
 506 00c4 1360     		str	r3, [r2]
 134:main.c        ****                     }
 135:main.c        ****                 break;
 507              		.loc 1 135 0
 508 00c6 B5E0     		b	.L46
 509              	.L25:
 136:main.c        ****                 case 1:
 137:main.c        ****                     if(rxData=='x'){
 510              		.loc 1 137 0
 511 00c8 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 512 00ca 782B     		cmp	r3, #120
 513 00cc 03D1     		bne	.L33
 138:main.c        ****                         data_read_mode = 2;}
 514              		.loc 1 138 0
 515 00ce 654B     		ldr	r3, .L48+20
 516 00d0 0222     		movs	r2, #2
 517 00d2 1A60     		str	r2, [r3]
 139:main.c        ****                     else if(rxData=='p'){
 140:main.c        ****                         data_read_mode = 3;}
 141:main.c        ****                     else if(rxData=='i'){
 142:main.c        ****                         data_read_mode = 4;}
 143:main.c        ****                     else if(rxData=='d'){
 144:main.c        ****                         data_read_mode = 5;}
 145:main.c        ****                 break;
 518              		.loc 1 145 0
 519 00d4 B0E0     		b	.L47
 520              	.L33:
 139:main.c        ****                     else if(rxData=='p'){
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 13


 521              		.loc 1 139 0
 522 00d6 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 523 00d8 702B     		cmp	r3, #112
 524 00da 03D1     		bne	.L35
 140:main.c        ****                     else if(rxData=='i'){
 525              		.loc 1 140 0
 526 00dc 614B     		ldr	r3, .L48+20
 527 00de 0322     		movs	r2, #3
 528 00e0 1A60     		str	r2, [r3]
 529              		.loc 1 145 0
 530 00e2 A9E0     		b	.L47
 531              	.L35:
 141:main.c        ****                         data_read_mode = 4;}
 532              		.loc 1 141 0
 533 00e4 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 534 00e6 692B     		cmp	r3, #105
 535 00e8 03D1     		bne	.L36
 142:main.c        ****                     else if(rxData=='d'){
 536              		.loc 1 142 0
 537 00ea 5E4B     		ldr	r3, .L48+20
 538 00ec 0422     		movs	r2, #4
 539 00ee 1A60     		str	r2, [r3]
 540              		.loc 1 145 0
 541 00f0 A2E0     		b	.L47
 542              	.L36:
 143:main.c        ****                         data_read_mode = 5;}
 543              		.loc 1 143 0
 544 00f2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 545 00f4 642B     		cmp	r3, #100
 546 00f6 40F09F80 		bne	.L47
 144:main.c        ****                 break;
 547              		.loc 1 144 0
 548 00fa 5A4B     		ldr	r3, .L48+20
 549 00fc 0522     		movs	r2, #5
 550 00fe 1A60     		str	r2, [r3]
 551              		.loc 1 145 0
 552 0100 9AE0     		b	.L47
 553              	.L26:
 146:main.c        ****                 case 2:
 147:main.c        ****                     if(rxData != '}'){
 554              		.loc 1 147 0
 555 0102 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 556 0104 7D2B     		cmp	r3, #125
 557 0106 0AD0     		beq	.L37
 148:main.c        ****                         temp[nn] = rxData;
 558              		.loc 1 148 0
 559 0108 594B     		ldr	r3, .L48+32
 560 010a 1B68     		ldr	r3, [r3]
 561 010c 5649     		ldr	r1, .L48+24
 562 010e BA78     		ldrb	r2, [r7, #2]
 563 0110 CA54     		strb	r2, [r1, r3]
 149:main.c        ****                         nn++;
 564              		.loc 1 149 0
 565 0112 574B     		ldr	r3, .L48+32
 566 0114 1B68     		ldr	r3, [r3]
 567 0116 0133     		adds	r3, r3, #1
 568 0118 554A     		ldr	r2, .L48+32
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 14


 569 011a 1360     		str	r3, [r2]
 150:main.c        ****                     }
 151:main.c        ****                     else {
 152:main.c        ****                         new_pos = (int) strtol(temp, (char **)NULL, 10);
 153:main.c        ****                         new_pos_set = 1;
 154:main.c        ****                         nn=0; 
 155:main.c        ****                     
 156:main.c        ****                         sprintf(sendValue,"%08d\t%08.0f\t%08d",adcValue1,err,angletemp);
 157:main.c        ****                         UART_PutString(sendValue);
 158:main.c        ****                         temp[0] = '\0';
 159:main.c        ****                         
 160:main.c        ****                         data_read_mode = 0;
 161:main.c        ****                     }
 162:main.c        ****                   
 163:main.c        ****                 break;
 570              		.loc 1 163 0
 571 011c 8DE0     		b	.L20
 572              	.L37:
 152:main.c        ****                         new_pos_set = 1;
 573              		.loc 1 152 0
 574 011e 0A22     		movs	r2, #10
 575 0120 0021     		movs	r1, #0
 576 0122 5148     		ldr	r0, .L48+24
 577 0124 FFF7FEFF 		bl	strtol
 578 0128 0246     		mov	r2, r0
 579 012a 524B     		ldr	r3, .L48+36
 580 012c 1A60     		str	r2, [r3]
 153:main.c        ****                         nn=0; 
 581              		.loc 1 153 0
 582 012e 524B     		ldr	r3, .L48+40
 583 0130 0122     		movs	r2, #1
 584 0132 1A60     		str	r2, [r3]
 154:main.c        ****                     
 585              		.loc 1 154 0
 586 0134 4E4B     		ldr	r3, .L48+32
 587 0136 0022     		movs	r2, #0
 588 0138 1A60     		str	r2, [r3]
 156:main.c        ****                         UART_PutString(sendValue);
 589              		.loc 1 156 0
 590 013a 504B     		ldr	r3, .L48+44
 591 013c 1B88     		ldrh	r3, [r3]
 592 013e 1946     		mov	r1, r3
 593 0140 4F4B     		ldr	r3, .L48+48
 594 0142 18CB     		ldmia	r3, {r3-r4}
 595 0144 4F4A     		ldr	r2, .L48+52
 596 0146 1268     		ldr	r2, [r2]
 597 0148 0292     		str	r2, [sp, #8]
 598 014a CDE90034 		strd	r3, [sp]
 599 014e 0A46     		mov	r2, r1
 600 0150 4D49     		ldr	r1, .L48+56
 601 0152 4E48     		ldr	r0, .L48+60
 602 0154 FFF7FEFF 		bl	sprintf
 157:main.c        ****                         temp[0] = '\0';
 603              		.loc 1 157 0
 604 0158 4C48     		ldr	r0, .L48+60
 605 015a FFF7FEFF 		bl	UART_PutString
 158:main.c        ****                         
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 15


 606              		.loc 1 158 0
 607 015e 424B     		ldr	r3, .L48+24
 608 0160 0022     		movs	r2, #0
 609 0162 1A70     		strb	r2, [r3]
 160:main.c        ****                     }
 610              		.loc 1 160 0
 611 0164 3F4B     		ldr	r3, .L48+20
 612 0166 0022     		movs	r2, #0
 613 0168 1A60     		str	r2, [r3]
 614              		.loc 1 163 0
 615 016a 66E0     		b	.L20
 616              	.L27:
 164:main.c        ****                 case 3:
 165:main.c        ****                     if(rxData != '}'){
 617              		.loc 1 165 0
 618 016c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 619 016e 7D2B     		cmp	r3, #125
 620 0170 0AD0     		beq	.L39
 166:main.c        ****                         temp[nn] = rxData;
 621              		.loc 1 166 0
 622 0172 3F4B     		ldr	r3, .L48+32
 623 0174 1B68     		ldr	r3, [r3]
 624 0176 3C49     		ldr	r1, .L48+24
 625 0178 BA78     		ldrb	r2, [r7, #2]
 626 017a CA54     		strb	r2, [r1, r3]
 167:main.c        ****                         nn++;
 627              		.loc 1 167 0
 628 017c 3C4B     		ldr	r3, .L48+32
 629 017e 1B68     		ldr	r3, [r3]
 630 0180 0133     		adds	r3, r3, #1
 631 0182 3B4A     		ldr	r2, .L48+32
 632 0184 1360     		str	r3, [r2]
 168:main.c        ****                     }
 169:main.c        ****                     else {
 170:main.c        ****                         pid[0] = strtod(temp, NULL);
 171:main.c        ****                         nn=0;
 172:main.c        ****                         temp[0] = '\0';
 173:main.c        ****                         data_read_mode = 0;
 174:main.c        ****                     }
 175:main.c        ****                     
 176:main.c        ****                 break;
 633              		.loc 1 176 0
 634 0186 58E0     		b	.L20
 635              	.L39:
 170:main.c        ****                         nn=0;
 636              		.loc 1 170 0
 637 0188 0021     		movs	r1, #0
 638 018a 3748     		ldr	r0, .L48+24
 639 018c FFF7FEFF 		bl	strtod
 640 0190 0346     		mov	r3, r0
 641 0192 0C46     		mov	r4, r1
 642 0194 3E4A     		ldr	r2, .L48+64
 643 0196 C2E90034 		strd	r3, [r2]
 171:main.c        ****                         temp[0] = '\0';
 644              		.loc 1 171 0
 645 019a 354B     		ldr	r3, .L48+32
 646 019c 0022     		movs	r2, #0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 16


 647 019e 1A60     		str	r2, [r3]
 172:main.c        ****                         data_read_mode = 0;
 648              		.loc 1 172 0
 649 01a0 314B     		ldr	r3, .L48+24
 650 01a2 0022     		movs	r2, #0
 651 01a4 1A70     		strb	r2, [r3]
 173:main.c        ****                     }
 652              		.loc 1 173 0
 653 01a6 2F4B     		ldr	r3, .L48+20
 654 01a8 0022     		movs	r2, #0
 655 01aa 1A60     		str	r2, [r3]
 656              		.loc 1 176 0
 657 01ac 45E0     		b	.L20
 658              	.L28:
 177:main.c        ****                 case 4:
 178:main.c        ****                     if(rxData != '}'){
 659              		.loc 1 178 0
 660 01ae BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 661 01b0 7D2B     		cmp	r3, #125
 662 01b2 0AD0     		beq	.L41
 179:main.c        ****                         temp[nn] = rxData;
 663              		.loc 1 179 0
 664 01b4 2E4B     		ldr	r3, .L48+32
 665 01b6 1B68     		ldr	r3, [r3]
 666 01b8 2B49     		ldr	r1, .L48+24
 667 01ba BA78     		ldrb	r2, [r7, #2]
 668 01bc CA54     		strb	r2, [r1, r3]
 180:main.c        ****                         nn++;
 669              		.loc 1 180 0
 670 01be 2C4B     		ldr	r3, .L48+32
 671 01c0 1B68     		ldr	r3, [r3]
 672 01c2 0133     		adds	r3, r3, #1
 673 01c4 2A4A     		ldr	r2, .L48+32
 674 01c6 1360     		str	r3, [r2]
 181:main.c        ****                     }
 182:main.c        ****                     else {
 183:main.c        ****                         pid[1] = strtod(temp, NULL);
 184:main.c        ****                         nn=0;
 185:main.c        ****                         temp[0] = '\0';
 186:main.c        ****                         data_read_mode = 0;
 187:main.c        ****                     }
 188:main.c        ****                     
 189:main.c        ****                 break;
 675              		.loc 1 189 0
 676 01c8 37E0     		b	.L20
 677              	.L41:
 183:main.c        ****                         nn=0;
 678              		.loc 1 183 0
 679 01ca 0021     		movs	r1, #0
 680 01cc 2648     		ldr	r0, .L48+24
 681 01ce FFF7FEFF 		bl	strtod
 682 01d2 0346     		mov	r3, r0
 683 01d4 0C46     		mov	r4, r1
 684 01d6 2E4A     		ldr	r2, .L48+64
 685 01d8 C2E90234 		strd	r3, [r2, #8]
 184:main.c        ****                         temp[0] = '\0';
 686              		.loc 1 184 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 17


 687 01dc 244B     		ldr	r3, .L48+32
 688 01de 0022     		movs	r2, #0
 689 01e0 1A60     		str	r2, [r3]
 185:main.c        ****                         data_read_mode = 0;
 690              		.loc 1 185 0
 691 01e2 214B     		ldr	r3, .L48+24
 692 01e4 0022     		movs	r2, #0
 693 01e6 1A70     		strb	r2, [r3]
 186:main.c        ****                     }
 694              		.loc 1 186 0
 695 01e8 1E4B     		ldr	r3, .L48+20
 696 01ea 0022     		movs	r2, #0
 697 01ec 1A60     		str	r2, [r3]
 698              		.loc 1 189 0
 699 01ee 24E0     		b	.L20
 700              	.L29:
 190:main.c        ****                 case 5:
 191:main.c        ****                     if(rxData != '}'){
 701              		.loc 1 191 0
 702 01f0 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 703 01f2 7D2B     		cmp	r3, #125
 704 01f4 0AD0     		beq	.L43
 192:main.c        ****                         temp[nn] = rxData;
 705              		.loc 1 192 0
 706 01f6 1E4B     		ldr	r3, .L48+32
 707 01f8 1B68     		ldr	r3, [r3]
 708 01fa 1B49     		ldr	r1, .L48+24
 709 01fc BA78     		ldrb	r2, [r7, #2]
 710 01fe CA54     		strb	r2, [r1, r3]
 193:main.c        ****                         nn++;
 711              		.loc 1 193 0
 712 0200 1B4B     		ldr	r3, .L48+32
 713 0202 1B68     		ldr	r3, [r3]
 714 0204 0133     		adds	r3, r3, #1
 715 0206 1A4A     		ldr	r2, .L48+32
 716 0208 1360     		str	r3, [r2]
 194:main.c        ****                     }
 195:main.c        ****                     else {
 196:main.c        ****                         pid[2] = strtod(temp, NULL);
 197:main.c        ****                         nn=0;
 198:main.c        ****                         temp[0] = '\0';
 199:main.c        ****                         data_read_mode = 0;
 200:main.c        ****                     }
 201:main.c        ****                     
 202:main.c        ****                 break;
 717              		.loc 1 202 0
 718 020a 16E0     		b	.L20
 719              	.L43:
 196:main.c        ****                         nn=0;
 720              		.loc 1 196 0
 721 020c 0021     		movs	r1, #0
 722 020e 1648     		ldr	r0, .L48+24
 723 0210 FFF7FEFF 		bl	strtod
 724 0214 0346     		mov	r3, r0
 725 0216 0C46     		mov	r4, r1
 726 0218 1D4A     		ldr	r2, .L48+64
 727 021a C2E90434 		strd	r3, [r2, #16]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 18


 197:main.c        ****                         temp[0] = '\0';
 728              		.loc 1 197 0
 729 021e 144B     		ldr	r3, .L48+32
 730 0220 0022     		movs	r2, #0
 731 0222 1A60     		str	r2, [r3]
 198:main.c        ****                         data_read_mode = 0;
 732              		.loc 1 198 0
 733 0224 104B     		ldr	r3, .L48+24
 734 0226 0022     		movs	r2, #0
 735 0228 1A70     		strb	r2, [r3]
 199:main.c        ****                     }
 736              		.loc 1 199 0
 737 022a 0E4B     		ldr	r3, .L48+20
 738 022c 0022     		movs	r2, #0
 739 022e 1A60     		str	r2, [r3]
 740              		.loc 1 202 0
 741 0230 00BF     		nop
 742 0232 02E0     		b	.L20
 743              	.L46:
 135:main.c        ****                 case 1:
 744              		.loc 1 135 0
 745 0234 00BF     		nop
 746 0236 00E0     		b	.L20
 747              	.L47:
 145:main.c        ****                 case 2:
 748              		.loc 1 145 0
 749 0238 00BF     		nop
 750              	.L20:
 203:main.c        ****             }
 204:main.c        ****             
 205:main.c        ****             if(errorStatus == 0u)
 206:main.c        ****             {
 207:main.c        ****                 /* Send data backward */
 208:main.c        ****                 //UART_TXDATA_REG = rxData;
 209:main.c        ****             }
 210:main.c        ****         }
 211:main.c        ****     }while((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u);
 751              		.loc 1 211 0
 752 023a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 753 023c 03F02003 		and	r3, r3, #32
 754 0240 002B     		cmp	r3, #0
 755 0242 7FF4E0AE 		bne	.L45
 212:main.c        **** 
 213:main.c        **** }
 756              		.loc 1 213 0
 757 0246 00BF     		nop
 758 0248 0C37     		adds	r7, r7, #12
 759              		.cfi_def_cfa_offset 12
 760 024a BD46     		mov	sp, r7
 761              		.cfi_def_cfa_register 13
 762              		@ sp needed
 763 024c 90BD     		pop	{r4, r7, pc}
 764              	.L49:
 765 024e 00BF     		.align	2
 766              	.L48:
 767 0250 6A650040 		.word	1073767786
 768 0254 00000000 		.word	errorStatus
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 19


 769 0258 4A650040 		.word	1073767754
 770 025c 00000000 		.word	tt
 771 0260 00000000 		.word	help
 772 0264 00000000 		.word	data_read_mode
 773 0268 00000000 		.word	temp
 774 026c 00000000 		.word	new_angle
 775 0270 00000000 		.word	nn
 776 0274 00000000 		.word	new_pos
 777 0278 00000000 		.word	new_pos_set
 778 027c 00000000 		.word	adcValue1
 779 0280 00000000 		.word	err
 780 0284 00000000 		.word	angletemp
 781 0288 00000000 		.word	.LC0
 782 028c 00000000 		.word	sendValue
 783 0290 00000000 		.word	pid
 784              		.cfi_endproc
 785              	.LFE66:
 786              		.size	RxIsr, .-RxIsr
 787              		.global	led_switch
 788              		.bss
 789 0032 0000     		.align	2
 790              		.type	led_switch, %object
 791              		.size	led_switch, 4
 792              	led_switch:
 793 0034 00000000 		.space	4
 794              		.global	__aeabi_dsub
 795              		.global	__aeabi_d2iz
 796              		.global	__aeabi_ui2d
 797              		.section	.text.main,"ax",%progbits
 798              		.align	2
 799              		.global	main
 800              		.thumb
 801              		.thumb_func
 802              		.type	main, %function
 803              	main:
 804              	.LFB67:
 214:main.c        ****     
 215:main.c        **** 
 216:main.c        **** /*******************************************************************************
 217:main.c        **** * Function Name: main()
 218:main.c        **** ********************************************************************************
 219:main.c        **** * Summary:
 220:main.c        **** *  Main function for the project.
 221:main.c        **** *
 222:main.c        **** * Theory:
 223:main.c        **** *  The function starts UART and interrupt components.
 224:main.c        **** *
 225:main.c        **** *******************************************************************************/
 226:main.c        **** int led_switch = 0;
 227:main.c        **** int main()
 228:main.c        **** {
 805              		.loc 1 228 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 64
 808              		@ frame_needed = 1, uses_anonymous_args = 0
 809 0000 B0B5     		push	{r4, r5, r7, lr}
 810              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 20


 811              		.cfi_offset 4, -16
 812              		.cfi_offset 5, -12
 813              		.cfi_offset 7, -8
 814              		.cfi_offset 14, -4
 815 0002 94B0     		sub	sp, sp, #80
 816              		.cfi_def_cfa_offset 96
 817 0004 04AF     		add	r7, sp, #16
 818              		.cfi_def_cfa 7, 80
 229:main.c        ****     
 230:main.c        ****     
 231:main.c        ****     //PWM variables
 232:main.c        **** 
 233:main.c        ****     PWM_1_Start();
 819              		.loc 1 233 0
 820 0006 FFF7FEFF 		bl	PWM_1_Start
 234:main.c        ****     ADC_SAR_1_Start(); 
 821              		.loc 1 234 0
 822 000a FFF7FEFF 		bl	ADC_SAR_1_Start
 235:main.c        ****     
 236:main.c        ****     //ADC_SAR_1_StartConvert(); 
 237:main.c        ****     //ADC_SAR_2_Start(); 
 238:main.c        ****     //ADC_SAR_2_StartConvert(); 
 239:main.c        ****     
 240:main.c        ****     uint8 button = 0u;
 823              		.loc 1 240 0
 824 000e 0023     		movs	r3, #0
 825 0010 87F82730 		strb	r3, [r7, #39]
 241:main.c        ****     uint8 buttonPre = 0u;
 826              		.loc 1 241 0
 827 0014 0023     		movs	r3, #0
 828 0016 87F82630 		strb	r3, [r7, #38]
 242:main.c        ****     
 243:main.c        ****     LED_Write(LED_OFF);     /* Clear LED */
 829              		.loc 1 243 0
 830 001a 0020     		movs	r0, #0
 831 001c FFF7FEFF 		bl	LED_Write
 244:main.c        **** 
 245:main.c        ****     UART_Start();           /* Start communication component */
 832              		.loc 1 245 0
 833 0020 FFF7FEFF 		bl	UART_Start
 246:main.c        **** 
 247:main.c        **** #if(INTERRUPT_CODE_ENABLED == ENABLED)
 248:main.c        ****     isr_rx_StartEx(RxIsr);
 834              		.loc 1 248 0
 835 0024 9648     		ldr	r0, .L58+24
 836 0026 FFF7FEFF 		bl	isr_rx_StartEx
 249:main.c        ****     update_median_isr_StartEx(adc_update);
 837              		.loc 1 249 0
 838 002a 9648     		ldr	r0, .L58+28
 839 002c FFF7FEFF 		bl	update_median_isr_StartEx
 250:main.c        **** #endif /* INTERRUPT_CODE_ENABLED == ENABLED */
 251:main.c        ****     
 252:main.c        ****     CyGlobalIntEnable;      /* Enable global interrupts. */
 840              		.loc 1 252 0
 841              		.syntax unified
 842              	@ 252 "main.c" 1
 843 0030 62B6     		CPSIE   i
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 21


 844              	@ 0 "" 2
 253:main.c        ****     
 254:main.c        **** 
 255:main.c        ****     angle = -89;
 845              		.loc 1 255 0
 846              		.thumb
 847              		.syntax unified
 848 0032 954B     		ldr	r3, .L58+32
 849 0034 6FF05802 		mvn	r2, #88
 850 0038 1A60     		str	r2, [r3]
 256:main.c        ****     uint16 timercapture;
 257:main.c        ****     double der, prev_err, pid_integral,dt;
 258:main.c        ****     double time;
 259:main.c        **** 
 260:main.c        ****     der = 0; prev_err = 0; pid_integral = 0; 
 851              		.loc 1 260 0
 852 003a 4FF00003 		mov	r3, #0
 853 003e 4FF00004 		mov	r4, #0
 854 0042 C7E90634 		strd	r3, [r7, #24]
 855 0046 4FF00003 		mov	r3, #0
 856 004a 4FF00004 		mov	r4, #0
 857 004e C7E90E34 		strd	r3, [r7, #56]
 858 0052 4FF00003 		mov	r3, #0
 859 0056 4FF00004 		mov	r4, #0
 860 005a C7E90C34 		strd	r3, [r7, #48]
 261:main.c        ****     dt = 0.025; //assumes cydelay = 10 below for a 100Hz frequency.
 861              		.loc 1 261 0
 862 005e 82A4     		adr	r4, .L58
 863 0060 D4E90034 		ldrd	r3, [r4]
 864 0064 C7E90A34 		strd	r3, [r7, #40]
 262:main.c        **** 
 263:main.c        ****     sprintf(sendValue,"%08d\t%08.0f\t%08d",adcValue1,err,angletemp);
 865              		.loc 1 263 0
 866 0068 884B     		ldr	r3, .L58+36
 867 006a 1B88     		ldrh	r3, [r3]
 868 006c 1946     		mov	r1, r3
 869 006e 884B     		ldr	r3, .L58+40
 870 0070 18CB     		ldmia	r3, {r3-r4}
 871 0072 884A     		ldr	r2, .L58+44
 872 0074 1268     		ldr	r2, [r2]
 873 0076 0292     		str	r2, [sp, #8]
 874 0078 CDE90034 		strd	r3, [sp]
 875 007c 0A46     		mov	r2, r1
 876 007e 8649     		ldr	r1, .L58+48
 877 0080 8648     		ldr	r0, .L58+52
 878 0082 FFF7FEFF 		bl	sprintf
 264:main.c        ****     UART_PutString(sendValue);
 879              		.loc 1 264 0
 880 0086 8548     		ldr	r0, .L58+52
 881 0088 FFF7FEFF 		bl	UART_PutString
 265:main.c        ****     uint16 moving_avg[5] = {0,0,0,0,0};
 882              		.loc 1 265 0
 883 008c 3B1D     		adds	r3, r7, #4
 884 008e 0022     		movs	r2, #0
 885 0090 1A60     		str	r2, [r3]
 886 0092 5A60     		str	r2, [r3, #4]
 887 0094 1A81     		strh	r2, [r3, #8]	@ movhi
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 22


 266:main.c        ****     median_timer_Start();
 888              		.loc 1 266 0
 889 0096 FFF7FEFF 		bl	median_timer_Start
 267:main.c        ****     Timer_1_Start();
 890              		.loc 1 267 0
 891 009a FFF7FEFF 		bl	Timer_1_Start
 892              	.L57:
 268:main.c        ****     for(;;)
 269:main.c        ****     {
 270:main.c        ****         Timer_1_WriteCounter(65535);
 893              		.loc 1 270 0
 894 009e 4FF6FF70 		movw	r0, #65535
 895 00a2 FFF7FEFF 		bl	Timer_1_WriteCounter
 271:main.c        ****         /*adcValue1 = ADC_SAR_1_GetResult16() ;
 272:main.c        ****         adcValue2 = ADC_SAR_2_GetResult16() ;
 273:main.c        ****         sprintf(sendValue,"%04d \t %04d \n",adcValue1,adcValue2);
 274:main.c        ****         UART_PutString(sendValue);
 275:main.c        ****         */
 276:main.c        ****         /*
 277:main.c        ****         
 278:main.c        ****         
 279:main.c        ****         for(int j=0;j<2;j++){
 280:main.c        ****             moving_avg[j] = moving_avg[j+1]; 
 281:main.c        ****         }
 282:main.c        ****         moving_avg[2] = ADC_SAR_1_GetResult16();
 283:main.c        ****         adcValue1 = (moving_avg[0]+moving_avg[1]+moving_avg[2])/3;
 284:main.c        ****         */
 285:main.c        ****         /*
 286:main.c        ****         ADC_SAR_1_StartConvert();
 287:main.c        ****         ADC_SAR_1_IsEndConversion(ADC_SAR_1_WAIT_FOR_RESULT);
 288:main.c        ****         
 289:main.c        ****         adcValue1 = ADC_SAR_1_GetResult16();
 290:main.c        ****         */
 291:main.c        ****         //ADC_SAR_1_StartConvert();
 292:main.c        ****         //ADC_SAR_1_IsEndConversion(ADC_SAR_1_WAIT_FOR_RESULT);
 293:main.c        ****         
 294:main.c        ****         //adcValue1 = ADC_SAR_1_GetResult16();
 295:main.c        ****         //sprintf(sendValue,"%04d \n",adcValue1);
 296:main.c        ****         //UART_PutString(sendValue);
 297:main.c        ****         
 298:main.c        ****         if(new_pos_set){
 896              		.loc 1 298 0
 897 00a6 7E4B     		ldr	r3, .L58+56
 898 00a8 1B68     		ldr	r3, [r3]
 899 00aa 002B     		cmp	r3, #0
 900 00ac 09D0     		beq	.L51
 299:main.c        ****             pos = new_pos;
 901              		.loc 1 299 0
 902 00ae 7D4B     		ldr	r3, .L58+60
 903 00b0 1B68     		ldr	r3, [r3]
 904 00b2 7D4A     		ldr	r2, .L58+64
 905 00b4 1360     		str	r3, [r2]
 300:main.c        ****             new_pos_set = 0;
 906              		.loc 1 300 0
 907 00b6 7A4B     		ldr	r3, .L58+56
 908 00b8 0022     		movs	r2, #0
 909 00ba 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 23


 301:main.c        ****             new_angle = 0;
 910              		.loc 1 301 0
 911 00bc 7B4B     		ldr	r3, .L58+68
 912 00be 0022     		movs	r2, #0
 913 00c0 1A60     		str	r2, [r3]
 914              	.L51:
 302:main.c        ****             
 303:main.c        ****             /*
 304:main.c        ****             //if(pos<0){pos = pos - 13;}
 305:main.c        ****             //if(pos>0){pos = pos + 12;}
 306:main.c        ****             if(pos>45){pos=45;}
 307:main.c        ****             if(pos<-45){pos=-45;}
 308:main.c        ****             if(pos<46 & pos>-46){
 309:main.c        ****                 PWM_1_WriteCompare(dutycyclelength(pos));
 310:main.c        ****             }
 311:main.c        ****                  */       
 312:main.c        ****         }
 313:main.c        ****         
 314:main.c        ****         /* PID */
 315:main.c        ****         err = -pos + adcValue1;
 915              		.loc 1 315 0
 916 00c2 724B     		ldr	r3, .L58+36
 917 00c4 1B88     		ldrh	r3, [r3]
 918 00c6 1A46     		mov	r2, r3
 919 00c8 774B     		ldr	r3, .L58+64
 920 00ca 1B68     		ldr	r3, [r3]
 921 00cc D31A     		subs	r3, r2, r3
 922 00ce 1846     		mov	r0, r3
 923 00d0 FFF7FEFF 		bl	__aeabi_i2d
 924 00d4 0346     		mov	r3, r0
 925 00d6 0C46     		mov	r4, r1
 926 00d8 6D4A     		ldr	r2, .L58+40
 927 00da C2E90034 		strd	r3, [r2]
 316:main.c        ****         der = err - prev_err;
 928              		.loc 1 316 0
 929 00de 6C4B     		ldr	r3, .L58+40
 930 00e0 D3E90001 		ldrd	r0, [r3]
 931 00e4 D7E90E23 		ldrd	r2, [r7, #56]
 932 00e8 FFF7FEFF 		bl	__aeabi_dsub
 933 00ec 0346     		mov	r3, r0
 934 00ee 0C46     		mov	r4, r1
 935 00f0 C7E90634 		strd	r3, [r7, #24]
 317:main.c        ****         pid_integral = err + pid_integral;
 936              		.loc 1 317 0
 937 00f4 664B     		ldr	r3, .L58+40
 938 00f6 18CB     		ldmia	r3, {r3-r4}
 939 00f8 1A46     		mov	r2, r3
 940 00fa 2346     		mov	r3, r4
 941 00fc D7E90C01 		ldrd	r0, [r7, #48]
 942 0100 FFF7FEFF 		bl	__aeabi_dadd
 943 0104 0346     		mov	r3, r0
 944 0106 0C46     		mov	r4, r1
 945 0108 C7E90C34 		strd	r3, [r7, #48]
 318:main.c        ****         angletemp = pid[0] * err + ( pid[1] * pid_integral * dt) + ( pid[2] * der / dt );
 946              		.loc 1 318 0
 947 010c 684B     		ldr	r3, .L58+72
 948 010e D3E90001 		ldrd	r0, [r3]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 24


 949 0112 5F4B     		ldr	r3, .L58+40
 950 0114 18CB     		ldmia	r3, {r3-r4}
 951 0116 1A46     		mov	r2, r3
 952 0118 2346     		mov	r3, r4
 953 011a FFF7FEFF 		bl	__aeabi_dmul
 954 011e 0346     		mov	r3, r0
 955 0120 0C46     		mov	r4, r1
 956 0122 2546     		mov	r5, r4
 957 0124 1C46     		mov	r4, r3
 958 0126 624B     		ldr	r3, .L58+72
 959 0128 D3E90201 		ldrd	r0, [r3, #8]
 960 012c D7E90C23 		ldrd	r2, [r7, #48]
 961 0130 FFF7FEFF 		bl	__aeabi_dmul
 962 0134 0246     		mov	r2, r0
 963 0136 0B46     		mov	r3, r1
 964 0138 1046     		mov	r0, r2
 965 013a 1946     		mov	r1, r3
 966 013c D7E90A23 		ldrd	r2, [r7, #40]
 967 0140 FFF7FEFF 		bl	__aeabi_dmul
 968 0144 0246     		mov	r2, r0
 969 0146 0B46     		mov	r3, r1
 970 0148 2046     		mov	r0, r4
 971 014a 2946     		mov	r1, r5
 972 014c FFF7FEFF 		bl	__aeabi_dadd
 973 0150 0346     		mov	r3, r0
 974 0152 0C46     		mov	r4, r1
 975 0154 2546     		mov	r5, r4
 976 0156 1C46     		mov	r4, r3
 977 0158 554B     		ldr	r3, .L58+72
 978 015a D3E90401 		ldrd	r0, [r3, #16]
 979 015e D7E90623 		ldrd	r2, [r7, #24]
 980 0162 FFF7FEFF 		bl	__aeabi_dmul
 981 0166 0246     		mov	r2, r0
 982 0168 0B46     		mov	r3, r1
 983 016a 1046     		mov	r0, r2
 984 016c 1946     		mov	r1, r3
 985 016e D7E90A23 		ldrd	r2, [r7, #40]
 986 0172 FFF7FEFF 		bl	__aeabi_ddiv
 987 0176 0246     		mov	r2, r0
 988 0178 0B46     		mov	r3, r1
 989 017a 2046     		mov	r0, r4
 990 017c 2946     		mov	r1, r5
 991 017e FFF7FEFF 		bl	__aeabi_dadd
 992 0182 0346     		mov	r3, r0
 993 0184 0C46     		mov	r4, r1
 994 0186 1846     		mov	r0, r3
 995 0188 2146     		mov	r1, r4
 996 018a FFF7FEFF 		bl	__aeabi_d2iz
 997 018e 0246     		mov	r2, r0
 998 0190 404B     		ldr	r3, .L58+44
 999 0192 1A60     		str	r2, [r3]
 319:main.c        ****         angle=angletemp;
 1000              		.loc 1 319 0
 1001 0194 3F4B     		ldr	r3, .L58+44
 1002 0196 1B68     		ldr	r3, [r3]
 1003 0198 3B4A     		ldr	r2, .L58+32
 1004 019a 1360     		str	r3, [r2]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 25


 320:main.c        ****         //Limit angles of proportional valve
 321:main.c        ****         if(angle<0){angle = angle - 15;}
 1005              		.loc 1 321 0
 1006 019c 3A4B     		ldr	r3, .L58+32
 1007 019e 1B68     		ldr	r3, [r3]
 1008 01a0 002B     		cmp	r3, #0
 1009 01a2 04DA     		bge	.L52
 1010              		.loc 1 321 0 is_stmt 0 discriminator 1
 1011 01a4 384B     		ldr	r3, .L58+32
 1012 01a6 1B68     		ldr	r3, [r3]
 1013 01a8 0F3B     		subs	r3, r3, #15
 1014 01aa 374A     		ldr	r2, .L58+32
 1015 01ac 1360     		str	r3, [r2]
 1016              	.L52:
 322:main.c        ****         if(angle>0){angle = angle + 14;}
 1017              		.loc 1 322 0 is_stmt 1
 1018 01ae 364B     		ldr	r3, .L58+32
 1019 01b0 1B68     		ldr	r3, [r3]
 1020 01b2 002B     		cmp	r3, #0
 1021 01b4 04DD     		ble	.L53
 1022              		.loc 1 322 0 is_stmt 0 discriminator 1
 1023 01b6 344B     		ldr	r3, .L58+32
 1024 01b8 1B68     		ldr	r3, [r3]
 1025 01ba 0E33     		adds	r3, r3, #14
 1026 01bc 324A     		ldr	r2, .L58+32
 1027 01be 1360     		str	r3, [r2]
 1028              	.L53:
 323:main.c        ****         if(angle>45){angle=45;}
 1029              		.loc 1 323 0 is_stmt 1
 1030 01c0 314B     		ldr	r3, .L58+32
 1031 01c2 1B68     		ldr	r3, [r3]
 1032 01c4 2D2B     		cmp	r3, #45
 1033 01c6 02DD     		ble	.L54
 1034              		.loc 1 323 0 is_stmt 0 discriminator 1
 1035 01c8 2F4B     		ldr	r3, .L58+32
 1036 01ca 2D22     		movs	r2, #45
 1037 01cc 1A60     		str	r2, [r3]
 1038              	.L54:
 324:main.c        ****         if(angle<-45){angle=-45;}
 1039              		.loc 1 324 0 is_stmt 1
 1040 01ce 2E4B     		ldr	r3, .L58+32
 1041 01d0 1B68     		ldr	r3, [r3]
 1042 01d2 13F12D0F 		cmn	r3, #45
 1043 01d6 03DA     		bge	.L55
 1044              		.loc 1 324 0 is_stmt 0 discriminator 1
 1045 01d8 2B4B     		ldr	r3, .L58+32
 1046 01da 6FF02C02 		mvn	r2, #44
 1047 01de 1A60     		str	r2, [r3]
 1048              	.L55:
 325:main.c        ****         if(angle<46 & angle>-46){
 1049              		.loc 1 325 0 is_stmt 1
 1050 01e0 294B     		ldr	r3, .L58+32
 1051 01e2 1B68     		ldr	r3, [r3]
 1052 01e4 2D2B     		cmp	r3, #45
 1053 01e6 D4BF     		ite	le
 1054 01e8 0123     		movle	r3, #1
 1055 01ea 0023     		movgt	r3, #0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 26


 1056 01ec DAB2     		uxtb	r2, r3
 1057 01ee 264B     		ldr	r3, .L58+32
 1058 01f0 1B68     		ldr	r3, [r3]
 1059 01f2 13F12D0F 		cmn	r3, #45
 1060 01f6 ACBF     		ite	ge
 1061 01f8 0123     		movge	r3, #1
 1062 01fa 0023     		movlt	r3, #0
 1063 01fc DBB2     		uxtb	r3, r3
 1064 01fe 1340     		ands	r3, r3, r2
 1065 0200 DBB2     		uxtb	r3, r3
 1066 0202 002B     		cmp	r3, #0
 1067 0204 08D0     		beq	.L56
 326:main.c        ****             PWM_1_WriteCompare(dutycyclelength(angle));
 1068              		.loc 1 326 0
 1069 0206 204B     		ldr	r3, .L58+32
 1070 0208 1B68     		ldr	r3, [r3]
 1071 020a 1846     		mov	r0, r3
 1072 020c FFF7FEFF 		bl	dutycyclelength
 1073 0210 0346     		mov	r3, r0
 1074 0212 1846     		mov	r0, r3
 1075 0214 FFF7FEFF 		bl	PWM_1_WriteCompare
 1076              	.L56:
 327:main.c        ****         }
 328:main.c        ****         prev_err = err;
 1077              		.loc 1 328 0
 1078 0218 1D4B     		ldr	r3, .L58+40
 1079 021a 18CB     		ldmia	r3, {r3-r4}
 1080 021c C7E90E34 		strd	r3, [r7, #56]
 329:main.c        ****         
 330:main.c        ****         /* END PID CODE */
 331:main.c        ****         
 332:main.c        ****         CyDelay(10);
 1081              		.loc 1 332 0
 1082 0220 0A20     		movs	r0, #10
 1083 0222 FFF7FEFF 		bl	CyDelay
 333:main.c        ****         time = Timer_1_ReadCounter();
 1084              		.loc 1 333 0
 1085 0226 FFF7FEFF 		bl	Timer_1_ReadCounter
 1086 022a 0346     		mov	r3, r0
 1087 022c 1846     		mov	r0, r3
 1088 022e FFF7FEFF 		bl	__aeabi_ui2d
 1089 0232 0346     		mov	r3, r0
 1090 0234 0C46     		mov	r4, r1
 1091 0236 C7E90434 		strd	r3, [r7, #16]
 334:main.c        ****         dt=(double)(65535-time)/1000000;
 1092              		.loc 1 334 0
 1093 023a D7E90423 		ldrd	r2, [r7, #16]
 1094 023e 0CA1     		adr	r1, .L58+8
 1095 0240 D1E90001 		ldrd	r0, [r1]
 1096 0244 FFF7FEFF 		bl	__aeabi_dsub
 1097 0248 0346     		mov	r3, r0
 1098 024a 0C46     		mov	r4, r1
 1099 024c 1846     		mov	r0, r3
 1100 024e 2146     		mov	r1, r4
 1101 0250 09A3     		adr	r3, .L58+16
 1102 0252 D3E90023 		ldrd	r2, [r3]
 1103 0256 FFF7FEFF 		bl	__aeabi_ddiv
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 27


 1104 025a 0346     		mov	r3, r0
 1105 025c 0C46     		mov	r4, r1
 1106 025e C7E90A34 		strd	r3, [r7, #40]
 335:main.c        **** 
 336:main.c        ****     }
 1107              		.loc 1 336 0
 1108 0262 1CE7     		b	.L57
 1109              	.L59:
 1110 0264 AFF30080 		.align	3
 1111              	.L58:
 1112 0268 9A999999 		.word	-1717986918
 1113 026c 9999993F 		.word	1067030937
 1114 0270 00000000 		.word	0
 1115 0274 E0FFEF40 		.word	1089470432
 1116 0278 00000000 		.word	0
 1117 027c 80842E41 		.word	1093567616
 1118 0280 00000000 		.word	RxIsr
 1119 0284 00000000 		.word	adc_update
 1120 0288 00000000 		.word	angle
 1121 028c 00000000 		.word	adcValue1
 1122 0290 00000000 		.word	err
 1123 0294 00000000 		.word	angletemp
 1124 0298 00000000 		.word	.LC0
 1125 029c 00000000 		.word	sendValue
 1126 02a0 00000000 		.word	new_pos_set
 1127 02a4 00000000 		.word	new_pos
 1128 02a8 00000000 		.word	pos
 1129 02ac 00000000 		.word	new_angle
 1130 02b0 00000000 		.word	pid
 1131              		.cfi_endproc
 1132              	.LFE67:
 1133              		.size	main, .-main
 1134              		.text
 1135              	.Letext0:
 1136              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1137              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1138              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1139              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 1140              		.section	.debug_info,"",%progbits
 1141              	.Ldebug_info0:
 1142 0000 35040000 		.4byte	0x435
 1143 0004 0400     		.2byte	0x4
 1144 0006 00000000 		.4byte	.Ldebug_abbrev0
 1145 000a 04       		.byte	0x4
 1146 000b 01       		.uleb128 0x1
 1147 000c 3D000000 		.4byte	.LASF48
 1148 0010 0C       		.byte	0xc
 1149 0011 44020000 		.4byte	.LASF49
 1150 0015 B9010000 		.4byte	.LASF50
 1151 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1152 001d 00000000 		.4byte	0
 1153 0021 00000000 		.4byte	.Ldebug_line0
 1154 0025 02       		.uleb128 0x2
 1155 0026 01       		.byte	0x1
 1156 0027 06       		.byte	0x6
 1157 0028 6B010000 		.4byte	.LASF0
 1158 002c 02       		.uleb128 0x2
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 28


 1159 002d 01       		.byte	0x1
 1160 002e 08       		.byte	0x8
 1161 002f 32010000 		.4byte	.LASF1
 1162 0033 02       		.uleb128 0x2
 1163 0034 02       		.byte	0x2
 1164 0035 05       		.byte	0x5
 1165 0036 2A000000 		.4byte	.LASF2
 1166 003a 02       		.uleb128 0x2
 1167 003b 02       		.byte	0x2
 1168 003c 07       		.byte	0x7
 1169 003d A6010000 		.4byte	.LASF3
 1170 0041 03       		.uleb128 0x3
 1171 0042 7A020000 		.4byte	.LASF9
 1172 0046 02       		.byte	0x2
 1173 0047 3F       		.byte	0x3f
 1174 0048 4C000000 		.4byte	0x4c
 1175 004c 02       		.uleb128 0x2
 1176 004d 04       		.byte	0x4
 1177 004e 05       		.byte	0x5
 1178 004f 15010000 		.4byte	.LASF4
 1179 0053 02       		.uleb128 0x2
 1180 0054 04       		.byte	0x4
 1181 0055 07       		.byte	0x7
 1182 0056 50020000 		.4byte	.LASF5
 1183 005a 02       		.uleb128 0x2
 1184 005b 08       		.byte	0x8
 1185 005c 05       		.byte	0x5
 1186 005d 07010000 		.4byte	.LASF6
 1187 0061 02       		.uleb128 0x2
 1188 0062 08       		.byte	0x8
 1189 0063 07       		.byte	0x7
 1190 0064 77010000 		.4byte	.LASF7
 1191 0068 04       		.uleb128 0x4
 1192 0069 04       		.byte	0x4
 1193 006a 05       		.byte	0x5
 1194 006b 696E7400 		.ascii	"int\000"
 1195 006f 02       		.uleb128 0x2
 1196 0070 04       		.byte	0x4
 1197 0071 07       		.byte	0x7
 1198 0072 8E010000 		.4byte	.LASF8
 1199 0076 03       		.uleb128 0x3
 1200 0077 0A020000 		.4byte	.LASF10
 1201 007b 03       		.byte	0x3
 1202 007c 2C       		.byte	0x2c
 1203 007d 41000000 		.4byte	0x41
 1204 0081 05       		.uleb128 0x5
 1205 0082 EF000000 		.4byte	.LASF11
 1206 0086 04       		.byte	0x4
 1207 0087 9201     		.2byte	0x192
 1208 0089 2C000000 		.4byte	0x2c
 1209 008d 05       		.uleb128 0x5
 1210 008e 33020000 		.4byte	.LASF12
 1211 0092 04       		.byte	0x4
 1212 0093 9301     		.2byte	0x193
 1213 0095 3A000000 		.4byte	0x3a
 1214 0099 02       		.uleb128 0x2
 1215 009a 04       		.byte	0x4
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 29


 1216 009b 04       		.byte	0x4
 1217 009c 01010000 		.4byte	.LASF13
 1218 00a0 02       		.uleb128 0x2
 1219 00a1 08       		.byte	0x8
 1220 00a2 04       		.byte	0x4
 1221 00a3 AA020000 		.4byte	.LASF14
 1222 00a7 02       		.uleb128 0x2
 1223 00a8 01       		.byte	0x1
 1224 00a9 08       		.byte	0x8
 1225 00aa 05020000 		.4byte	.LASF15
 1226 00ae 05       		.uleb128 0x5
 1227 00af 4B020000 		.4byte	.LASF16
 1228 00b3 04       		.byte	0x4
 1229 00b4 3C02     		.2byte	0x23c
 1230 00b6 BA000000 		.4byte	0xba
 1231 00ba 06       		.uleb128 0x6
 1232 00bb 81000000 		.4byte	0x81
 1233 00bf 02       		.uleb128 0x2
 1234 00c0 08       		.byte	0x8
 1235 00c1 04       		.byte	0x4
 1236 00c2 4E010000 		.4byte	.LASF17
 1237 00c6 02       		.uleb128 0x2
 1238 00c7 04       		.byte	0x4
 1239 00c8 07       		.byte	0x7
 1240 00c9 34000000 		.4byte	.LASF18
 1241 00cd 07       		.uleb128 0x7
 1242 00ce BE020000 		.4byte	.LASF51
 1243 00d2 01       		.byte	0x1
 1244 00d3 14       		.byte	0x14
 1245 00d4 8D000000 		.4byte	0x8d
 1246 00d8 00000000 		.4byte	.LFB64
 1247 00dc 74000000 		.4byte	.LFE64-.LFB64
 1248 00e0 01       		.uleb128 0x1
 1249 00e1 9C       		.byte	0x9c
 1250 00e2 03010000 		.4byte	0x103
 1251 00e6 08       		.uleb128 0x8
 1252 00e7 13000000 		.4byte	.LASF36
 1253 00eb 01       		.byte	0x1
 1254 00ec 14       		.byte	0x14
 1255 00ed 68000000 		.4byte	0x68
 1256 00f1 02       		.uleb128 0x2
 1257 00f2 91       		.byte	0x91
 1258 00f3 64       		.sleb128 -28
 1259 00f4 09       		.uleb128 0x9
 1260 00f5 12020000 		.4byte	.LASF19
 1261 00f9 01       		.byte	0x1
 1262 00fa 16       		.byte	0x16
 1263 00fb 8D000000 		.4byte	0x8d
 1264 00ff 02       		.uleb128 0x2
 1265 0100 91       		.byte	0x91
 1266 0101 6E       		.sleb128 -18
 1267 0102 00       		.byte	0
 1268 0103 0A       		.uleb128 0xa
 1269 0104 8B020000 		.4byte	.LASF20
 1270 0108 01       		.byte	0x1
 1271 0109 40       		.byte	0x40
 1272 010a 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 30


 1273 010e F8000000 		.4byte	.LFE65-.LFB65
 1274 0112 01       		.uleb128 0x1
 1275 0113 9C       		.byte	0x9c
 1276 0114 79010000 		.4byte	0x179
 1277 0118 0B       		.uleb128 0xb
 1278 0119 06000000 		.4byte	.LBB2
 1279 011d 24000000 		.4byte	.LBE2-.LBB2
 1280 0121 32010000 		.4byte	0x132
 1281 0125 0C       		.uleb128 0xc
 1282 0126 6A00     		.ascii	"j\000"
 1283 0128 01       		.byte	0x1
 1284 0129 41       		.byte	0x41
 1285 012a 68000000 		.4byte	0x68
 1286 012e 02       		.uleb128 0x2
 1287 012f 91       		.byte	0x91
 1288 0130 74       		.sleb128 -12
 1289 0131 00       		.byte	0
 1290 0132 0B       		.uleb128 0xb
 1291 0133 40000000 		.4byte	.LBB3
 1292 0137 22000000 		.4byte	.LBE3-.LBB3
 1293 013b 4C010000 		.4byte	0x14c
 1294 013f 0C       		.uleb128 0xc
 1295 0140 6A00     		.ascii	"j\000"
 1296 0142 01       		.byte	0x1
 1297 0143 49       		.byte	0x49
 1298 0144 68000000 		.4byte	0x68
 1299 0148 02       		.uleb128 0x2
 1300 0149 91       		.byte	0x91
 1301 014a 70       		.sleb128 -16
 1302 014b 00       		.byte	0
 1303 014c 0D       		.uleb128 0xd
 1304 014d 62000000 		.4byte	.LBB4
 1305 0151 60000000 		.4byte	.LBE4-.LBB4
 1306 0155 0C       		.uleb128 0xc
 1307 0156 6900     		.ascii	"i\000"
 1308 0158 01       		.byte	0x1
 1309 0159 4C       		.byte	0x4c
 1310 015a 68000000 		.4byte	0x68
 1311 015e 02       		.uleb128 0x2
 1312 015f 91       		.byte	0x91
 1313 0160 6C       		.sleb128 -20
 1314 0161 0D       		.uleb128 0xd
 1315 0162 68000000 		.4byte	.LBB5
 1316 0166 4E000000 		.4byte	.LBE5-.LBB5
 1317 016a 0C       		.uleb128 0xc
 1318 016b 6A00     		.ascii	"j\000"
 1319 016d 01       		.byte	0x1
 1320 016e 4D       		.byte	0x4d
 1321 016f 68000000 		.4byte	0x68
 1322 0173 02       		.uleb128 0x2
 1323 0174 91       		.byte	0x91
 1324 0175 68       		.sleb128 -24
 1325 0176 00       		.byte	0
 1326 0177 00       		.byte	0
 1327 0178 00       		.byte	0
 1328 0179 0A       		.uleb128 0xa
 1329 017a A0010000 		.4byte	.LASF21
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 31


 1330 017e 01       		.byte	0x1
 1331 017f 61       		.byte	0x61
 1332 0180 00000000 		.4byte	.LFB66
 1333 0184 94020000 		.4byte	.LFE66-.LFB66
 1334 0188 01       		.uleb128 0x1
 1335 0189 9C       		.byte	0x9c
 1336 018a C2010000 		.4byte	0x1c2
 1337 018e 09       		.uleb128 0x9
 1338 018f 5A010000 		.4byte	.LASF22
 1339 0193 01       		.byte	0x1
 1340 0194 63       		.byte	0x63
 1341 0195 81000000 		.4byte	0x81
 1342 0199 02       		.uleb128 0x2
 1343 019a 91       		.byte	0x91
 1344 019b 6B       		.sleb128 -21
 1345 019c 09       		.uleb128 0x9
 1346 019d 84020000 		.4byte	.LASF23
 1347 01a1 01       		.byte	0x1
 1348 01a2 64       		.byte	0x64
 1349 01a3 81000000 		.4byte	0x81
 1350 01a7 02       		.uleb128 0x2
 1351 01a8 91       		.byte	0x91
 1352 01a9 6A       		.sleb128 -22
 1353 01aa 0D       		.uleb128 0xd
 1354 01ab 94000000 		.4byte	.LBB6
 1355 01af 1C000000 		.4byte	.LBE6-.LBB6
 1356 01b3 0C       		.uleb128 0xc
 1357 01b4 707000   		.ascii	"pp\000"
 1358 01b7 01       		.byte	0x1
 1359 01b8 80       		.byte	0x80
 1360 01b9 68000000 		.4byte	0x68
 1361 01bd 02       		.uleb128 0x2
 1362 01be 91       		.byte	0x91
 1363 01bf 6C       		.sleb128 -20
 1364 01c0 00       		.byte	0
 1365 01c1 00       		.byte	0
 1366 01c2 0E       		.uleb128 0xe
 1367 01c3 CB000000 		.4byte	.LASF24
 1368 01c7 01       		.byte	0x1
 1369 01c8 E3       		.byte	0xe3
 1370 01c9 68000000 		.4byte	0x68
 1371 01cd 00000000 		.4byte	.LFB67
 1372 01d1 B4020000 		.4byte	.LFE67-.LFB67
 1373 01d5 01       		.uleb128 0x1
 1374 01d6 9C       		.byte	0x9c
 1375 01d7 5E020000 		.4byte	0x25e
 1376 01db 09       		.uleb128 0x9
 1377 01dc 2B010000 		.4byte	.LASF25
 1378 01e0 01       		.byte	0x1
 1379 01e1 F0       		.byte	0xf0
 1380 01e2 81000000 		.4byte	0x81
 1381 01e6 02       		.uleb128 0x2
 1382 01e7 91       		.byte	0x91
 1383 01e8 57       		.sleb128 -41
 1384 01e9 09       		.uleb128 0x9
 1385 01ea D8020000 		.4byte	.LASF26
 1386 01ee 01       		.byte	0x1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 32


 1387 01ef F1       		.byte	0xf1
 1388 01f0 81000000 		.4byte	0x81
 1389 01f4 02       		.uleb128 0x2
 1390 01f5 91       		.byte	0x91
 1391 01f6 56       		.sleb128 -42
 1392 01f7 0F       		.uleb128 0xf
 1393 01f8 1E010000 		.4byte	.LASF52
 1394 01fc 01       		.byte	0x1
 1395 01fd 0001     		.2byte	0x100
 1396 01ff 8D000000 		.4byte	0x8d
 1397 0203 10       		.uleb128 0x10
 1398 0204 64657200 		.ascii	"der\000"
 1399 0208 01       		.byte	0x1
 1400 0209 0101     		.2byte	0x101
 1401 020b A0000000 		.4byte	0xa0
 1402 020f 02       		.uleb128 0x2
 1403 0210 91       		.byte	0x91
 1404 0211 48       		.sleb128 -56
 1405 0212 11       		.uleb128 0x11
 1406 0213 0A000000 		.4byte	.LASF27
 1407 0217 01       		.byte	0x1
 1408 0218 0101     		.2byte	0x101
 1409 021a A0000000 		.4byte	0xa0
 1410 021e 02       		.uleb128 0x2
 1411 021f 91       		.byte	0x91
 1412 0220 68       		.sleb128 -24
 1413 0221 11       		.uleb128 0x11
 1414 0222 6D020000 		.4byte	.LASF28
 1415 0226 01       		.byte	0x1
 1416 0227 0101     		.2byte	0x101
 1417 0229 A0000000 		.4byte	0xa0
 1418 022d 02       		.uleb128 0x2
 1419 022e 91       		.byte	0x91
 1420 022f 60       		.sleb128 -32
 1421 0230 10       		.uleb128 0x10
 1422 0231 647400   		.ascii	"dt\000"
 1423 0234 01       		.byte	0x1
 1424 0235 0101     		.2byte	0x101
 1425 0237 A0000000 		.4byte	0xa0
 1426 023b 02       		.uleb128 0x2
 1427 023c 91       		.byte	0x91
 1428 023d 58       		.sleb128 -40
 1429 023e 11       		.uleb128 0x11
 1430 023f 9B010000 		.4byte	.LASF29
 1431 0243 01       		.byte	0x1
 1432 0244 0201     		.2byte	0x102
 1433 0246 A0000000 		.4byte	0xa0
 1434 024a 02       		.uleb128 0x2
 1435 024b 91       		.byte	0x91
 1436 024c 40       		.sleb128 -64
 1437 024d 11       		.uleb128 0x11
 1438 024e 28020000 		.4byte	.LASF30
 1439 0252 01       		.byte	0x1
 1440 0253 0901     		.2byte	0x109
 1441 0255 5E020000 		.4byte	0x25e
 1442 0259 03       		.uleb128 0x3
 1443 025a 91       		.byte	0x91
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 33


 1444 025b B47F     		.sleb128 -76
 1445 025d 00       		.byte	0
 1446 025e 12       		.uleb128 0x12
 1447 025f 8D000000 		.4byte	0x8d
 1448 0263 6E020000 		.4byte	0x26e
 1449 0267 13       		.uleb128 0x13
 1450 0268 C6000000 		.4byte	0xc6
 1451 026c 04       		.byte	0x4
 1452 026d 00       		.byte	0
 1453 026e 14       		.uleb128 0x14
 1454 026f B1020000 		.4byte	.LASF31
 1455 0273 05       		.byte	0x5
 1456 0274 1207     		.2byte	0x712
 1457 0276 7A020000 		.4byte	0x27a
 1458 027a 06       		.uleb128 0x6
 1459 027b 76000000 		.4byte	0x76
 1460 027f 15       		.uleb128 0x15
 1461 0280 F5000000 		.4byte	.LASF32
 1462 0284 01       		.byte	0x1
 1463 0285 12       		.byte	0x12
 1464 0286 81000000 		.4byte	0x81
 1465 028a 05       		.uleb128 0x5
 1466 028b 03       		.byte	0x3
 1467 028c 00000000 		.4byte	errorStatus
 1468 0290 15       		.uleb128 0x15
 1469 0291 E0000000 		.4byte	.LASF33
 1470 0295 01       		.byte	0x1
 1471 0296 28       		.byte	0x28
 1472 0297 68000000 		.4byte	0x68
 1473 029b 05       		.uleb128 0x5
 1474 029c 03       		.byte	0x3
 1475 029d 00000000 		.4byte	data_read_mode
 1476 02a1 15       		.uleb128 0x15
 1477 02a2 00000000 		.4byte	.LASF34
 1478 02a6 01       		.byte	0x1
 1479 02a7 29       		.byte	0x29
 1480 02a8 B2020000 		.4byte	0x2b2
 1481 02ac 05       		.uleb128 0x5
 1482 02ad 03       		.byte	0x3
 1483 02ae 00000000 		.4byte	new_angle
 1484 02b2 06       		.uleb128 0x6
 1485 02b3 68000000 		.4byte	0x68
 1486 02b7 15       		.uleb128 0x15
 1487 02b8 19000000 		.4byte	.LASF35
 1488 02bc 01       		.byte	0x1
 1489 02bd 2A       		.byte	0x2a
 1490 02be B2020000 		.4byte	0x2b2
 1491 02c2 05       		.uleb128 0x5
 1492 02c3 03       		.byte	0x3
 1493 02c4 00000000 		.4byte	new_pos_set
 1494 02c8 15       		.uleb128 0x15
 1495 02c9 13000000 		.4byte	.LASF36
 1496 02cd 01       		.byte	0x1
 1497 02ce 2B       		.byte	0x2b
 1498 02cf 68000000 		.4byte	0x68
 1499 02d3 05       		.uleb128 0x5
 1500 02d4 03       		.byte	0x3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 34


 1501 02d5 00000000 		.4byte	angle
 1502 02d9 15       		.uleb128 0x15
 1503 02da 1E020000 		.4byte	.LASF37
 1504 02de 01       		.byte	0x1
 1505 02df 2C       		.byte	0x2c
 1506 02e0 68000000 		.4byte	0x68
 1507 02e4 05       		.uleb128 0x5
 1508 02e5 03       		.byte	0x3
 1509 02e6 00000000 		.4byte	angletemp
 1510 02ea 15       		.uleb128 0x15
 1511 02eb 62020000 		.4byte	.LASF38
 1512 02ef 01       		.byte	0x1
 1513 02f0 2D       		.byte	0x2d
 1514 02f1 68000000 		.4byte	0x68
 1515 02f5 05       		.uleb128 0x5
 1516 02f6 03       		.byte	0x3
 1517 02f7 00000000 		.4byte	isNegative
 1518 02fb 12       		.uleb128 0x12
 1519 02fc A7000000 		.4byte	0xa7
 1520 0300 0B030000 		.4byte	0x30b
 1521 0304 13       		.uleb128 0x13
 1522 0305 C6000000 		.4byte	0xc6
 1523 0309 63       		.byte	0x63
 1524 030a 00       		.byte	0
 1525 030b 15       		.uleb128 0x15
 1526 030c A0020000 		.4byte	.LASF39
 1527 0310 01       		.byte	0x1
 1528 0311 2E       		.byte	0x2e
 1529 0312 FB020000 		.4byte	0x2fb
 1530 0316 05       		.uleb128 0x5
 1531 0317 03       		.byte	0x3
 1532 0318 00000000 		.4byte	sendValue
 1533 031c 15       		.uleb128 0x15
 1534 031d CE020000 		.4byte	.LASF40
 1535 0321 01       		.byte	0x1
 1536 0322 2F       		.byte	0x2f
 1537 0323 8D000000 		.4byte	0x8d
 1538 0327 05       		.uleb128 0x5
 1539 0328 03       		.byte	0x3
 1540 0329 00000000 		.4byte	adcValue1
 1541 032d 15       		.uleb128 0x15
 1542 032e 3A020000 		.4byte	.LASF41
 1543 0332 01       		.byte	0x1
 1544 0333 30       		.byte	0x30
 1545 0334 8D000000 		.4byte	0x8d
 1546 0338 05       		.uleb128 0x5
 1547 0339 03       		.byte	0x3
 1548 033a 00000000 		.4byte	adcValue2
 1549 033e 12       		.uleb128 0x12
 1550 033f A7000000 		.4byte	0xa7
 1551 0343 4E030000 		.4byte	0x34e
 1552 0347 13       		.uleb128 0x13
 1553 0348 C6000000 		.4byte	0xc6
 1554 034c 08       		.byte	0x8
 1555 034d 00       		.byte	0
 1556 034e 15       		.uleb128 0x15
 1557 034f 25000000 		.4byte	.LASF42
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 35


 1558 0353 01       		.byte	0x1
 1559 0354 31       		.byte	0x31
 1560 0355 3E030000 		.4byte	0x33e
 1561 0359 05       		.uleb128 0x5
 1562 035a 03       		.byte	0x3
 1563 035b 00000000 		.4byte	temp
 1564 035f 16       		.uleb128 0x16
 1565 0360 6E6E00   		.ascii	"nn\000"
 1566 0363 01       		.byte	0x1
 1567 0364 32       		.byte	0x32
 1568 0365 68000000 		.4byte	0x68
 1569 0369 05       		.uleb128 0x5
 1570 036a 03       		.byte	0x3
 1571 036b 00000000 		.4byte	nn
 1572 036f 12       		.uleb128 0x12
 1573 0370 A0000000 		.4byte	0xa0
 1574 0374 7F030000 		.4byte	0x37f
 1575 0378 13       		.uleb128 0x13
 1576 0379 C6000000 		.4byte	0xc6
 1577 037d 02       		.byte	0x2
 1578 037e 00       		.byte	0
 1579 037f 16       		.uleb128 0x16
 1580 0380 70696400 		.ascii	"pid\000"
 1581 0384 01       		.byte	0x1
 1582 0385 33       		.byte	0x33
 1583 0386 6F030000 		.4byte	0x36f
 1584 038a 05       		.uleb128 0x5
 1585 038b 03       		.byte	0x3
 1586 038c 00000000 		.4byte	pid
 1587 0390 15       		.uleb128 0x15
 1588 0391 D0000000 		.4byte	.LASF43
 1589 0395 01       		.byte	0x1
 1590 0396 35       		.byte	0x35
 1591 0397 FB020000 		.4byte	0x2fb
 1592 039b 05       		.uleb128 0x5
 1593 039c 03       		.byte	0x3
 1594 039d 00000000 		.4byte	help
 1595 03a1 16       		.uleb128 0x16
 1596 03a2 747400   		.ascii	"tt\000"
 1597 03a5 01       		.byte	0x1
 1598 03a6 36       		.byte	0x36
 1599 03a7 68000000 		.4byte	0x68
 1600 03ab 05       		.uleb128 0x5
 1601 03ac 03       		.byte	0x3
 1602 03ad 00000000 		.4byte	tt
 1603 03b1 16       		.uleb128 0x16
 1604 03b2 706F7300 		.ascii	"pos\000"
 1605 03b6 01       		.byte	0x1
 1606 03b7 37       		.byte	0x37
 1607 03b8 68000000 		.4byte	0x68
 1608 03bc 05       		.uleb128 0x5
 1609 03bd 03       		.byte	0x3
 1610 03be 00000000 		.4byte	pos
 1611 03c2 15       		.uleb128 0x15
 1612 03c3 63010000 		.4byte	.LASF44
 1613 03c7 01       		.byte	0x1
 1614 03c8 38       		.byte	0x38
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 36


 1615 03c9 68000000 		.4byte	0x68
 1616 03cd 05       		.uleb128 0x5
 1617 03ce 03       		.byte	0x3
 1618 03cf 00000000 		.4byte	new_pos
 1619 03d3 16       		.uleb128 0x16
 1620 03d4 65727200 		.ascii	"err\000"
 1621 03d8 01       		.byte	0x1
 1622 03d9 39       		.byte	0x39
 1623 03da A0000000 		.4byte	0xa0
 1624 03de 05       		.uleb128 0x5
 1625 03df 03       		.byte	0x3
 1626 03e0 00000000 		.4byte	err
 1627 03e4 12       		.uleb128 0x12
 1628 03e5 8D000000 		.4byte	0x8d
 1629 03e9 F4030000 		.4byte	0x3f4
 1630 03ed 13       		.uleb128 0x13
 1631 03ee C6000000 		.4byte	0xc6
 1632 03f2 06       		.byte	0x6
 1633 03f3 00       		.byte	0
 1634 03f4 15       		.uleb128 0x15
 1635 03f5 40010000 		.4byte	.LASF45
 1636 03f9 01       		.byte	0x1
 1637 03fa 3C       		.byte	0x3c
 1638 03fb E4030000 		.4byte	0x3e4
 1639 03ff 05       		.uleb128 0x5
 1640 0400 03       		.byte	0x3
 1641 0401 00000000 		.4byte	moving_median
 1642 0405 15       		.uleb128 0x15
 1643 0406 96020000 		.4byte	.LASF46
 1644 040a 01       		.byte	0x1
 1645 040b 3D       		.byte	0x3d
 1646 040c E4030000 		.4byte	0x3e4
 1647 0410 05       		.uleb128 0x5
 1648 0411 03       		.byte	0x3
 1649 0412 00000000 		.4byte	tempArray
 1650 0416 16       		.uleb128 0x16
 1651 0417 746D7000 		.ascii	"tmp\000"
 1652 041b 01       		.byte	0x1
 1653 041c 3E       		.byte	0x3e
 1654 041d 8D000000 		.4byte	0x8d
 1655 0421 05       		.uleb128 0x5
 1656 0422 03       		.byte	0x3
 1657 0423 00000000 		.4byte	tmp
 1658 0427 15       		.uleb128 0x15
 1659 0428 D5000000 		.4byte	.LASF47
 1660 042c 01       		.byte	0x1
 1661 042d E2       		.byte	0xe2
 1662 042e 68000000 		.4byte	0x68
 1663 0432 05       		.uleb128 0x5
 1664 0433 03       		.byte	0x3
 1665 0434 00000000 		.4byte	led_switch
 1666 0438 00       		.byte	0
 1667              		.section	.debug_abbrev,"",%progbits
 1668              	.Ldebug_abbrev0:
 1669 0000 01       		.uleb128 0x1
 1670 0001 11       		.uleb128 0x11
 1671 0002 01       		.byte	0x1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 37


 1672 0003 25       		.uleb128 0x25
 1673 0004 0E       		.uleb128 0xe
 1674 0005 13       		.uleb128 0x13
 1675 0006 0B       		.uleb128 0xb
 1676 0007 03       		.uleb128 0x3
 1677 0008 0E       		.uleb128 0xe
 1678 0009 1B       		.uleb128 0x1b
 1679 000a 0E       		.uleb128 0xe
 1680 000b 55       		.uleb128 0x55
 1681 000c 17       		.uleb128 0x17
 1682 000d 11       		.uleb128 0x11
 1683 000e 01       		.uleb128 0x1
 1684 000f 10       		.uleb128 0x10
 1685 0010 17       		.uleb128 0x17
 1686 0011 00       		.byte	0
 1687 0012 00       		.byte	0
 1688 0013 02       		.uleb128 0x2
 1689 0014 24       		.uleb128 0x24
 1690 0015 00       		.byte	0
 1691 0016 0B       		.uleb128 0xb
 1692 0017 0B       		.uleb128 0xb
 1693 0018 3E       		.uleb128 0x3e
 1694 0019 0B       		.uleb128 0xb
 1695 001a 03       		.uleb128 0x3
 1696 001b 0E       		.uleb128 0xe
 1697 001c 00       		.byte	0
 1698 001d 00       		.byte	0
 1699 001e 03       		.uleb128 0x3
 1700 001f 16       		.uleb128 0x16
 1701 0020 00       		.byte	0
 1702 0021 03       		.uleb128 0x3
 1703 0022 0E       		.uleb128 0xe
 1704 0023 3A       		.uleb128 0x3a
 1705 0024 0B       		.uleb128 0xb
 1706 0025 3B       		.uleb128 0x3b
 1707 0026 0B       		.uleb128 0xb
 1708 0027 49       		.uleb128 0x49
 1709 0028 13       		.uleb128 0x13
 1710 0029 00       		.byte	0
 1711 002a 00       		.byte	0
 1712 002b 04       		.uleb128 0x4
 1713 002c 24       		.uleb128 0x24
 1714 002d 00       		.byte	0
 1715 002e 0B       		.uleb128 0xb
 1716 002f 0B       		.uleb128 0xb
 1717 0030 3E       		.uleb128 0x3e
 1718 0031 0B       		.uleb128 0xb
 1719 0032 03       		.uleb128 0x3
 1720 0033 08       		.uleb128 0x8
 1721 0034 00       		.byte	0
 1722 0035 00       		.byte	0
 1723 0036 05       		.uleb128 0x5
 1724 0037 16       		.uleb128 0x16
 1725 0038 00       		.byte	0
 1726 0039 03       		.uleb128 0x3
 1727 003a 0E       		.uleb128 0xe
 1728 003b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 38


 1729 003c 0B       		.uleb128 0xb
 1730 003d 3B       		.uleb128 0x3b
 1731 003e 05       		.uleb128 0x5
 1732 003f 49       		.uleb128 0x49
 1733 0040 13       		.uleb128 0x13
 1734 0041 00       		.byte	0
 1735 0042 00       		.byte	0
 1736 0043 06       		.uleb128 0x6
 1737 0044 35       		.uleb128 0x35
 1738 0045 00       		.byte	0
 1739 0046 49       		.uleb128 0x49
 1740 0047 13       		.uleb128 0x13
 1741 0048 00       		.byte	0
 1742 0049 00       		.byte	0
 1743 004a 07       		.uleb128 0x7
 1744 004b 2E       		.uleb128 0x2e
 1745 004c 01       		.byte	0x1
 1746 004d 3F       		.uleb128 0x3f
 1747 004e 19       		.uleb128 0x19
 1748 004f 03       		.uleb128 0x3
 1749 0050 0E       		.uleb128 0xe
 1750 0051 3A       		.uleb128 0x3a
 1751 0052 0B       		.uleb128 0xb
 1752 0053 3B       		.uleb128 0x3b
 1753 0054 0B       		.uleb128 0xb
 1754 0055 27       		.uleb128 0x27
 1755 0056 19       		.uleb128 0x19
 1756 0057 49       		.uleb128 0x49
 1757 0058 13       		.uleb128 0x13
 1758 0059 11       		.uleb128 0x11
 1759 005a 01       		.uleb128 0x1
 1760 005b 12       		.uleb128 0x12
 1761 005c 06       		.uleb128 0x6
 1762 005d 40       		.uleb128 0x40
 1763 005e 18       		.uleb128 0x18
 1764 005f 9642     		.uleb128 0x2116
 1765 0061 19       		.uleb128 0x19
 1766 0062 01       		.uleb128 0x1
 1767 0063 13       		.uleb128 0x13
 1768 0064 00       		.byte	0
 1769 0065 00       		.byte	0
 1770 0066 08       		.uleb128 0x8
 1771 0067 05       		.uleb128 0x5
 1772 0068 00       		.byte	0
 1773 0069 03       		.uleb128 0x3
 1774 006a 0E       		.uleb128 0xe
 1775 006b 3A       		.uleb128 0x3a
 1776 006c 0B       		.uleb128 0xb
 1777 006d 3B       		.uleb128 0x3b
 1778 006e 0B       		.uleb128 0xb
 1779 006f 49       		.uleb128 0x49
 1780 0070 13       		.uleb128 0x13
 1781 0071 02       		.uleb128 0x2
 1782 0072 18       		.uleb128 0x18
 1783 0073 00       		.byte	0
 1784 0074 00       		.byte	0
 1785 0075 09       		.uleb128 0x9
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 39


 1786 0076 34       		.uleb128 0x34
 1787 0077 00       		.byte	0
 1788 0078 03       		.uleb128 0x3
 1789 0079 0E       		.uleb128 0xe
 1790 007a 3A       		.uleb128 0x3a
 1791 007b 0B       		.uleb128 0xb
 1792 007c 3B       		.uleb128 0x3b
 1793 007d 0B       		.uleb128 0xb
 1794 007e 49       		.uleb128 0x49
 1795 007f 13       		.uleb128 0x13
 1796 0080 02       		.uleb128 0x2
 1797 0081 18       		.uleb128 0x18
 1798 0082 00       		.byte	0
 1799 0083 00       		.byte	0
 1800 0084 0A       		.uleb128 0xa
 1801 0085 2E       		.uleb128 0x2e
 1802 0086 01       		.byte	0x1
 1803 0087 3F       		.uleb128 0x3f
 1804 0088 19       		.uleb128 0x19
 1805 0089 03       		.uleb128 0x3
 1806 008a 0E       		.uleb128 0xe
 1807 008b 3A       		.uleb128 0x3a
 1808 008c 0B       		.uleb128 0xb
 1809 008d 3B       		.uleb128 0x3b
 1810 008e 0B       		.uleb128 0xb
 1811 008f 27       		.uleb128 0x27
 1812 0090 19       		.uleb128 0x19
 1813 0091 11       		.uleb128 0x11
 1814 0092 01       		.uleb128 0x1
 1815 0093 12       		.uleb128 0x12
 1816 0094 06       		.uleb128 0x6
 1817 0095 40       		.uleb128 0x40
 1818 0096 18       		.uleb128 0x18
 1819 0097 9642     		.uleb128 0x2116
 1820 0099 19       		.uleb128 0x19
 1821 009a 01       		.uleb128 0x1
 1822 009b 13       		.uleb128 0x13
 1823 009c 00       		.byte	0
 1824 009d 00       		.byte	0
 1825 009e 0B       		.uleb128 0xb
 1826 009f 0B       		.uleb128 0xb
 1827 00a0 01       		.byte	0x1
 1828 00a1 11       		.uleb128 0x11
 1829 00a2 01       		.uleb128 0x1
 1830 00a3 12       		.uleb128 0x12
 1831 00a4 06       		.uleb128 0x6
 1832 00a5 01       		.uleb128 0x1
 1833 00a6 13       		.uleb128 0x13
 1834 00a7 00       		.byte	0
 1835 00a8 00       		.byte	0
 1836 00a9 0C       		.uleb128 0xc
 1837 00aa 34       		.uleb128 0x34
 1838 00ab 00       		.byte	0
 1839 00ac 03       		.uleb128 0x3
 1840 00ad 08       		.uleb128 0x8
 1841 00ae 3A       		.uleb128 0x3a
 1842 00af 0B       		.uleb128 0xb
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 40


 1843 00b0 3B       		.uleb128 0x3b
 1844 00b1 0B       		.uleb128 0xb
 1845 00b2 49       		.uleb128 0x49
 1846 00b3 13       		.uleb128 0x13
 1847 00b4 02       		.uleb128 0x2
 1848 00b5 18       		.uleb128 0x18
 1849 00b6 00       		.byte	0
 1850 00b7 00       		.byte	0
 1851 00b8 0D       		.uleb128 0xd
 1852 00b9 0B       		.uleb128 0xb
 1853 00ba 01       		.byte	0x1
 1854 00bb 11       		.uleb128 0x11
 1855 00bc 01       		.uleb128 0x1
 1856 00bd 12       		.uleb128 0x12
 1857 00be 06       		.uleb128 0x6
 1858 00bf 00       		.byte	0
 1859 00c0 00       		.byte	0
 1860 00c1 0E       		.uleb128 0xe
 1861 00c2 2E       		.uleb128 0x2e
 1862 00c3 01       		.byte	0x1
 1863 00c4 3F       		.uleb128 0x3f
 1864 00c5 19       		.uleb128 0x19
 1865 00c6 03       		.uleb128 0x3
 1866 00c7 0E       		.uleb128 0xe
 1867 00c8 3A       		.uleb128 0x3a
 1868 00c9 0B       		.uleb128 0xb
 1869 00ca 3B       		.uleb128 0x3b
 1870 00cb 0B       		.uleb128 0xb
 1871 00cc 49       		.uleb128 0x49
 1872 00cd 13       		.uleb128 0x13
 1873 00ce 11       		.uleb128 0x11
 1874 00cf 01       		.uleb128 0x1
 1875 00d0 12       		.uleb128 0x12
 1876 00d1 06       		.uleb128 0x6
 1877 00d2 40       		.uleb128 0x40
 1878 00d3 18       		.uleb128 0x18
 1879 00d4 9642     		.uleb128 0x2116
 1880 00d6 19       		.uleb128 0x19
 1881 00d7 01       		.uleb128 0x1
 1882 00d8 13       		.uleb128 0x13
 1883 00d9 00       		.byte	0
 1884 00da 00       		.byte	0
 1885 00db 0F       		.uleb128 0xf
 1886 00dc 34       		.uleb128 0x34
 1887 00dd 00       		.byte	0
 1888 00de 03       		.uleb128 0x3
 1889 00df 0E       		.uleb128 0xe
 1890 00e0 3A       		.uleb128 0x3a
 1891 00e1 0B       		.uleb128 0xb
 1892 00e2 3B       		.uleb128 0x3b
 1893 00e3 05       		.uleb128 0x5
 1894 00e4 49       		.uleb128 0x49
 1895 00e5 13       		.uleb128 0x13
 1896 00e6 00       		.byte	0
 1897 00e7 00       		.byte	0
 1898 00e8 10       		.uleb128 0x10
 1899 00e9 34       		.uleb128 0x34
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 41


 1900 00ea 00       		.byte	0
 1901 00eb 03       		.uleb128 0x3
 1902 00ec 08       		.uleb128 0x8
 1903 00ed 3A       		.uleb128 0x3a
 1904 00ee 0B       		.uleb128 0xb
 1905 00ef 3B       		.uleb128 0x3b
 1906 00f0 05       		.uleb128 0x5
 1907 00f1 49       		.uleb128 0x49
 1908 00f2 13       		.uleb128 0x13
 1909 00f3 02       		.uleb128 0x2
 1910 00f4 18       		.uleb128 0x18
 1911 00f5 00       		.byte	0
 1912 00f6 00       		.byte	0
 1913 00f7 11       		.uleb128 0x11
 1914 00f8 34       		.uleb128 0x34
 1915 00f9 00       		.byte	0
 1916 00fa 03       		.uleb128 0x3
 1917 00fb 0E       		.uleb128 0xe
 1918 00fc 3A       		.uleb128 0x3a
 1919 00fd 0B       		.uleb128 0xb
 1920 00fe 3B       		.uleb128 0x3b
 1921 00ff 05       		.uleb128 0x5
 1922 0100 49       		.uleb128 0x49
 1923 0101 13       		.uleb128 0x13
 1924 0102 02       		.uleb128 0x2
 1925 0103 18       		.uleb128 0x18
 1926 0104 00       		.byte	0
 1927 0105 00       		.byte	0
 1928 0106 12       		.uleb128 0x12
 1929 0107 01       		.uleb128 0x1
 1930 0108 01       		.byte	0x1
 1931 0109 49       		.uleb128 0x49
 1932 010a 13       		.uleb128 0x13
 1933 010b 01       		.uleb128 0x1
 1934 010c 13       		.uleb128 0x13
 1935 010d 00       		.byte	0
 1936 010e 00       		.byte	0
 1937 010f 13       		.uleb128 0x13
 1938 0110 21       		.uleb128 0x21
 1939 0111 00       		.byte	0
 1940 0112 49       		.uleb128 0x49
 1941 0113 13       		.uleb128 0x13
 1942 0114 2F       		.uleb128 0x2f
 1943 0115 0B       		.uleb128 0xb
 1944 0116 00       		.byte	0
 1945 0117 00       		.byte	0
 1946 0118 14       		.uleb128 0x14
 1947 0119 34       		.uleb128 0x34
 1948 011a 00       		.byte	0
 1949 011b 03       		.uleb128 0x3
 1950 011c 0E       		.uleb128 0xe
 1951 011d 3A       		.uleb128 0x3a
 1952 011e 0B       		.uleb128 0xb
 1953 011f 3B       		.uleb128 0x3b
 1954 0120 05       		.uleb128 0x5
 1955 0121 49       		.uleb128 0x49
 1956 0122 13       		.uleb128 0x13
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 42


 1957 0123 3F       		.uleb128 0x3f
 1958 0124 19       		.uleb128 0x19
 1959 0125 3C       		.uleb128 0x3c
 1960 0126 19       		.uleb128 0x19
 1961 0127 00       		.byte	0
 1962 0128 00       		.byte	0
 1963 0129 15       		.uleb128 0x15
 1964 012a 34       		.uleb128 0x34
 1965 012b 00       		.byte	0
 1966 012c 03       		.uleb128 0x3
 1967 012d 0E       		.uleb128 0xe
 1968 012e 3A       		.uleb128 0x3a
 1969 012f 0B       		.uleb128 0xb
 1970 0130 3B       		.uleb128 0x3b
 1971 0131 0B       		.uleb128 0xb
 1972 0132 49       		.uleb128 0x49
 1973 0133 13       		.uleb128 0x13
 1974 0134 3F       		.uleb128 0x3f
 1975 0135 19       		.uleb128 0x19
 1976 0136 02       		.uleb128 0x2
 1977 0137 18       		.uleb128 0x18
 1978 0138 00       		.byte	0
 1979 0139 00       		.byte	0
 1980 013a 16       		.uleb128 0x16
 1981 013b 34       		.uleb128 0x34
 1982 013c 00       		.byte	0
 1983 013d 03       		.uleb128 0x3
 1984 013e 08       		.uleb128 0x8
 1985 013f 3A       		.uleb128 0x3a
 1986 0140 0B       		.uleb128 0xb
 1987 0141 3B       		.uleb128 0x3b
 1988 0142 0B       		.uleb128 0xb
 1989 0143 49       		.uleb128 0x49
 1990 0144 13       		.uleb128 0x13
 1991 0145 3F       		.uleb128 0x3f
 1992 0146 19       		.uleb128 0x19
 1993 0147 02       		.uleb128 0x2
 1994 0148 18       		.uleb128 0x18
 1995 0149 00       		.byte	0
 1996 014a 00       		.byte	0
 1997 014b 00       		.byte	0
 1998              		.section	.debug_aranges,"",%progbits
 1999 0000 34000000 		.4byte	0x34
 2000 0004 0200     		.2byte	0x2
 2001 0006 00000000 		.4byte	.Ldebug_info0
 2002 000a 04       		.byte	0x4
 2003 000b 00       		.byte	0
 2004 000c 0000     		.2byte	0
 2005 000e 0000     		.2byte	0
 2006 0010 00000000 		.4byte	.LFB64
 2007 0014 74000000 		.4byte	.LFE64-.LFB64
 2008 0018 00000000 		.4byte	.LFB65
 2009 001c F8000000 		.4byte	.LFE65-.LFB65
 2010 0020 00000000 		.4byte	.LFB66
 2011 0024 94020000 		.4byte	.LFE66-.LFB66
 2012 0028 00000000 		.4byte	.LFB67
 2013 002c B4020000 		.4byte	.LFE67-.LFB67
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 43


 2014 0030 00000000 		.4byte	0
 2015 0034 00000000 		.4byte	0
 2016              		.section	.debug_ranges,"",%progbits
 2017              	.Ldebug_ranges0:
 2018 0000 00000000 		.4byte	.LFB64
 2019 0004 74000000 		.4byte	.LFE64
 2020 0008 00000000 		.4byte	.LFB65
 2021 000c F8000000 		.4byte	.LFE65
 2022 0010 00000000 		.4byte	.LFB66
 2023 0014 94020000 		.4byte	.LFE66
 2024 0018 00000000 		.4byte	.LFB67
 2025 001c B4020000 		.4byte	.LFE67
 2026 0020 00000000 		.4byte	0
 2027 0024 00000000 		.4byte	0
 2028              		.section	.debug_line,"",%progbits
 2029              	.Ldebug_line0:
 2030 0000 A8020000 		.section	.debug_str,"MS",%progbits,1
 2030      02004C01 
 2030      00000201 
 2030      FB0E0D00 
 2030      01010101 
 2031              	.LASF34:
 2032 0000 6E65775F 		.ascii	"new_angle\000"
 2032      616E676C 
 2032      6500
 2033              	.LASF27:
 2034 000a 70726576 		.ascii	"prev_err\000"
 2034      5F657272 
 2034      00
 2035              	.LASF36:
 2036 0013 616E676C 		.ascii	"angle\000"
 2036      6500
 2037              	.LASF35:
 2038 0019 6E65775F 		.ascii	"new_pos_set\000"
 2038      706F735F 
 2038      73657400 
 2039              	.LASF42:
 2040 0025 74656D70 		.ascii	"temp\000"
 2040      00
 2041              	.LASF2:
 2042 002a 73686F72 		.ascii	"short int\000"
 2042      7420696E 
 2042      7400
 2043              	.LASF18:
 2044 0034 73697A65 		.ascii	"sizetype\000"
 2044      74797065 
 2044      00
 2045              	.LASF48:
 2046 003d 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2046      43313120 
 2046      352E342E 
 2046      31203230 
 2046      31363036 
 2047 0070 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2047      20726576 
 2047      6973696F 
 2047      6E203233 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 44


 2047      37373135 
 2048 00a3 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2048      66756E63 
 2048      74696F6E 
 2048      2D736563 
 2048      74696F6E 
 2049              	.LASF24:
 2050 00cb 6D61696E 		.ascii	"main\000"
 2050      00
 2051              	.LASF43:
 2052 00d0 68656C70 		.ascii	"help\000"
 2052      00
 2053              	.LASF47:
 2054 00d5 6C65645F 		.ascii	"led_switch\000"
 2054      73776974 
 2054      636800
 2055              	.LASF33:
 2056 00e0 64617461 		.ascii	"data_read_mode\000"
 2056      5F726561 
 2056      645F6D6F 
 2056      646500
 2057              	.LASF11:
 2058 00ef 75696E74 		.ascii	"uint8\000"
 2058      3800
 2059              	.LASF32:
 2060 00f5 6572726F 		.ascii	"errorStatus\000"
 2060      72537461 
 2060      74757300 
 2061              	.LASF13:
 2062 0101 666C6F61 		.ascii	"float\000"
 2062      7400
 2063              	.LASF6:
 2064 0107 6C6F6E67 		.ascii	"long long int\000"
 2064      206C6F6E 
 2064      6720696E 
 2064      7400
 2065              	.LASF4:
 2066 0115 6C6F6E67 		.ascii	"long int\000"
 2066      20696E74 
 2066      00
 2067              	.LASF52:
 2068 011e 74696D65 		.ascii	"timercapture\000"
 2068      72636170 
 2068      74757265 
 2068      00
 2069              	.LASF25:
 2070 012b 62757474 		.ascii	"button\000"
 2070      6F6E00
 2071              	.LASF1:
 2072 0132 756E7369 		.ascii	"unsigned char\000"
 2072      676E6564 
 2072      20636861 
 2072      7200
 2073              	.LASF45:
 2074 0140 6D6F7669 		.ascii	"moving_median\000"
 2074      6E675F6D 
 2074      65646961 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 45


 2074      6E00
 2075              	.LASF17:
 2076 014e 6C6F6E67 		.ascii	"long double\000"
 2076      20646F75 
 2076      626C6500 
 2077              	.LASF22:
 2078 015a 72785374 		.ascii	"rxStatus\000"
 2078      61747573 
 2078      00
 2079              	.LASF44:
 2080 0163 6E65775F 		.ascii	"new_pos\000"
 2080      706F7300 
 2081              	.LASF0:
 2082 016b 7369676E 		.ascii	"signed char\000"
 2082      65642063 
 2082      68617200 
 2083              	.LASF7:
 2084 0177 6C6F6E67 		.ascii	"long long unsigned int\000"
 2084      206C6F6E 
 2084      6720756E 
 2084      7369676E 
 2084      65642069 
 2085              	.LASF8:
 2086 018e 756E7369 		.ascii	"unsigned int\000"
 2086      676E6564 
 2086      20696E74 
 2086      00
 2087              	.LASF29:
 2088 019b 74696D65 		.ascii	"time\000"
 2088      00
 2089              	.LASF21:
 2090 01a0 52784973 		.ascii	"RxIsr\000"
 2090      7200
 2091              	.LASF3:
 2092 01a6 73686F72 		.ascii	"short unsigned int\000"
 2092      7420756E 
 2092      7369676E 
 2092      65642069 
 2092      6E7400
 2093              	.LASF50:
 2094 01b9 433A5C55 		.ascii	"C:\\Users\\Andrew\\Documents\\GitHub\\Hydraulic-Mim"
 2094      73657273 
 2094      5C416E64 
 2094      7265775C 
 2094      446F6375 
 2095 01e7 69632D41 		.ascii	"ic-Arm\\PSOC_arm_project.cydsn\000"
 2095      726D5C50 
 2095      534F435F 
 2095      61726D5F 
 2095      70726F6A 
 2096              	.LASF15:
 2097 0205 63686172 		.ascii	"char\000"
 2097      00
 2098              	.LASF10:
 2099 020a 696E7433 		.ascii	"int32_t\000"
 2099      325F7400 
 2100              	.LASF19:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 46


 2101 0212 70756C73 		.ascii	"pulselength\000"
 2101      656C656E 
 2101      67746800 
 2102              	.LASF37:
 2103 021e 616E676C 		.ascii	"angletemp\000"
 2103      6574656D 
 2103      7000
 2104              	.LASF30:
 2105 0228 6D6F7669 		.ascii	"moving_avg\000"
 2105      6E675F61 
 2105      766700
 2106              	.LASF12:
 2107 0233 75696E74 		.ascii	"uint16\000"
 2107      313600
 2108              	.LASF41:
 2109 023a 61646356 		.ascii	"adcValue2\000"
 2109      616C7565 
 2109      3200
 2110              	.LASF49:
 2111 0244 6D61696E 		.ascii	"main.c\000"
 2111      2E6300
 2112              	.LASF16:
 2113 024b 72656738 		.ascii	"reg8\000"
 2113      00
 2114              	.LASF5:
 2115 0250 6C6F6E67 		.ascii	"long unsigned int\000"
 2115      20756E73 
 2115      69676E65 
 2115      6420696E 
 2115      7400
 2116              	.LASF38:
 2117 0262 69734E65 		.ascii	"isNegative\000"
 2117      67617469 
 2117      766500
 2118              	.LASF28:
 2119 026d 7069645F 		.ascii	"pid_integral\000"
 2119      696E7465 
 2119      6772616C 
 2119      00
 2120              	.LASF9:
 2121 027a 5F5F696E 		.ascii	"__int32_t\000"
 2121      7433325F 
 2121      7400
 2122              	.LASF23:
 2123 0284 72784461 		.ascii	"rxData\000"
 2123      746100
 2124              	.LASF20:
 2125 028b 6164635F 		.ascii	"adc_update\000"
 2125      75706461 
 2125      746500
 2126              	.LASF46:
 2127 0296 74656D70 		.ascii	"tempArray\000"
 2127      41727261 
 2127      7900
 2128              	.LASF39:
 2129 02a0 73656E64 		.ascii	"sendValue\000"
 2129      56616C75 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cchqcOMD.s 			page 47


 2129      6500
 2130              	.LASF14:
 2131 02aa 646F7562 		.ascii	"double\000"
 2131      6C6500
 2132              	.LASF31:
 2133 02b1 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2133      52784275 
 2133      66666572 
 2133      00
 2134              	.LASF51:
 2135 02be 64757479 		.ascii	"dutycyclelength\000"
 2135      6379636C 
 2135      656C656E 
 2135      67746800 
 2136              	.LASF40:
 2137 02ce 61646356 		.ascii	"adcValue1\000"
 2137      616C7565 
 2137      3100
 2138              	.LASF26:
 2139 02d8 62757474 		.ascii	"buttonPre\000"
 2139      6F6E5072 
 2139      6500
 2140              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
