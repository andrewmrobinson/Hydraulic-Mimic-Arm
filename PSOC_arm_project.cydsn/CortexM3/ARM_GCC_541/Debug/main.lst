ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	psoc_id,4,4
  20              		.syntax unified
  21              		.global _printf_float
  22              		.thumb
  23              		.syntax unified
  24              		.global	errorStatus
  25              		.bss
  26              		.type	errorStatus, %object
  27              		.size	errorStatus, 1
  28              	errorStatus:
  29 0000 00       		.space	1
  30              		.section	.text.writePWM,"ax",%progbits
  31              		.align	2
  32              		.global	writePWM
  33              		.thumb
  34              		.thumb_func
  35              		.type	writePWM, %function
  36              	writePWM:
  37              	.LFB64:
  38              		.file 1 "main.c"
   1:main.c        **** 
   2:main.c        **** #include <project.h>
   3:main.c        **** #include <stdio.h>
   4:main.c        **** #include "common.h"
   5:main.c        **** #include <math.h>
   6:main.c        **** #include <stdlib.h>     /* strtod */
   7:main.c        **** 
   8:main.c        **** #define	Frequency 1000000.0			// Frequency of PWMClock
   9:main.c        **** #define	One_ms (Frequency/1000.0)	// 1 ms constant
  10:main.c        **** #define filter_size 7
  11:main.c        **** #define CYL_NO 4                    // Number of connected cylinders
  12:main.c        **** 
  13:main.c        **** #define PSOC_ID_BYTE_ADDRESS          (0x20)
  14:main.c        **** int psoc_id;
  15:main.c        **** 
  16:main.c        **** 
  17:main.c        **** /* Add an explicit reference to the floating point printf library to allow
  18:main.c        **** the usage of floating point conversion specifier */
  19:main.c        **** #if defined (__GNUC__)
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 2


  20:main.c        ****     asm (".global _printf_float");
  21:main.c        **** #endif
  22:main.c        **** 
  23:main.c        **** uint8 errorStatus = 0u;
  24:main.c        **** 
  25:main.c        **** void writePWM(int cylinder, int pulse){
  39              		.loc 1 25 0
  40              		.cfi_startproc
  41              		@ args = 0, pretend = 0, frame = 8
  42              		@ frame_needed = 1, uses_anonymous_args = 0
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 82B0     		sub	sp, sp, #8
  48              		.cfi_def_cfa_offset 16
  49 0004 00AF     		add	r7, sp, #0
  50              		.cfi_def_cfa_register 7
  51 0006 7860     		str	r0, [r7, #4]
  52 0008 3960     		str	r1, [r7]
  26:main.c        ****     switch(cylinder){
  53              		.loc 1 26 0
  54 000a 7B68     		ldr	r3, [r7, #4]
  55 000c 032B     		cmp	r3, #3
  56 000e 2FD8     		bhi	.L8
  57 0010 01A2     		adr	r2, .L4
  58 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  59 0016 00BF     		.p2align 2
  60              	.L4:
  61 0018 29000000 		.word	.L3+1
  62 001c 3B000000 		.word	.L5+1
  63 0020 4D000000 		.word	.L6+1
  64 0024 5F000000 		.word	.L7+1
  65              		.p2align 1
  66              	.L3:
  27:main.c        ****                 case 0:
  28:main.c        ****                     PWM_0_WriteCompare(pulse + 1500);
  67              		.loc 1 28 0
  68 0028 3B68     		ldr	r3, [r7]
  69 002a 9BB2     		uxth	r3, r3
  70 002c 03F2DC53 		addw	r3, r3, #1500
  71 0030 9BB2     		uxth	r3, r3
  72 0032 1846     		mov	r0, r3
  73 0034 FFF7FEFF 		bl	PWM_0_WriteCompare
  29:main.c        ****                     break;
  74              		.loc 1 29 0
  75 0038 1AE0     		b	.L2
  76              	.L5:
  30:main.c        ****                 case 1:
  31:main.c        ****                     PWM_1_WriteCompare(pulse + 1500);
  77              		.loc 1 31 0
  78 003a 3B68     		ldr	r3, [r7]
  79 003c 9BB2     		uxth	r3, r3
  80 003e 03F2DC53 		addw	r3, r3, #1500
  81 0042 9BB2     		uxth	r3, r3
  82 0044 1846     		mov	r0, r3
  83 0046 FFF7FEFF 		bl	PWM_1_WriteCompare
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 3


  32:main.c        ****                     break;
  84              		.loc 1 32 0
  85 004a 11E0     		b	.L2
  86              	.L6:
  33:main.c        ****                 case 2:
  34:main.c        ****                     PWM_2_WriteCompare(pulse + 1500);
  87              		.loc 1 34 0
  88 004c 3B68     		ldr	r3, [r7]
  89 004e 9BB2     		uxth	r3, r3
  90 0050 03F2DC53 		addw	r3, r3, #1500
  91 0054 9BB2     		uxth	r3, r3
  92 0056 1846     		mov	r0, r3
  93 0058 FFF7FEFF 		bl	PWM_2_WriteCompare
  35:main.c        ****                     break;
  94              		.loc 1 35 0
  95 005c 08E0     		b	.L2
  96              	.L7:
  36:main.c        ****                 case 3:
  37:main.c        ****                     PWM_3_WriteCompare(pulse + 1500);
  97              		.loc 1 37 0
  98 005e 3B68     		ldr	r3, [r7]
  99 0060 9BB2     		uxth	r3, r3
 100 0062 03F2DC53 		addw	r3, r3, #1500
 101 0066 9BB2     		uxth	r3, r3
 102 0068 1846     		mov	r0, r3
 103 006a FFF7FEFF 		bl	PWM_3_WriteCompare
  38:main.c        ****                     break;
 104              		.loc 1 38 0
 105 006e 00BF     		nop
 106              	.L2:
 107              	.L8:
  39:main.c        ****             }  
  40:main.c        **** }
 108              		.loc 1 40 0
 109 0070 00BF     		nop
 110 0072 0837     		adds	r7, r7, #8
 111              		.cfi_def_cfa_offset 8
 112 0074 BD46     		mov	sp, r7
 113              		.cfi_def_cfa_register 13
 114              		@ sp needed
 115 0076 80BD     		pop	{r7, pc}
 116              		.cfi_endproc
 117              	.LFE64:
 118              		.size	writePWM, .-writePWM
 119              		.section	.text.pulseCheck,"ax",%progbits
 120              		.align	2
 121              		.global	pulseCheck
 122              		.thumb
 123              		.thumb_func
 124              		.type	pulseCheck, %function
 125              	pulseCheck:
 126              	.LFB65:
  41:main.c        **** 
  42:main.c        **** int pulseCheck(int pulse, int offset_upper, int offset_lower) {
 127              		.loc 1 42 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 4


 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 0000 80B4     		push	{r7}
 133              		.cfi_def_cfa_offset 4
 134              		.cfi_offset 7, -4
 135 0002 85B0     		sub	sp, sp, #20
 136              		.cfi_def_cfa_offset 24
 137 0004 00AF     		add	r7, sp, #0
 138              		.cfi_def_cfa_register 7
 139 0006 F860     		str	r0, [r7, #12]
 140 0008 B960     		str	r1, [r7, #8]
 141 000a 7A60     		str	r2, [r7, #4]
  43:main.c        ****     if(pulse<0){pulse = pulse - offset_lower;}
 142              		.loc 1 43 0
 143 000c FB68     		ldr	r3, [r7, #12]
 144 000e 002B     		cmp	r3, #0
 145 0010 03DA     		bge	.L10
 146              		.loc 1 43 0 is_stmt 0 discriminator 1
 147 0012 FA68     		ldr	r2, [r7, #12]
 148 0014 7B68     		ldr	r3, [r7, #4]
 149 0016 D31A     		subs	r3, r2, r3
 150 0018 FB60     		str	r3, [r7, #12]
 151              	.L10:
  44:main.c        ****         if(pulse>0){pulse = pulse + offset_upper;}
 152              		.loc 1 44 0 is_stmt 1
 153 001a FB68     		ldr	r3, [r7, #12]
 154 001c 002B     		cmp	r3, #0
 155 001e 03DD     		ble	.L11
 156              		.loc 1 44 0 is_stmt 0 discriminator 1
 157 0020 FA68     		ldr	r2, [r7, #12]
 158 0022 BB68     		ldr	r3, [r7, #8]
 159 0024 1344     		add	r3, r3, r2
 160 0026 FB60     		str	r3, [r7, #12]
 161              	.L11:
  45:main.c        ****         if(pulse<-500){pulse=-500;}
 162              		.loc 1 45 0 is_stmt 1
 163 0028 FB68     		ldr	r3, [r7, #12]
 164 002a 13F5FA7F 		cmn	r3, #500
 165 002e 01DA     		bge	.L12
 166              		.loc 1 45 0 is_stmt 0 discriminator 1
 167 0030 074B     		ldr	r3, .L15
 168 0032 FB60     		str	r3, [r7, #12]
 169              	.L12:
  46:main.c        ****         if(pulse>500){pulse=500;}
 170              		.loc 1 46 0 is_stmt 1
 171 0034 FB68     		ldr	r3, [r7, #12]
 172 0036 B3F5FA7F 		cmp	r3, #500
 173 003a 02DD     		ble	.L13
 174              		.loc 1 46 0 is_stmt 0 discriminator 1
 175 003c 4FF4FA73 		mov	r3, #500
 176 0040 FB60     		str	r3, [r7, #12]
 177              	.L13:
  47:main.c        ****     return pulse;
 178              		.loc 1 47 0 is_stmt 1
 179 0042 FB68     		ldr	r3, [r7, #12]
  48:main.c        **** }
 180              		.loc 1 48 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 5


 181 0044 1846     		mov	r0, r3
 182 0046 1437     		adds	r7, r7, #20
 183              		.cfi_def_cfa_offset 4
 184 0048 BD46     		mov	sp, r7
 185              		.cfi_def_cfa_register 13
 186              		@ sp needed
 187 004a 80BC     		pop	{r7}
 188              		.cfi_restore 7
 189              		.cfi_def_cfa_offset 0
 190 004c 7047     		bx	lr
 191              	.L16:
 192 004e 00BF     		.align	2
 193              	.L15:
 194 0050 0CFEFFFF 		.word	-500
 195              		.cfi_endproc
 196              	.LFE65:
 197              		.size	pulseCheck, .-pulseCheck
 198              		.global	data_read_mode
 199              		.bss
 200 0001 000000   		.align	2
 201              		.type	data_read_mode, %object
 202              		.size	data_read_mode, 4
 203              	data_read_mode:
 204 0004 00000000 		.space	4
 205              		.comm	new_pos_set,16,4
 206              		.comm	new_pos,16,4
 207              		.comm	pos,16,4
 208              		.comm	pulse,16,4
 209              		.comm	pulse_temp,16,4
 210              		.comm	err,32,8
 211              		.comm	adcValue,8,4
 212              		.comm	der,32,8
 213              		.comm	prev_err,32,8
 214              		.comm	pid_integral,32,8
 215              		.global	cyl_set
 216              		.align	2
 217              		.type	cyl_set, %object
 218              		.size	cyl_set, 4
 219              	cyl_set:
 220 0008 00000000 		.space	4
 221              		.comm	cyl_tmp,1,4
 222              		.comm	dts,240,8
 223              		.global	dts_ct
 224              		.align	2
 225              		.type	dts_ct, %object
 226              		.size	dts_ct, 4
 227              	dts_ct:
 228 000c 00000000 		.space	4
 229              		.global	offsets
 230              		.align	2
 231              		.type	offsets, %object
 232              		.size	offsets, 32
 233              	offsets:
 234 0010 00000000 		.space	32
 234      00000000 
 234      00000000 
 234      00000000 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 6


 234      00000000 
 235              		.comm	sendValue,100,4
 236              		.comm	temp,20,4
 237              		.global	nn
 238              		.align	2
 239              		.type	nn, %object
 240              		.size	nn, 4
 241              	nn:
 242 0030 00000000 		.space	4
 243              		.global	pid
 244              		.data
 245              		.align	3
 246              		.type	pid, %object
 247              		.size	pid, 24
 248              	pid:
 249 0000 33333333 		.word	858993459
 250 0004 3333D33F 		.word	1070805811
 251 0008 FCA9F1D2 		.word	-755914244
 252 000c 4D62503F 		.word	1062232653
 253 0010 00000000 		.word	0
 254 0014 00000000 		.word	0
 255              		.comm	help,100,4
 256              		.global	tt
 257              		.bss
 258              		.align	2
 259              		.type	tt, %object
 260              		.size	tt, 4
 261              	tt:
 262 0034 00000000 		.space	4
 263              		.global	start_calib
 264              		.align	2
 265              		.type	start_calib, %object
 266              		.size	start_calib, 4
 267              	start_calib:
 268 0038 00000000 		.space	4
 269              		.global	cyl_no
 270              		.align	2
 271              		.type	cyl_no, %object
 272              		.size	cyl_no, 4
 273              	cyl_no:
 274 003c 00000000 		.space	4
 275              		.global	moving_median
 276              		.align	2
 277              		.type	moving_median, %object
 278              		.size	moving_median, 56
 279              	moving_median:
 280 0040 00000000 		.space	56
 280      00000000 
 280      00000000 
 280      00000000 
 280      00000000 
 281              		.comm	tempArray,14,4
 282              		.comm	tmp,2,2
 283              		.section	.text.adc_update,"ax",%progbits
 284              		.align	2
 285              		.global	adc_update
 286              		.thumb
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 7


 287              		.thumb_func
 288              		.type	adc_update, %function
 289              	adc_update:
 290              	.LFB66:
  49:main.c        **** 
  50:main.c        **** 
  51:main.c        **** int data_read_mode = 0;
  52:main.c        **** 
  53:main.c        **** volatile int new_pos_set[CYL_NO];
  54:main.c        **** int new_pos[CYL_NO];
  55:main.c        **** int pos[CYL_NO];
  56:main.c        **** int pulse[CYL_NO];
  57:main.c        **** int pulse_temp[CYL_NO];
  58:main.c        **** double err[CYL_NO];
  59:main.c        **** uint16 adcValue[CYL_NO];
  60:main.c        **** double der[CYL_NO];
  61:main.c        **** double prev_err[CYL_NO];
  62:main.c        **** double pid_integral[CYL_NO];
  63:main.c        **** 
  64:main.c        **** int cyl_set = 0;
  65:main.c        **** char cyl_tmp[1];
  66:main.c        **** double dts[30];
  67:main.c        **** int dts_ct = 0;
  68:main.c        **** 
  69:main.c        **** int offsets[4][2] = {{0,0},{0,0},{0,0},{0,0}}; //{lower,upper} - both positive
  70:main.c        **** 
  71:main.c        **** char sendValue[100];
  72:main.c        **** char temp[20];
  73:main.c        **** int nn=0;
  74:main.c        **** double pid[3] = {0.3,0.001,0.0};
  75:main.c        **** 
  76:main.c        **** char help[100];
  77:main.c        **** int tt = 0;
  78:main.c        **** 
  79:main.c        **** int start_calib = 0;
  80:main.c        **** int cyl_no = 0;
  81:main.c        **** 
  82:main.c        **** uint16 moving_median[CYL_NO][filter_size] = {0};
  83:main.c        **** uint16 tempArray[filter_size];
  84:main.c        **** uint16 tmp;
  85:main.c        **** 
  86:main.c        **** CY_ISR(adc_update){
 291              		.loc 1 86 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 24
 294              		@ frame_needed = 1, uses_anonymous_args = 0
 295 0000 80B5     		push	{r7, lr}
 296              		.cfi_def_cfa_offset 8
 297              		.cfi_offset 7, -8
 298              		.cfi_offset 14, -4
 299 0002 86B0     		sub	sp, sp, #24
 300              		.cfi_def_cfa_offset 32
 301 0004 00AF     		add	r7, sp, #0
 302              		.cfi_def_cfa_register 7
 303              	.LBB2:
  87:main.c        ****     for(int c = 0;c<CYL_NO;c++){
 304              		.loc 1 87 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 8


 305 0006 0023     		movs	r3, #0
 306 0008 7B61     		str	r3, [r7, #20]
 307 000a 9DE0     		b	.L18
 308              	.L28:
  88:main.c        ****         AMux_0_FastSelect(c);
 309              		.loc 1 88 0
 310 000c 7B69     		ldr	r3, [r7, #20]
 311 000e DBB2     		uxtb	r3, r3
 312 0010 1846     		mov	r0, r3
 313 0012 FFF7FEFF 		bl	AMux_0_FastSelect
 314              	.LBB3:
  89:main.c        ****         
  90:main.c        ****         for(int j=0;j<filter_size-1;j++){
 315              		.loc 1 90 0
 316 0016 0023     		movs	r3, #0
 317 0018 3B61     		str	r3, [r7, #16]
 318 001a 16E0     		b	.L19
 319              	.L20:
  91:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 320              		.loc 1 91 0 discriminator 3
 321 001c 3B69     		ldr	r3, [r7, #16]
 322 001e 591C     		adds	r1, r3, #1
 323 0020 4E48     		ldr	r0, .L29
 324 0022 7A69     		ldr	r2, [r7, #20]
 325 0024 1346     		mov	r3, r2
 326 0026 DB00     		lsls	r3, r3, #3
 327 0028 9B1A     		subs	r3, r3, r2
 328 002a 0B44     		add	r3, r3, r1
 329 002c 30F81300 		ldrh	r0, [r0, r3, lsl #1]
 330 0030 4A49     		ldr	r1, .L29
 331 0032 7A69     		ldr	r2, [r7, #20]
 332 0034 1346     		mov	r3, r2
 333 0036 DB00     		lsls	r3, r3, #3
 334 0038 9B1A     		subs	r3, r3, r2
 335 003a 3A69     		ldr	r2, [r7, #16]
 336 003c 1344     		add	r3, r3, r2
 337 003e 0246     		mov	r2, r0	@ movhi
 338 0040 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
  90:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 339              		.loc 1 90 0 discriminator 3
 340 0044 3B69     		ldr	r3, [r7, #16]
 341 0046 0133     		adds	r3, r3, #1
 342 0048 3B61     		str	r3, [r7, #16]
 343              	.L19:
  90:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 344              		.loc 1 90 0 is_stmt 0 discriminator 1
 345 004a 3B69     		ldr	r3, [r7, #16]
 346 004c 052B     		cmp	r3, #5
 347 004e E5DD     		ble	.L20
 348              	.LBE3:
  92:main.c        ****         }
  93:main.c        ****         
  94:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 349              		.loc 1 94 0 is_stmt 1
 350 0050 FFF7FEFF 		bl	ADC_0_GetResult16
 351 0054 0346     		mov	r3, r0
 352 0056 98B2     		uxth	r0, r3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 9


 353 0058 4049     		ldr	r1, .L29
 354 005a 7A69     		ldr	r2, [r7, #20]
 355 005c 1346     		mov	r3, r2
 356 005e DB00     		lsls	r3, r3, #3
 357 0060 9B1A     		subs	r3, r3, r2
 358 0062 5B00     		lsls	r3, r3, #1
 359 0064 0B44     		add	r3, r3, r1
 360 0066 0C33     		adds	r3, r3, #12
 361 0068 0246     		mov	r2, r0	@ movhi
 362 006a 1A80     		strh	r2, [r3]	@ movhi
  95:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 363              		.loc 1 95 0
 364 006c FFF7FEFF 		bl	ADC_0_GetResult16
 365 0070 0346     		mov	r3, r0
 366 0072 98B2     		uxth	r0, r3
 367 0074 3949     		ldr	r1, .L29
 368 0076 7A69     		ldr	r2, [r7, #20]
 369 0078 1346     		mov	r3, r2
 370 007a DB00     		lsls	r3, r3, #3
 371 007c 9B1A     		subs	r3, r3, r2
 372 007e 5B00     		lsls	r3, r3, #1
 373 0080 0B44     		add	r3, r3, r1
 374 0082 0C33     		adds	r3, r3, #12
 375 0084 0246     		mov	r2, r0	@ movhi
 376 0086 1A80     		strh	r2, [r3]	@ movhi
  96:main.c        ****         ADC_0_IsEndConversion(ADC_0_WAIT_FOR_RESULT);
 377              		.loc 1 96 0
 378 0088 0020     		movs	r0, #0
 379 008a FFF7FEFF 		bl	ADC_0_IsEndConversion
  97:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 380              		.loc 1 97 0
 381 008e FFF7FEFF 		bl	ADC_0_GetResult16
 382 0092 0346     		mov	r3, r0
 383 0094 98B2     		uxth	r0, r3
 384 0096 3149     		ldr	r1, .L29
 385 0098 7A69     		ldr	r2, [r7, #20]
 386 009a 1346     		mov	r3, r2
 387 009c DB00     		lsls	r3, r3, #3
 388 009e 9B1A     		subs	r3, r3, r2
 389 00a0 5B00     		lsls	r3, r3, #1
 390 00a2 0B44     		add	r3, r3, r1
 391 00a4 0C33     		adds	r3, r3, #12
 392 00a6 0246     		mov	r2, r0	@ movhi
 393 00a8 1A80     		strh	r2, [r3]	@ movhi
 394              	.LBB4:
  98:main.c        ****         
  99:main.c        ****         for(int j=0;j<filter_size;j++){
 395              		.loc 1 99 0
 396 00aa 0023     		movs	r3, #0
 397 00ac FB60     		str	r3, [r7, #12]
 398 00ae 0FE0     		b	.L21
 399              	.L22:
 100:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 400              		.loc 1 100 0 discriminator 3
 401 00b0 2A49     		ldr	r1, .L29
 402 00b2 7A69     		ldr	r2, [r7, #20]
 403 00b4 1346     		mov	r3, r2
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 10


 404 00b6 DB00     		lsls	r3, r3, #3
 405 00b8 9B1A     		subs	r3, r3, r2
 406 00ba FA68     		ldr	r2, [r7, #12]
 407 00bc 1344     		add	r3, r3, r2
 408 00be 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 409 00c2 274A     		ldr	r2, .L29+4
 410 00c4 FB68     		ldr	r3, [r7, #12]
 411 00c6 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  99:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 412              		.loc 1 99 0 discriminator 3
 413 00ca FB68     		ldr	r3, [r7, #12]
 414 00cc 0133     		adds	r3, r3, #1
 415 00ce FB60     		str	r3, [r7, #12]
 416              	.L21:
  99:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 417              		.loc 1 99 0 is_stmt 0 discriminator 1
 418 00d0 FB68     		ldr	r3, [r7, #12]
 419 00d2 062B     		cmp	r3, #6
 420 00d4 ECDD     		ble	.L22
 421              	.LBE4:
 422              	.LBB5:
 101:main.c        ****         }
 102:main.c        ****         for(int i = 0; i < filter_size; i++){                     //Loop for ascending ordering
 423              		.loc 1 102 0 is_stmt 1
 424 00d6 0023     		movs	r3, #0
 425 00d8 BB60     		str	r3, [r7, #8]
 426 00da 29E0     		b	.L23
 427              	.L27:
 428              	.LBB6:
 103:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 429              		.loc 1 103 0
 430 00dc 0023     		movs	r3, #0
 431 00de 7B60     		str	r3, [r7, #4]
 432 00e0 20E0     		b	.L24
 433              	.L26:
 104:main.c        ****         	{
 105:main.c        ****         		if (tempArray[j] > tempArray[i])                //Comparing other array elements
 434              		.loc 1 105 0
 435 00e2 1F4A     		ldr	r2, .L29+4
 436 00e4 7B68     		ldr	r3, [r7, #4]
 437 00e6 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 438 00ea 1D49     		ldr	r1, .L29+4
 439 00ec BB68     		ldr	r3, [r7, #8]
 440 00ee 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 441 00f2 9A42     		cmp	r2, r3
 442 00f4 13D9     		bls	.L25
 106:main.c        ****         		{
 107:main.c        ****         			tmp = tempArray[i];         //Using temporary variable for storing last value
 443              		.loc 1 107 0
 444 00f6 1A4A     		ldr	r2, .L29+4
 445 00f8 BB68     		ldr	r3, [r7, #8]
 446 00fa 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 447 00fe 194B     		ldr	r3, .L29+8
 448 0100 1A80     		strh	r2, [r3]	@ movhi
 108:main.c        ****         			tempArray[i] = tempArray[j];            //replacing value
 449              		.loc 1 108 0
 450 0102 174A     		ldr	r2, .L29+4
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 11


 451 0104 7B68     		ldr	r3, [r7, #4]
 452 0106 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 453 010a 154A     		ldr	r2, .L29+4
 454 010c BB68     		ldr	r3, [r7, #8]
 455 010e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 109:main.c        ****         			tempArray[j] = tmp;             //storing last value
 456              		.loc 1 109 0
 457 0112 144B     		ldr	r3, .L29+8
 458 0114 1988     		ldrh	r1, [r3]
 459 0116 124A     		ldr	r2, .L29+4
 460 0118 7B68     		ldr	r3, [r7, #4]
 461 011a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 462              	.L25:
 103:main.c        ****         	{
 463              		.loc 1 103 0 discriminator 2
 464 011e 7B68     		ldr	r3, [r7, #4]
 465 0120 0133     		adds	r3, r3, #1
 466 0122 7B60     		str	r3, [r7, #4]
 467              	.L24:
 103:main.c        ****         	{
 468              		.loc 1 103 0 is_stmt 0 discriminator 1
 469 0124 7B68     		ldr	r3, [r7, #4]
 470 0126 062B     		cmp	r3, #6
 471 0128 DBDD     		ble	.L26
 472              	.LBE6:
 102:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 473              		.loc 1 102 0 is_stmt 1 discriminator 2
 474 012a BB68     		ldr	r3, [r7, #8]
 475 012c 0133     		adds	r3, r3, #1
 476 012e BB60     		str	r3, [r7, #8]
 477              	.L23:
 102:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 478              		.loc 1 102 0 is_stmt 0 discriminator 1
 479 0130 BB68     		ldr	r3, [r7, #8]
 480 0132 062B     		cmp	r3, #6
 481 0134 D2DD     		ble	.L27
 482              	.LBE5:
 110:main.c        ****         		}  
 111:main.c        ****         	}
 112:main.c        ****         }
 113:main.c        ****         adcValue[c] = tempArray[(filter_size-1)/2];
 483              		.loc 1 113 0 is_stmt 1 discriminator 2
 484 0136 0A4B     		ldr	r3, .L29+4
 485 0138 D988     		ldrh	r1, [r3, #6]
 486 013a 0B4A     		ldr	r2, .L29+12
 487 013c 7B69     		ldr	r3, [r7, #20]
 488 013e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  87:main.c        ****         AMux_0_FastSelect(c);
 489              		.loc 1 87 0 discriminator 2
 490 0142 7B69     		ldr	r3, [r7, #20]
 491 0144 0133     		adds	r3, r3, #1
 492 0146 7B61     		str	r3, [r7, #20]
 493              	.L18:
  87:main.c        ****         AMux_0_FastSelect(c);
 494              		.loc 1 87 0 is_stmt 0 discriminator 1
 495 0148 7B69     		ldr	r3, [r7, #20]
 496 014a 032B     		cmp	r3, #3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 12


 497 014c 7FF75EAF 		ble	.L28
 498              	.LBE2:
 114:main.c        ****     }
 115:main.c        ****     update_median_isr_ClearPending();
 499              		.loc 1 115 0 is_stmt 1
 500 0150 FFF7FEFF 		bl	update_median_isr_ClearPending
 116:main.c        ****     
 117:main.c        **** }
 501              		.loc 1 117 0
 502 0154 00BF     		nop
 503 0156 1837     		adds	r7, r7, #24
 504              		.cfi_def_cfa_offset 8
 505 0158 BD46     		mov	sp, r7
 506              		.cfi_def_cfa_register 13
 507              		@ sp needed
 508 015a 80BD     		pop	{r7, pc}
 509              	.L30:
 510              		.align	2
 511              	.L29:
 512 015c 00000000 		.word	moving_median
 513 0160 00000000 		.word	tempArray
 514 0164 00000000 		.word	tmp
 515 0168 00000000 		.word	adcValue
 516              		.cfi_endproc
 517              	.LFE66:
 518              		.size	adc_update, .-adc_update
 519              		.section	.text.RxIsr,"ax",%progbits
 520              		.align	2
 521              		.global	RxIsr
 522              		.thumb
 523              		.thumb_func
 524              		.type	RxIsr, %function
 525              	RxIsr:
 526              	.LFB67:
 118:main.c        **** 
 119:main.c        **** 
 120:main.c        **** CY_ISR(RxIsr)
 121:main.c        **** {
 527              		.loc 1 121 0
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 8
 530              		@ frame_needed = 1, uses_anonymous_args = 0
 531 0000 90B5     		push	{r4, r7, lr}
 532              		.cfi_def_cfa_offset 12
 533              		.cfi_offset 4, -12
 534              		.cfi_offset 7, -8
 535              		.cfi_offset 14, -4
 536 0002 83B0     		sub	sp, sp, #12
 537              		.cfi_def_cfa_offset 24
 538 0004 00AF     		add	r7, sp, #0
 539              		.cfi_def_cfa_register 7
 540              	.L66:
 122:main.c        ****     uint8 rxStatus;         
 123:main.c        ****     uint8 rxData;           
 124:main.c        ****     
 125:main.c        ****     do
 126:main.c        ****     {
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 13


 127:main.c        ****         /* Read receiver status register */
 128:main.c        ****         rxStatus = UART_RXSTATUS_REG;
 541              		.loc 1 128 0
 542 0006 9B4B     		ldr	r3, .L69
 543 0008 1B78     		ldrb	r3, [r3]
 544 000a FB70     		strb	r3, [r7, #3]
 129:main.c        **** 
 130:main.c        ****         if((rxStatus & (UART_RX_STS_BREAK      | UART_RX_STS_PAR_ERROR |
 131:main.c        ****                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 545              		.loc 1 131 0
 546 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 547 000e 03F01E03 		and	r3, r3, #30
 130:main.c        ****                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 548              		.loc 1 130 0
 549 0012 002B     		cmp	r3, #0
 550 0014 0CD0     		beq	.L32
 132:main.c        ****         {
 133:main.c        ****             /* ERROR handling. */
 134:main.c        ****             errorStatus |= rxStatus & ( UART_RX_STS_BREAK      | UART_RX_STS_PAR_ERROR | 
 551              		.loc 1 134 0
 552 0016 97F90330 		ldrsb	r3, [r7, #3]
 553 001a 03F01E03 		and	r3, r3, #30
 554 001e 5AB2     		sxtb	r2, r3
 555 0020 954B     		ldr	r3, .L69+4
 556 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 557 0024 5BB2     		sxtb	r3, r3
 558 0026 1343     		orrs	r3, r3, r2
 559 0028 5BB2     		sxtb	r3, r3
 560 002a DAB2     		uxtb	r2, r3
 561 002c 924B     		ldr	r3, .L69+4
 562 002e 1A70     		strb	r2, [r3]
 563              	.L32:
 135:main.c        ****                                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN);
 136:main.c        ****         }
 137:main.c        ****         
 138:main.c        ****         if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 564              		.loc 1 138 0
 565 0030 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 566 0032 03F02003 		and	r3, r3, #32
 567 0036 002B     		cmp	r3, #0
 568 0038 00F05E81 		beq	.L33
 139:main.c        ****         {
 140:main.c        ****             /* Read data from the RX data register */
 141:main.c        ****             rxData = UART_RXDATA_REG;
 569              		.loc 1 141 0
 570 003c 8F4B     		ldr	r3, .L69+8
 571 003e 1B78     		ldrb	r3, [r3]
 572 0040 BB70     		strb	r3, [r7, #2]
 142:main.c        ****             help[tt] = rxData;
 573              		.loc 1 142 0
 574 0042 8F4B     		ldr	r3, .L69+12
 575 0044 1B68     		ldr	r3, [r3]
 576 0046 8F49     		ldr	r1, .L69+16
 577 0048 BA78     		ldrb	r2, [r7, #2]
 578 004a CA54     		strb	r2, [r1, r3]
 143:main.c        ****             tt++;
 579              		.loc 1 143 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 14


 580 004c 8C4B     		ldr	r3, .L69+12
 581 004e 1B68     		ldr	r3, [r3]
 582 0050 0133     		adds	r3, r3, #1
 583 0052 8B4A     		ldr	r2, .L69+12
 584 0054 1360     		str	r3, [r2]
 144:main.c        ****             if(tt==99){tt=0;}
 585              		.loc 1 144 0
 586 0056 8A4B     		ldr	r3, .L69+12
 587 0058 1B68     		ldr	r3, [r3]
 588 005a 632B     		cmp	r3, #99
 589 005c 02D1     		bne	.L34
 590              		.loc 1 144 0 is_stmt 0 discriminator 1
 591 005e 884B     		ldr	r3, .L69+12
 592 0060 0022     		movs	r2, #0
 593 0062 1A60     		str	r2, [r3]
 594              	.L34:
 145:main.c        ****             if(rxData=='b' ){start_calib=1;};
 595              		.loc 1 145 0 is_stmt 1
 596 0064 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 597 0066 622B     		cmp	r3, #98
 598 0068 02D1     		bne	.L35
 599              		.loc 1 145 0 is_stmt 0 discriminator 1
 600 006a 874B     		ldr	r3, .L69+20
 601 006c 0122     		movs	r2, #1
 602 006e 1A60     		str	r2, [r3]
 603              	.L35:
 146:main.c        ****             if(rxData=='.' ){offsets[1][1]++;}
 604              		.loc 1 146 0 is_stmt 1
 605 0070 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 606 0072 2E2B     		cmp	r3, #46
 607 0074 04D1     		bne	.L36
 608              		.loc 1 146 0 is_stmt 0 discriminator 1
 609 0076 854B     		ldr	r3, .L69+24
 610 0078 DB68     		ldr	r3, [r3, #12]
 611 007a 0133     		adds	r3, r3, #1
 612 007c 834A     		ldr	r2, .L69+24
 613 007e D360     		str	r3, [r2, #12]
 614              	.L36:
 147:main.c        ****             if(rxData==',' ){offsets[1][0]++;};
 615              		.loc 1 147 0 is_stmt 1
 616 0080 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 617 0082 2C2B     		cmp	r3, #44
 618 0084 04D1     		bne	.L37
 619              		.loc 1 147 0 is_stmt 0 discriminator 1
 620 0086 814B     		ldr	r3, .L69+24
 621 0088 9B68     		ldr	r3, [r3, #8]
 622 008a 0133     		adds	r3, r3, #1
 623 008c 7F4A     		ldr	r2, .L69+24
 624 008e 9360     		str	r3, [r2, #8]
 625              	.L37:
 148:main.c        ****             switch(data_read_mode)
 626              		.loc 1 148 0 is_stmt 1
 627 0090 7F4B     		ldr	r3, .L69+28
 628 0092 1B68     		ldr	r3, [r3]
 629 0094 062B     		cmp	r3, #6
 630 0096 00F22F81 		bhi	.L33
 631 009a 01A2     		adr	r2, .L40
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 15


 632 009c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 633              		.p2align 2
 634              	.L40:
 635 00a0 BD000000 		.word	.L39+1
 636 00a4 F3000000 		.word	.L41+1
 637 00a8 3B010000 		.word	.L42+1
 638 00ac AF010000 		.word	.L43+1
 639 00b0 F1010000 		.word	.L44+1
 640 00b4 33020000 		.word	.L45+1
 641 00b8 B1020000 		.word	.L46+1
 642              		.p2align 1
 643              	.L39:
 149:main.c        ****             {
 150:main.c        ****                 case 0:
 151:main.c        ****                     if(rxData=='{' )
 644              		.loc 1 151 0
 645 00bc BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 646 00be 7B2B     		cmp	r3, #123
 647 00c0 40F01781 		bne	.L67
 648              	.LBB7:
 152:main.c        ****                     {
 153:main.c        ****                         //aaaa
 154:main.c        ****                         for(int pp=1;pp<20;pp++){
 649              		.loc 1 154 0
 650 00c4 0123     		movs	r3, #1
 651 00c6 7B60     		str	r3, [r7, #4]
 652 00c8 07E0     		b	.L48
 653              	.L49:
 155:main.c        ****                             temp[pp] = ' ';
 654              		.loc 1 155 0 discriminator 3
 655 00ca 724A     		ldr	r2, .L69+32
 656 00cc 7B68     		ldr	r3, [r7, #4]
 657 00ce 1344     		add	r3, r3, r2
 658 00d0 2022     		movs	r2, #32
 659 00d2 1A70     		strb	r2, [r3]
 154:main.c        ****                             temp[pp] = ' ';
 660              		.loc 1 154 0 discriminator 3
 661 00d4 7B68     		ldr	r3, [r7, #4]
 662 00d6 0133     		adds	r3, r3, #1
 663 00d8 7B60     		str	r3, [r7, #4]
 664              	.L48:
 154:main.c        ****                             temp[pp] = ' ';
 665              		.loc 1 154 0 is_stmt 0 discriminator 1
 666 00da 7B68     		ldr	r3, [r7, #4]
 667 00dc 132B     		cmp	r3, #19
 668 00de F4DD     		ble	.L49
 669              	.LBE7:
 156:main.c        ****                         }
 157:main.c        ****                         temp[0] = '\0';
 670              		.loc 1 157 0 is_stmt 1
 671 00e0 6C4B     		ldr	r3, .L69+32
 672 00e2 0022     		movs	r2, #0
 673 00e4 1A70     		strb	r2, [r3]
 158:main.c        ****                         data_read_mode++;
 674              		.loc 1 158 0
 675 00e6 6A4B     		ldr	r3, .L69+28
 676 00e8 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 16


 677 00ea 0133     		adds	r3, r3, #1
 678 00ec 684A     		ldr	r2, .L69+28
 679 00ee 1360     		str	r3, [r2]
 159:main.c        ****                     }
 160:main.c        ****                 break;
 680              		.loc 1 160 0
 681 00f0 FFE0     		b	.L67
 682              	.L41:
 161:main.c        ****                 case 1:
 162:main.c        ****                     if(rxData=='x'){
 683              		.loc 1 162 0
 684 00f2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 685 00f4 782B     		cmp	r3, #120
 686 00f6 03D1     		bne	.L50
 163:main.c        ****                         data_read_mode = 2;}
 687              		.loc 1 163 0
 688 00f8 654B     		ldr	r3, .L69+28
 689 00fa 0222     		movs	r2, #2
 690 00fc 1A60     		str	r2, [r3]
 164:main.c        ****                     else if(rxData=='p'){
 165:main.c        ****                         data_read_mode = 3;}
 166:main.c        ****                     else if(rxData=='i'){
 167:main.c        ****                         data_read_mode = 4;}
 168:main.c        ****                     else if(rxData=='d'){
 169:main.c        ****                         data_read_mode = 5;}
 170:main.c        ****                     else if(rxData=='c'){
 171:main.c        ****                         data_read_mode = 6;}
 172:main.c        ****                 break;
 691              		.loc 1 172 0
 692 00fe FAE0     		b	.L68
 693              	.L50:
 164:main.c        ****                     else if(rxData=='p'){
 694              		.loc 1 164 0
 695 0100 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 696 0102 702B     		cmp	r3, #112
 697 0104 03D1     		bne	.L52
 165:main.c        ****                     else if(rxData=='i'){
 698              		.loc 1 165 0
 699 0106 624B     		ldr	r3, .L69+28
 700 0108 0322     		movs	r2, #3
 701 010a 1A60     		str	r2, [r3]
 702              		.loc 1 172 0
 703 010c F3E0     		b	.L68
 704              	.L52:
 166:main.c        ****                         data_read_mode = 4;}
 705              		.loc 1 166 0
 706 010e BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 707 0110 692B     		cmp	r3, #105
 708 0112 03D1     		bne	.L53
 167:main.c        ****                     else if(rxData=='d'){
 709              		.loc 1 167 0
 710 0114 5E4B     		ldr	r3, .L69+28
 711 0116 0422     		movs	r2, #4
 712 0118 1A60     		str	r2, [r3]
 713              		.loc 1 172 0
 714 011a ECE0     		b	.L68
 715              	.L53:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 17


 168:main.c        ****                         data_read_mode = 5;}
 716              		.loc 1 168 0
 717 011c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 718 011e 642B     		cmp	r3, #100
 719 0120 03D1     		bne	.L54
 169:main.c        ****                     else if(rxData=='c'){
 720              		.loc 1 169 0
 721 0122 5B4B     		ldr	r3, .L69+28
 722 0124 0522     		movs	r2, #5
 723 0126 1A60     		str	r2, [r3]
 724              		.loc 1 172 0
 725 0128 E5E0     		b	.L68
 726              	.L54:
 170:main.c        ****                         data_read_mode = 6;}
 727              		.loc 1 170 0
 728 012a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 729 012c 632B     		cmp	r3, #99
 730 012e 40F0E280 		bne	.L68
 171:main.c        ****                 break;
 731              		.loc 1 171 0
 732 0132 574B     		ldr	r3, .L69+28
 733 0134 0622     		movs	r2, #6
 734 0136 1A60     		str	r2, [r3]
 735              		.loc 1 172 0
 736 0138 DDE0     		b	.L68
 737              	.L42:
 173:main.c        ****                 case 2: //x
 174:main.c        ****                     if(rxData != '}'){
 738              		.loc 1 174 0
 739 013a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 740 013c 7D2B     		cmp	r3, #125
 741 013e 0AD0     		beq	.L55
 175:main.c        ****                         temp[nn] = rxData;
 742              		.loc 1 175 0
 743 0140 554B     		ldr	r3, .L69+36
 744 0142 1B68     		ldr	r3, [r3]
 745 0144 5349     		ldr	r1, .L69+32
 746 0146 BA78     		ldrb	r2, [r7, #2]
 747 0148 CA54     		strb	r2, [r1, r3]
 176:main.c        ****                         nn++;
 748              		.loc 1 176 0
 749 014a 534B     		ldr	r3, .L69+36
 750 014c 1B68     		ldr	r3, [r3]
 751 014e 0133     		adds	r3, r3, #1
 752 0150 514A     		ldr	r2, .L69+36
 753 0152 1360     		str	r3, [r2]
 177:main.c        ****                     }
 178:main.c        ****                     else {
 179:main.c        ****                         new_pos[cyl_no] = (int) strtol(temp, (char **)NULL, 10);
 180:main.c        ****                         if(new_pos[cyl_no]==0){
 181:main.c        ****                             new_pos[cyl_no] = pos[cyl_no];
 182:main.c        ****                         }
 183:main.c        ****                         new_pos_set[cyl_no] = 1;
 184:main.c        ****                         nn=0; 
 185:main.c        ****                         temp[0] = '\0';
 186:main.c        ****                         data_read_mode = 0;
 187:main.c        ****                         
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 18


 188:main.c        ****                     }
 189:main.c        ****                   
 190:main.c        ****                 break;
 754              		.loc 1 190 0
 755 0154 D0E0     		b	.L33
 756              	.L55:
 179:main.c        ****                         if(new_pos[cyl_no]==0){
 757              		.loc 1 179 0
 758 0156 514B     		ldr	r3, .L69+40
 759 0158 1C68     		ldr	r4, [r3]
 760 015a 0A22     		movs	r2, #10
 761 015c 0021     		movs	r1, #0
 762 015e 4D48     		ldr	r0, .L69+32
 763 0160 FFF7FEFF 		bl	strtol
 764 0164 0246     		mov	r2, r0
 765 0166 4E4B     		ldr	r3, .L69+44
 766 0168 43F82420 		str	r2, [r3, r4, lsl #2]
 180:main.c        ****                             new_pos[cyl_no] = pos[cyl_no];
 767              		.loc 1 180 0
 768 016c 4B4B     		ldr	r3, .L69+40
 769 016e 1B68     		ldr	r3, [r3]
 770 0170 4B4A     		ldr	r2, .L69+44
 771 0172 52F82330 		ldr	r3, [r2, r3, lsl #2]
 772 0176 002B     		cmp	r3, #0
 773 0178 09D1     		bne	.L57
 181:main.c        ****                         }
 774              		.loc 1 181 0
 775 017a 484B     		ldr	r3, .L69+40
 776 017c 1B68     		ldr	r3, [r3]
 777 017e 474A     		ldr	r2, .L69+40
 778 0180 1268     		ldr	r2, [r2]
 779 0182 4849     		ldr	r1, .L69+48
 780 0184 51F82220 		ldr	r2, [r1, r2, lsl #2]
 781 0188 4549     		ldr	r1, .L69+44
 782 018a 41F82320 		str	r2, [r1, r3, lsl #2]
 783              	.L57:
 183:main.c        ****                         nn=0; 
 784              		.loc 1 183 0
 785 018e 434B     		ldr	r3, .L69+40
 786 0190 1B68     		ldr	r3, [r3]
 787 0192 454A     		ldr	r2, .L69+52
 788 0194 0121     		movs	r1, #1
 789 0196 42F82310 		str	r1, [r2, r3, lsl #2]
 184:main.c        ****                         temp[0] = '\0';
 790              		.loc 1 184 0
 791 019a 3F4B     		ldr	r3, .L69+36
 792 019c 0022     		movs	r2, #0
 793 019e 1A60     		str	r2, [r3]
 185:main.c        ****                         data_read_mode = 0;
 794              		.loc 1 185 0
 795 01a0 3C4B     		ldr	r3, .L69+32
 796 01a2 0022     		movs	r2, #0
 797 01a4 1A70     		strb	r2, [r3]
 186:main.c        ****                         
 798              		.loc 1 186 0
 799 01a6 3A4B     		ldr	r3, .L69+28
 800 01a8 0022     		movs	r2, #0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 19


 801 01aa 1A60     		str	r2, [r3]
 802              		.loc 1 190 0
 803 01ac A4E0     		b	.L33
 804              	.L43:
 191:main.c        ****                 case 3: //p
 192:main.c        ****                     if(rxData != '}'){
 805              		.loc 1 192 0
 806 01ae BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 807 01b0 7D2B     		cmp	r3, #125
 808 01b2 0AD0     		beq	.L58
 193:main.c        ****                         temp[nn] = rxData;
 809              		.loc 1 193 0
 810 01b4 384B     		ldr	r3, .L69+36
 811 01b6 1B68     		ldr	r3, [r3]
 812 01b8 3649     		ldr	r1, .L69+32
 813 01ba BA78     		ldrb	r2, [r7, #2]
 814 01bc CA54     		strb	r2, [r1, r3]
 194:main.c        ****                         nn++;
 815              		.loc 1 194 0
 816 01be 364B     		ldr	r3, .L69+36
 817 01c0 1B68     		ldr	r3, [r3]
 818 01c2 0133     		adds	r3, r3, #1
 819 01c4 344A     		ldr	r2, .L69+36
 820 01c6 1360     		str	r3, [r2]
 195:main.c        ****                     }
 196:main.c        ****                     else {
 197:main.c        ****                         pid[0] = strtod(temp, NULL);
 198:main.c        ****                         nn=0;
 199:main.c        ****                         temp[0] = '\0';
 200:main.c        ****                         data_read_mode = 0;
 201:main.c        ****                     }
 202:main.c        ****                     
 203:main.c        ****                 break;
 821              		.loc 1 203 0
 822 01c8 96E0     		b	.L33
 823              	.L58:
 197:main.c        ****                         nn=0;
 824              		.loc 1 197 0
 825 01ca 0021     		movs	r1, #0
 826 01cc 3148     		ldr	r0, .L69+32
 827 01ce FFF7FEFF 		bl	strtod
 828 01d2 0346     		mov	r3, r0
 829 01d4 0C46     		mov	r4, r1
 830 01d6 354A     		ldr	r2, .L69+56
 831 01d8 C2E90034 		strd	r3, [r2]
 198:main.c        ****                         temp[0] = '\0';
 832              		.loc 1 198 0
 833 01dc 2E4B     		ldr	r3, .L69+36
 834 01de 0022     		movs	r2, #0
 835 01e0 1A60     		str	r2, [r3]
 199:main.c        ****                         data_read_mode = 0;
 836              		.loc 1 199 0
 837 01e2 2C4B     		ldr	r3, .L69+32
 838 01e4 0022     		movs	r2, #0
 839 01e6 1A70     		strb	r2, [r3]
 200:main.c        ****                     }
 840              		.loc 1 200 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 20


 841 01e8 294B     		ldr	r3, .L69+28
 842 01ea 0022     		movs	r2, #0
 843 01ec 1A60     		str	r2, [r3]
 844              		.loc 1 203 0
 845 01ee 83E0     		b	.L33
 846              	.L44:
 204:main.c        ****                 case 4: //i
 205:main.c        ****                     if(rxData != '}'){
 847              		.loc 1 205 0
 848 01f0 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 849 01f2 7D2B     		cmp	r3, #125
 850 01f4 0AD0     		beq	.L60
 206:main.c        ****                         temp[nn] = rxData;
 851              		.loc 1 206 0
 852 01f6 284B     		ldr	r3, .L69+36
 853 01f8 1B68     		ldr	r3, [r3]
 854 01fa 2649     		ldr	r1, .L69+32
 855 01fc BA78     		ldrb	r2, [r7, #2]
 856 01fe CA54     		strb	r2, [r1, r3]
 207:main.c        ****                         nn++;
 857              		.loc 1 207 0
 858 0200 254B     		ldr	r3, .L69+36
 859 0202 1B68     		ldr	r3, [r3]
 860 0204 0133     		adds	r3, r3, #1
 861 0206 244A     		ldr	r2, .L69+36
 862 0208 1360     		str	r3, [r2]
 208:main.c        ****                     }
 209:main.c        ****                     else {
 210:main.c        ****                         pid[1] = strtod(temp, NULL);
 211:main.c        ****                         nn=0;
 212:main.c        ****                         temp[0] = '\0';
 213:main.c        ****                         data_read_mode = 0;
 214:main.c        ****                     }
 215:main.c        ****                 break;
 863              		.loc 1 215 0
 864 020a 75E0     		b	.L33
 865              	.L60:
 210:main.c        ****                         nn=0;
 866              		.loc 1 210 0
 867 020c 0021     		movs	r1, #0
 868 020e 2148     		ldr	r0, .L69+32
 869 0210 FFF7FEFF 		bl	strtod
 870 0214 0346     		mov	r3, r0
 871 0216 0C46     		mov	r4, r1
 872 0218 244A     		ldr	r2, .L69+56
 873 021a C2E90234 		strd	r3, [r2, #8]
 211:main.c        ****                         temp[0] = '\0';
 874              		.loc 1 211 0
 875 021e 1E4B     		ldr	r3, .L69+36
 876 0220 0022     		movs	r2, #0
 877 0222 1A60     		str	r2, [r3]
 212:main.c        ****                         data_read_mode = 0;
 878              		.loc 1 212 0
 879 0224 1B4B     		ldr	r3, .L69+32
 880 0226 0022     		movs	r2, #0
 881 0228 1A70     		strb	r2, [r3]
 213:main.c        ****                     }
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 21


 882              		.loc 1 213 0
 883 022a 194B     		ldr	r3, .L69+28
 884 022c 0022     		movs	r2, #0
 885 022e 1A60     		str	r2, [r3]
 886              		.loc 1 215 0
 887 0230 62E0     		b	.L33
 888              	.L45:
 216:main.c        ****                 case 5: //d
 217:main.c        ****                     if(rxData != '}'){
 889              		.loc 1 217 0
 890 0232 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 891 0234 7D2B     		cmp	r3, #125
 892 0236 0AD0     		beq	.L62
 218:main.c        ****                         temp[nn] = rxData;
 893              		.loc 1 218 0
 894 0238 174B     		ldr	r3, .L69+36
 895 023a 1B68     		ldr	r3, [r3]
 896 023c 1549     		ldr	r1, .L69+32
 897 023e BA78     		ldrb	r2, [r7, #2]
 898 0240 CA54     		strb	r2, [r1, r3]
 219:main.c        ****                         nn++;
 899              		.loc 1 219 0
 900 0242 154B     		ldr	r3, .L69+36
 901 0244 1B68     		ldr	r3, [r3]
 902 0246 0133     		adds	r3, r3, #1
 903 0248 134A     		ldr	r2, .L69+36
 904 024a 1360     		str	r3, [r2]
 220:main.c        ****                     }
 221:main.c        ****                     else {
 222:main.c        ****                         pid[2] = strtod(temp, NULL);
 223:main.c        ****                         nn=0;
 224:main.c        ****                         temp[0] = '\0';
 225:main.c        ****                         data_read_mode = 0;
 226:main.c        ****                     }
 227:main.c        ****                 break;
 905              		.loc 1 227 0
 906 024c 54E0     		b	.L33
 907              	.L62:
 222:main.c        ****                         nn=0;
 908              		.loc 1 222 0
 909 024e 0021     		movs	r1, #0
 910 0250 1048     		ldr	r0, .L69+32
 911 0252 FFF7FEFF 		bl	strtod
 912 0256 0346     		mov	r3, r0
 913 0258 0C46     		mov	r4, r1
 914 025a 144A     		ldr	r2, .L69+56
 915 025c C2E90434 		strd	r3, [r2, #16]
 223:main.c        ****                         temp[0] = '\0';
 916              		.loc 1 223 0
 917 0260 0D4B     		ldr	r3, .L69+36
 918 0262 0022     		movs	r2, #0
 919 0264 1A60     		str	r2, [r3]
 224:main.c        ****                         data_read_mode = 0;
 920              		.loc 1 224 0
 921 0266 0B4B     		ldr	r3, .L69+32
 922 0268 0022     		movs	r2, #0
 923 026a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 22


 225:main.c        ****                     }
 924              		.loc 1 225 0
 925 026c 084B     		ldr	r3, .L69+28
 926 026e 0022     		movs	r2, #0
 927 0270 1A60     		str	r2, [r3]
 928              		.loc 1 227 0
 929 0272 41E0     		b	.L33
 930              	.L70:
 931              		.align	2
 932              	.L69:
 933 0274 69650040 		.word	1073767785
 934 0278 00000000 		.word	errorStatus
 935 027c 4A650040 		.word	1073767754
 936 0280 00000000 		.word	tt
 937 0284 00000000 		.word	help
 938 0288 00000000 		.word	start_calib
 939 028c 00000000 		.word	offsets
 940 0290 00000000 		.word	data_read_mode
 941 0294 00000000 		.word	temp
 942 0298 00000000 		.word	nn
 943 029c 00000000 		.word	cyl_no
 944 02a0 00000000 		.word	new_pos
 945 02a4 00000000 		.word	pos
 946 02a8 00000000 		.word	new_pos_set
 947 02ac 00000000 		.word	pid
 948              	.L46:
 228:main.c        ****                 case 6: //c
 229:main.c        ****                     if(rxData != '}'){
 949              		.loc 1 229 0
 950 02b0 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 951 02b2 7D2B     		cmp	r3, #125
 952 02b4 0AD0     		beq	.L64
 230:main.c        ****                         temp[nn] = rxData;
 953              		.loc 1 230 0
 954 02b6 154B     		ldr	r3, .L71
 955 02b8 1B68     		ldr	r3, [r3]
 956 02ba 1549     		ldr	r1, .L71+4
 957 02bc BA78     		ldrb	r2, [r7, #2]
 958 02be CA54     		strb	r2, [r1, r3]
 231:main.c        ****                         nn++;
 959              		.loc 1 231 0
 960 02c0 124B     		ldr	r3, .L71
 961 02c2 1B68     		ldr	r3, [r3]
 962 02c4 0133     		adds	r3, r3, #1
 963 02c6 114A     		ldr	r2, .L71
 964 02c8 1360     		str	r3, [r2]
 232:main.c        ****                     }
 233:main.c        ****                     else {
 234:main.c        ****                         cyl_no = (int) strtol(temp, (char **)NULL, 10);
 235:main.c        ****                         nn=0; 
 236:main.c        ****                         temp[0] = '\0';
 237:main.c        ****                         data_read_mode = 0;
 238:main.c        ****                     }
 239:main.c        ****                   
 240:main.c        ****                 break;
 965              		.loc 1 240 0
 966 02ca 15E0     		b	.L33
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 23


 967              	.L64:
 234:main.c        ****                         nn=0; 
 968              		.loc 1 234 0
 969 02cc 0A22     		movs	r2, #10
 970 02ce 0021     		movs	r1, #0
 971 02d0 0F48     		ldr	r0, .L71+4
 972 02d2 FFF7FEFF 		bl	strtol
 973 02d6 0246     		mov	r2, r0
 974 02d8 0E4B     		ldr	r3, .L71+8
 975 02da 1A60     		str	r2, [r3]
 235:main.c        ****                         temp[0] = '\0';
 976              		.loc 1 235 0
 977 02dc 0B4B     		ldr	r3, .L71
 978 02de 0022     		movs	r2, #0
 979 02e0 1A60     		str	r2, [r3]
 236:main.c        ****                         data_read_mode = 0;
 980              		.loc 1 236 0
 981 02e2 0B4B     		ldr	r3, .L71+4
 982 02e4 0022     		movs	r2, #0
 983 02e6 1A70     		strb	r2, [r3]
 237:main.c        ****                     }
 984              		.loc 1 237 0
 985 02e8 0B4B     		ldr	r3, .L71+12
 986 02ea 0022     		movs	r2, #0
 987 02ec 1A60     		str	r2, [r3]
 988              		.loc 1 240 0
 989 02ee 00BF     		nop
 990 02f0 02E0     		b	.L33
 991              	.L67:
 160:main.c        ****                 case 1:
 992              		.loc 1 160 0
 993 02f2 00BF     		nop
 994 02f4 00E0     		b	.L33
 995              	.L68:
 172:main.c        ****                 case 2: //x
 996              		.loc 1 172 0
 997 02f6 00BF     		nop
 998              	.L33:
 241:main.c        ****             }
 242:main.c        ****             
 243:main.c        ****             if(errorStatus == 0u)
 244:main.c        ****             {
 245:main.c        ****                 /* Send data backward */
 246:main.c        ****                 //UART_TXDATA_REG = rxData;
 247:main.c        ****             }
 248:main.c        ****         }
 249:main.c        ****     }while((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u);
 999              		.loc 1 249 0
 1000 02f8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1001 02fa 03F02003 		and	r3, r3, #32
 1002 02fe 002B     		cmp	r3, #0
 1003 0300 7FF481AE 		bne	.L66
 250:main.c        **** }
 1004              		.loc 1 250 0
 1005 0304 00BF     		nop
 1006 0306 0C37     		adds	r7, r7, #12
 1007              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 24


 1008 0308 BD46     		mov	sp, r7
 1009              		.cfi_def_cfa_register 13
 1010              		@ sp needed
 1011 030a 90BD     		pop	{r4, r7, pc}
 1012              	.L72:
 1013              		.align	2
 1014              	.L71:
 1015 030c 00000000 		.word	nn
 1016 0310 00000000 		.word	temp
 1017 0314 00000000 		.word	cyl_no
 1018 0318 00000000 		.word	data_read_mode
 1019              		.cfi_endproc
 1020              	.LFE67:
 1021              		.size	RxIsr, .-RxIsr
 1022              		.section	.rodata
 1023              		.align	2
 1024              	.LC0:
 1025 0000 25303864 		.ascii	"%08d\011%08.2f\011%08d\011%08.2f\000"
 1025      09253038 
 1025      2E326609 
 1025      25303864 
 1025      09253038 
 1026              		.align	2
 1027              	.LC1:
 1028 0018 25303564 		.ascii	"%05d\011%05d\011%05d\011%05d\011%05d\011%05d\011%05"
 1028      09253035 
 1028      64092530 
 1028      35640925 
 1028      30356409 
 1029 0039 64092530 		.ascii	"d\011%05d\011\000"
 1029      35640900 
 1030              		.global	__aeabi_i2d
 1031              		.global	__aeabi_dsub
 1032              		.global	__aeabi_dmul
 1033              		.global	__aeabi_dadd
 1034              		.global	__aeabi_dcmpgt
 1035              		.global	__aeabi_dcmplt
 1036              		.global	__aeabi_ddiv
 1037              		.global	__aeabi_d2iz
 1038 0041 000000   		.align	2
 1039              	.LC2:
 1040 0044 55505045 		.ascii	"UPPER:\011Lower Offset: %d \011Upper Offset: %d \011"
 1040      523A094C 
 1040      6F776572 
 1040      204F6666 
 1040      7365743A 
 1041 006f 20414443 		.ascii	" ADC Diff: %d\012\000"
 1041      20446966 
 1041      663A2025 
 1041      640A00
 1042 007e 0000     		.align	2
 1043              	.LC3:
 1044 0080 4C4F5745 		.ascii	"LOWER:\011Lower Offset: %d \011Upper Offset: %d \011"
 1044      523A094C 
 1044      6F776572 
 1044      204F6666 
 1044      7365743A 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 25


 1045 00ab 20414443 		.ascii	" ADC Diff: %d\012\000"
 1045      20446966 
 1045      663A2025 
 1045      640A00
 1046 00ba 0000     		.align	2
 1047              	.LC4:
 1048 00bc 4C6F7765 		.ascii	"Lower Offset: %d \011 Upper Offset: %d \012\000"
 1048      72204F66 
 1048      66736574 
 1048      3A202564 
 1048      20092055 
 1049              		.global	__aeabi_ui2d
 1050              		.section	.text.main,"ax",%progbits
 1051              		.align	2
 1052              		.global	main
 1053              		.thumb
 1054              		.thumb_func
 1055              		.type	main, %function
 1056              	main:
 1057              	.LFB68:
 251:main.c        **** 
 252:main.c        **** int main()
 253:main.c        **** {
 1058              		.loc 1 253 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 64
 1061              		@ frame_needed = 1, uses_anonymous_args = 0
 1062 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1063              		.cfi_def_cfa_offset 20
 1064              		.cfi_offset 4, -20
 1065              		.cfi_offset 5, -16
 1066              		.cfi_offset 6, -12
 1067              		.cfi_offset 7, -8
 1068              		.cfi_offset 14, -4
 1069 0002 97B0     		sub	sp, sp, #92
 1070              		.cfi_def_cfa_offset 112
 1071 0004 06AF     		add	r7, sp, #24
 1072              		.cfi_def_cfa 7, 88
 254:main.c        ****     
 255:main.c        ****     EEPROM_Start();
 1073              		.loc 1 255 0
 1074 0006 FFF7FEFF 		bl	EEPROM_Start
 256:main.c        ****     EEPROM_UpdateTemperature();
 1075              		.loc 1 256 0
 1076 000a FFF7FEFF 		bl	EEPROM_UpdateTemperature
 257:main.c        ****     psoc_id = EEPROM_ReadByte(PSOC_ID_BYTE_ADDRESS);
 1077              		.loc 1 257 0
 1078 000e 2020     		movs	r0, #32
 1079 0010 FFF7FEFF 		bl	EEPROM_ReadByte
 1080 0014 0346     		mov	r3, r0
 1081 0016 1A46     		mov	r2, r3
 1082 0018 794B     		ldr	r3, .L103+8
 1083 001a 1A60     		str	r2, [r3]
 258:main.c        ****     switch(psoc_id){
 1084              		.loc 1 258 0
 1085 001c 784B     		ldr	r3, .L103+8
 1086 001e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 26


 1087 0020 102B     		cmp	r3, #16
 1088 0022 02D0     		beq	.L75
 1089 0024 112B     		cmp	r3, #17
 1090 0026 19D0     		beq	.L76
 1091 0028 31E0     		b	.L74
 1092              	.L75:
 259:main.c        ****         case 16:
 260:main.c        ****             offsets[0][0] = 125;offsets[0][1] = 179;
 1093              		.loc 1 260 0
 1094 002a 764B     		ldr	r3, .L103+12
 1095 002c 7D22     		movs	r2, #125
 1096 002e 1A60     		str	r2, [r3]
 1097 0030 744B     		ldr	r3, .L103+12
 1098 0032 B322     		movs	r2, #179
 1099 0034 5A60     		str	r2, [r3, #4]
 261:main.c        ****             offsets[1][0] = 132;offsets[1][1] = 176;
 1100              		.loc 1 261 0
 1101 0036 734B     		ldr	r3, .L103+12
 1102 0038 8422     		movs	r2, #132
 1103 003a 9A60     		str	r2, [r3, #8]
 1104 003c 714B     		ldr	r3, .L103+12
 1105 003e B022     		movs	r2, #176
 1106 0040 DA60     		str	r2, [r3, #12]
 262:main.c        ****             offsets[2][0] = 180;offsets[2][1] = 174;
 1107              		.loc 1 262 0
 1108 0042 704B     		ldr	r3, .L103+12
 1109 0044 B422     		movs	r2, #180
 1110 0046 1A61     		str	r2, [r3, #16]
 1111 0048 6E4B     		ldr	r3, .L103+12
 1112 004a AE22     		movs	r2, #174
 1113 004c 5A61     		str	r2, [r3, #20]
 263:main.c        ****             offsets[3][0] = 205;offsets[3][1] = 185;
 1114              		.loc 1 263 0
 1115 004e 6D4B     		ldr	r3, .L103+12
 1116 0050 CD22     		movs	r2, #205
 1117 0052 9A61     		str	r2, [r3, #24]
 1118 0054 6B4B     		ldr	r3, .L103+12
 1119 0056 B922     		movs	r2, #185
 1120 0058 DA61     		str	r2, [r3, #28]
 264:main.c        ****             break;
 1121              		.loc 1 264 0
 1122 005a 18E0     		b	.L74
 1123              	.L76:
 265:main.c        ****         case 17:
 266:main.c        ****             offsets[0][0] = 117;offsets[0][1] = 218;
 1124              		.loc 1 266 0
 1125 005c 694B     		ldr	r3, .L103+12
 1126 005e 7522     		movs	r2, #117
 1127 0060 1A60     		str	r2, [r3]
 1128 0062 684B     		ldr	r3, .L103+12
 1129 0064 DA22     		movs	r2, #218
 1130 0066 5A60     		str	r2, [r3, #4]
 267:main.c        ****             offsets[1][0] = 60;offsets[1][1] = 243;
 1131              		.loc 1 267 0
 1132 0068 664B     		ldr	r3, .L103+12
 1133 006a 3C22     		movs	r2, #60
 1134 006c 9A60     		str	r2, [r3, #8]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 27


 1135 006e 654B     		ldr	r3, .L103+12
 1136 0070 F322     		movs	r2, #243
 1137 0072 DA60     		str	r2, [r3, #12]
 268:main.c        ****             offsets[2][0] = 152;offsets[2][1] = 204;
 1138              		.loc 1 268 0
 1139 0074 634B     		ldr	r3, .L103+12
 1140 0076 9822     		movs	r2, #152
 1141 0078 1A61     		str	r2, [r3, #16]
 1142 007a 624B     		ldr	r3, .L103+12
 1143 007c CC22     		movs	r2, #204
 1144 007e 5A61     		str	r2, [r3, #20]
 269:main.c        ****             offsets[3][0] = 78;offsets[3][1] = 250;
 1145              		.loc 1 269 0
 1146 0080 604B     		ldr	r3, .L103+12
 1147 0082 4E22     		movs	r2, #78
 1148 0084 9A61     		str	r2, [r3, #24]
 1149 0086 5F4B     		ldr	r3, .L103+12
 1150 0088 FA22     		movs	r2, #250
 1151 008a DA61     		str	r2, [r3, #28]
 270:main.c        ****             break;
 1152              		.loc 1 270 0
 1153 008c 00BF     		nop
 1154              	.L74:
 1155              	.LBB8:
 271:main.c        ****     }
 272:main.c        ****     
 273:main.c        ****     //initializing variables
 274:main.c        ****     for(int g = 0;g<CYL_NO;g++){
 1156              		.loc 1 274 0
 1157 008e 0023     		movs	r3, #0
 1158 0090 FB63     		str	r3, [r7, #60]
 1159 0092 49E0     		b	.L77
 1160              	.L78:
 275:main.c        ****         new_pos_set[g]  = 0;
 1161              		.loc 1 275 0 discriminator 3
 1162 0094 5C4A     		ldr	r2, .L103+16
 1163 0096 FB6B     		ldr	r3, [r7, #60]
 1164 0098 0021     		movs	r1, #0
 1165 009a 42F82310 		str	r1, [r2, r3, lsl #2]
 276:main.c        ****         new_pos[g]      = 0;
 1166              		.loc 1 276 0 discriminator 3
 1167 009e 5B4A     		ldr	r2, .L103+20
 1168 00a0 FB6B     		ldr	r3, [r7, #60]
 1169 00a2 0021     		movs	r1, #0
 1170 00a4 42F82310 		str	r1, [r2, r3, lsl #2]
 277:main.c        ****         pos[g]          = 1300;
 1171              		.loc 1 277 0 discriminator 3
 1172 00a8 594A     		ldr	r2, .L103+24
 1173 00aa FB6B     		ldr	r3, [r7, #60]
 1174 00ac 40F21451 		movw	r1, #1300
 1175 00b0 42F82310 		str	r1, [r2, r3, lsl #2]
 278:main.c        ****         pulse[g]        = 0;
 1176              		.loc 1 278 0 discriminator 3
 1177 00b4 574A     		ldr	r2, .L103+28
 1178 00b6 FB6B     		ldr	r3, [r7, #60]
 1179 00b8 0021     		movs	r1, #0
 1180 00ba 42F82310 		str	r1, [r2, r3, lsl #2]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 28


 279:main.c        ****         pulse_temp[g]   = 0;
 1181              		.loc 1 279 0 discriminator 3
 1182 00be 564A     		ldr	r2, .L103+32
 1183 00c0 FB6B     		ldr	r3, [r7, #60]
 1184 00c2 0021     		movs	r1, #0
 1185 00c4 42F82310 		str	r1, [r2, r3, lsl #2]
 280:main.c        ****         err[g]          = 0;
 1186              		.loc 1 280 0 discriminator 3
 1187 00c8 544A     		ldr	r2, .L103+36
 1188 00ca FB6B     		ldr	r3, [r7, #60]
 1189 00cc DB00     		lsls	r3, r3, #3
 1190 00ce 1A44     		add	r2, r2, r3
 1191 00d0 4FF00003 		mov	r3, #0
 1192 00d4 4FF00004 		mov	r4, #0
 1193 00d8 C2E90034 		strd	r3, [r2]
 281:main.c        ****         adcValue[g]     = 0;
 1194              		.loc 1 281 0 discriminator 3
 1195 00dc 504A     		ldr	r2, .L103+40
 1196 00de FB6B     		ldr	r3, [r7, #60]
 1197 00e0 0021     		movs	r1, #0
 1198 00e2 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 282:main.c        ****         der[g]          = 0;
 1199              		.loc 1 282 0 discriminator 3
 1200 00e6 4F4A     		ldr	r2, .L103+44
 1201 00e8 FB6B     		ldr	r3, [r7, #60]
 1202 00ea DB00     		lsls	r3, r3, #3
 1203 00ec 1A44     		add	r2, r2, r3
 1204 00ee 4FF00003 		mov	r3, #0
 1205 00f2 4FF00004 		mov	r4, #0
 1206 00f6 C2E90034 		strd	r3, [r2]
 283:main.c        ****         prev_err[g]     = 0;
 1207              		.loc 1 283 0 discriminator 3
 1208 00fa 4B4A     		ldr	r2, .L103+48
 1209 00fc FB6B     		ldr	r3, [r7, #60]
 1210 00fe DB00     		lsls	r3, r3, #3
 1211 0100 1A44     		add	r2, r2, r3
 1212 0102 4FF00003 		mov	r3, #0
 1213 0106 4FF00004 		mov	r4, #0
 1214 010a C2E90034 		strd	r3, [r2]
 284:main.c        ****         pid_integral[g] = 0;
 1215              		.loc 1 284 0 discriminator 3
 1216 010e 474A     		ldr	r2, .L103+52
 1217 0110 FB6B     		ldr	r3, [r7, #60]
 1218 0112 DB00     		lsls	r3, r3, #3
 1219 0114 1A44     		add	r2, r2, r3
 1220 0116 4FF00003 		mov	r3, #0
 1221 011a 4FF00004 		mov	r4, #0
 1222 011e C2E90034 		strd	r3, [r2]
 274:main.c        ****         new_pos_set[g]  = 0;
 1223              		.loc 1 274 0 discriminator 3
 1224 0122 FB6B     		ldr	r3, [r7, #60]
 1225 0124 0133     		adds	r3, r3, #1
 1226 0126 FB63     		str	r3, [r7, #60]
 1227              	.L77:
 274:main.c        ****         new_pos_set[g]  = 0;
 1228              		.loc 1 274 0 is_stmt 0 discriminator 1
 1229 0128 FB6B     		ldr	r3, [r7, #60]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 29


 1230 012a 032B     		cmp	r3, #3
 1231 012c B2DD     		ble	.L78
 1232              	.LBE8:
 285:main.c        ****     }
 286:main.c        ****     //PWM variables
 287:main.c        ****     PWM_0_Start();
 1233              		.loc 1 287 0 is_stmt 1
 1234 012e FFF7FEFF 		bl	PWM_0_Start
 288:main.c        ****     PWM_1_Start();
 1235              		.loc 1 288 0
 1236 0132 FFF7FEFF 		bl	PWM_1_Start
 289:main.c        ****     PWM_2_Start();
 1237              		.loc 1 289 0
 1238 0136 FFF7FEFF 		bl	PWM_2_Start
 290:main.c        ****     PWM_3_Start();
 1239              		.loc 1 290 0
 1240 013a FFF7FEFF 		bl	PWM_3_Start
 291:main.c        ****     ADC_0_Start();
 1241              		.loc 1 291 0
 1242 013e FFF7FEFF 		bl	ADC_0_Start
 292:main.c        ****     ADC_0_StartConvert();
 1243              		.loc 1 292 0
 1244 0142 FFF7FEFF 		bl	ADC_0_StartConvert
 293:main.c        ****     AMux_0_Init();
 1245              		.loc 1 293 0
 1246 0146 FFF7FEFF 		bl	AMux_0_Start
 294:main.c        ****     
 295:main.c        ****     UART_Start();           /* Start communication component */
 1247              		.loc 1 295 0
 1248 014a FFF7FEFF 		bl	UART_Start
 296:main.c        **** 
 297:main.c        **** #if(INTERRUPT_CODE_ENABLED == ENABLED)
 298:main.c        ****     isr_rx_StartEx(RxIsr);
 1249              		.loc 1 298 0
 1250 014e 3848     		ldr	r0, .L103+56
 1251 0150 FFF7FEFF 		bl	isr_rx_StartEx
 299:main.c        ****     update_median_isr_StartEx(adc_update);
 1252              		.loc 1 299 0
 1253 0154 3748     		ldr	r0, .L103+60
 1254 0156 FFF7FEFF 		bl	update_median_isr_StartEx
 300:main.c        **** #endif /* INTERRUPT_CODE_ENABLED == ENABLED */
 301:main.c        ****     
 302:main.c        ****     CyGlobalIntEnable;      /* Enable global interrupts. */
 1255              		.loc 1 302 0
 1256              		.syntax unified
 1257              	@ 302 "main.c" 1
 1258 015a 62B6     		CPSIE   i
 1259              	@ 0 "" 2
 303:main.c        ****     
 304:main.c        ****     double dt;
 305:main.c        ****     double time;
 306:main.c        ****     
 307:main.c        ****     dt = 0.025; //initialised dt, corrected by timer  below
 1260              		.loc 1 307 0
 1261              		.thumb
 1262              		.syntax unified
 1263 015c 26A4     		adr	r4, .L103
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 30


 1264 015e D4E90034 		ldrd	r3, [r4]
 1265 0162 C7E90C34 		strd	r3, [r7, #48]
 308:main.c        **** 
 309:main.c        ****     sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[1],err[1]);
 1266              		.loc 1 309 0
 1267 0166 2E4B     		ldr	r3, .L103+40
 1268 0168 1B88     		ldrh	r3, [r3]
 1269 016a 1D46     		mov	r5, r3
 1270 016c 2B4B     		ldr	r3, .L103+36
 1271 016e 18CB     		ldmia	r3, {r3-r4}
 1272 0170 2B4A     		ldr	r2, .L103+40
 1273 0172 5288     		ldrh	r2, [r2, #2]
 1274 0174 1046     		mov	r0, r2
 1275 0176 294A     		ldr	r2, .L103+36
 1276 0178 D2E90212 		ldrd	r1, [r2, #8]
 1277 017c CDE90412 		strd	r1, [sp, #16]
 1278 0180 0290     		str	r0, [sp, #8]
 1279 0182 CDE90034 		strd	r3, [sp]
 1280 0186 2A46     		mov	r2, r5
 1281 0188 2B49     		ldr	r1, .L103+64
 1282 018a 2C48     		ldr	r0, .L103+68
 1283 018c FFF7FEFF 		bl	sprintf
 310:main.c        ****     UART_PutString(sendValue);
 1284              		.loc 1 310 0
 1285 0190 2A48     		ldr	r0, .L103+68
 1286 0192 FFF7FEFF 		bl	UART_PutString
 311:main.c        ****     
 312:main.c        ****     median_timer_Start();
 1287              		.loc 1 312 0
 1288 0196 FFF7FEFF 		bl	median_timer_Start
 313:main.c        ****     Timer_1_Start();
 1289              		.loc 1 313 0
 1290 019a FFF7FEFF 		bl	Timer_1_Start
 1291              	.L99:
 314:main.c        ****     
 315:main.c        ****     for(;;)
 316:main.c        ****     {
 317:main.c        ****         /*for(;;){
 318:main.c        ****             for(int i = 0;i<4;i++){
 319:main.c        ****                 writePWM(i,499);
 320:main.c        ****             }
 321:main.c        ****                 CyDelay(500);
 322:main.c        ****                 for(int i = 0;i<4;i++){
 323:main.c        ****                 writePWM(i,-499);
 324:main.c        ****             }
 325:main.c        ****                 CyDelay(500);
 326:main.c        ****                 for(int i = 0;i<4;i++){
 327:main.c        ****                 writePWM(i,0);
 328:main.c        ****             }
 329:main.c        ****                 CyDelay(1000);
 330:main.c        ****         }*/
 331:main.c        ****         
 332:main.c        ****         Timer_1_WriteCounter(65535);
 1292              		.loc 1 332 0
 1293 019e 4FF6FF70 		movw	r0, #65535
 1294 01a2 FFF7FEFF 		bl	Timer_1_WriteCounter
 333:main.c        ****         //sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[1],err[1]);
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 31


 334:main.c        ****         sprintf(sendValue,"%05d\t%05d\t%05d\t%05d\t%05d\t%05d\t%05d\t%05d\t",adcValue[0],adcValue[1
 1295              		.loc 1 334 0
 1296 01a6 1E4B     		ldr	r3, .L103+40
 1297 01a8 1B88     		ldrh	r3, [r3]
 1298 01aa 1E46     		mov	r6, r3
 1299 01ac 1C4B     		ldr	r3, .L103+40
 1300 01ae 5B88     		ldrh	r3, [r3, #2]
 1301 01b0 9E46     		mov	lr, r3
 1302 01b2 1B4B     		ldr	r3, .L103+40
 1303 01b4 9B88     		ldrh	r3, [r3, #4]
 1304 01b6 1C46     		mov	r4, r3
 1305 01b8 194B     		ldr	r3, .L103+40
 1306 01ba DB88     		ldrh	r3, [r3, #6]
 1307 01bc 1D46     		mov	r5, r3
 1308 01be 144B     		ldr	r3, .L103+24
 1309 01c0 1B68     		ldr	r3, [r3]
 1310 01c2 134A     		ldr	r2, .L103+24
 1311 01c4 5268     		ldr	r2, [r2, #4]
 1312 01c6 1249     		ldr	r1, .L103+24
 1313 01c8 8968     		ldr	r1, [r1, #8]
 1314 01ca 1148     		ldr	r0, .L103+24
 1315 01cc C068     		ldr	r0, [r0, #12]
 1316 01ce 0590     		str	r0, [sp, #20]
 1317 01d0 0491     		str	r1, [sp, #16]
 1318 01d2 0392     		str	r2, [sp, #12]
 1319 01d4 0293     		str	r3, [sp, #8]
 1320 01d6 0195     		str	r5, [sp, #4]
 1321 01d8 0094     		str	r4, [sp]
 1322 01da 7346     		mov	r3, lr
 1323 01dc 3246     		mov	r2, r6
 1324 01de 1849     		ldr	r1, .L103+72
 1325 01e0 1648     		ldr	r0, .L103+68
 1326 01e2 FFF7FEFF 		bl	sprintf
 335:main.c        ****         
 336:main.c        ****         UART_PutString(sendValue);
 1327              		.loc 1 336 0
 1328 01e6 1548     		ldr	r0, .L103+68
 1329 01e8 FFF7FEFF 		bl	UART_PutString
 1330              	.LBB9:
 337:main.c        ****         //sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[1],err[1]);
 338:main.c        ****         //UART_PutString(sendValue);
 339:main.c        ****         /* START PID CODE */
 340:main.c        ****         for(int cyl = 0;cyl<CYL_NO;cyl++){
 1331              		.loc 1 340 0
 1332 01ec 0023     		movs	r3, #0
 1333 01ee FB62     		str	r3, [r7, #44]
 1334 01f0 2FE1     		b	.L79
 1335              	.L104:
 1336 01f2 00BFAFF3 		.align	3
 1336      0080
 1337              	.L103:
 1338 01f8 9A999999 		.word	-1717986918
 1339 01fc 9999993F 		.word	1067030937
 1340 0200 00000000 		.word	psoc_id
 1341 0204 00000000 		.word	offsets
 1342 0208 00000000 		.word	new_pos_set
 1343 020c 00000000 		.word	new_pos
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 32


 1344 0210 00000000 		.word	pos
 1345 0214 00000000 		.word	pulse
 1346 0218 00000000 		.word	pulse_temp
 1347 021c 00000000 		.word	err
 1348 0220 00000000 		.word	adcValue
 1349 0224 00000000 		.word	der
 1350 0228 00000000 		.word	prev_err
 1351 022c 00000000 		.word	pid_integral
 1352 0230 00000000 		.word	RxIsr
 1353 0234 00000000 		.word	adc_update
 1354 0238 00000000 		.word	.LC0
 1355 023c 00000000 		.word	sendValue
 1356 0240 18000000 		.word	.LC1
 1357              	.L85:
 341:main.c        ****             if(new_pos_set[cyl]){
 1358              		.loc 1 341 0
 1359 0244 9E4A     		ldr	r2, .L105+16
 1360 0246 FB6A     		ldr	r3, [r7, #44]
 1361 0248 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1362 024c 002B     		cmp	r3, #0
 1363 024e 0CD0     		beq	.L80
 342:main.c        ****                 pos[cyl] = new_pos[cyl];
 1364              		.loc 1 342 0
 1365 0250 9C4A     		ldr	r2, .L105+20
 1366 0252 FB6A     		ldr	r3, [r7, #44]
 1367 0254 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1368 0258 9B49     		ldr	r1, .L105+24
 1369 025a FB6A     		ldr	r3, [r7, #44]
 1370 025c 41F82320 		str	r2, [r1, r3, lsl #2]
 343:main.c        ****                 new_pos_set[cyl] = 0;
 1371              		.loc 1 343 0
 1372 0260 974A     		ldr	r2, .L105+16
 1373 0262 FB6A     		ldr	r3, [r7, #44]
 1374 0264 0021     		movs	r1, #0
 1375 0266 42F82310 		str	r1, [r2, r3, lsl #2]
 1376              	.L80:
 344:main.c        ****             }
 345:main.c        ****             
 346:main.c        ****             err[cyl] = -pos[cyl] + adcValue[cyl];
 1377              		.loc 1 346 0
 1378 026a 984A     		ldr	r2, .L105+28
 1379 026c FB6A     		ldr	r3, [r7, #44]
 1380 026e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1381 0272 1946     		mov	r1, r3
 1382 0274 944A     		ldr	r2, .L105+24
 1383 0276 FB6A     		ldr	r3, [r7, #44]
 1384 0278 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1385 027c CB1A     		subs	r3, r1, r3
 1386 027e 1846     		mov	r0, r3
 1387 0280 FFF7FEFF 		bl	__aeabi_i2d
 1388 0284 0346     		mov	r3, r0
 1389 0286 0C46     		mov	r4, r1
 1390 0288 9149     		ldr	r1, .L105+32
 1391 028a FA6A     		ldr	r2, [r7, #44]
 1392 028c D200     		lsls	r2, r2, #3
 1393 028e 0A44     		add	r2, r2, r1
 1394 0290 C2E90034 		strd	r3, [r2]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 33


 347:main.c        ****             der[cyl] = err[cyl] - prev_err[cyl];
 1395              		.loc 1 347 0
 1396 0294 8E4A     		ldr	r2, .L105+32
 1397 0296 FB6A     		ldr	r3, [r7, #44]
 1398 0298 DB00     		lsls	r3, r3, #3
 1399 029a 1344     		add	r3, r3, r2
 1400 029c D3E90001 		ldrd	r0, [r3]
 1401 02a0 8C4A     		ldr	r2, .L105+36
 1402 02a2 FB6A     		ldr	r3, [r7, #44]
 1403 02a4 DB00     		lsls	r3, r3, #3
 1404 02a6 1344     		add	r3, r3, r2
 1405 02a8 18CB     		ldmia	r3, {r3-r4}
 1406 02aa 1A46     		mov	r2, r3
 1407 02ac 2346     		mov	r3, r4
 1408 02ae FFF7FEFF 		bl	__aeabi_dsub
 1409 02b2 0346     		mov	r3, r0
 1410 02b4 0C46     		mov	r4, r1
 1411 02b6 8849     		ldr	r1, .L105+40
 1412 02b8 FA6A     		ldr	r2, [r7, #44]
 1413 02ba D200     		lsls	r2, r2, #3
 1414 02bc 0A44     		add	r2, r2, r1
 1415 02be C2E90034 		strd	r3, [r2]
 348:main.c        ****             pid_integral[cyl] = err[cyl]* dt + pid_integral[cyl];
 1416              		.loc 1 348 0
 1417 02c2 834A     		ldr	r2, .L105+32
 1418 02c4 FB6A     		ldr	r3, [r7, #44]
 1419 02c6 DB00     		lsls	r3, r3, #3
 1420 02c8 1344     		add	r3, r3, r2
 1421 02ca D3E90001 		ldrd	r0, [r3]
 1422 02ce D7E90C23 		ldrd	r2, [r7, #48]
 1423 02d2 FFF7FEFF 		bl	__aeabi_dmul
 1424 02d6 0346     		mov	r3, r0
 1425 02d8 0C46     		mov	r4, r1
 1426 02da 1846     		mov	r0, r3
 1427 02dc 2146     		mov	r1, r4
 1428 02de 7F4A     		ldr	r2, .L105+44
 1429 02e0 FB6A     		ldr	r3, [r7, #44]
 1430 02e2 DB00     		lsls	r3, r3, #3
 1431 02e4 1344     		add	r3, r3, r2
 1432 02e6 18CB     		ldmia	r3, {r3-r4}
 1433 02e8 1A46     		mov	r2, r3
 1434 02ea 2346     		mov	r3, r4
 1435 02ec FFF7FEFF 		bl	__aeabi_dadd
 1436 02f0 0346     		mov	r3, r0
 1437 02f2 0C46     		mov	r4, r1
 1438 02f4 7949     		ldr	r1, .L105+44
 1439 02f6 FA6A     		ldr	r2, [r7, #44]
 1440 02f8 D200     		lsls	r2, r2, #3
 1441 02fa 0A44     		add	r2, r2, r1
 1442 02fc C2E90034 		strd	r3, [r2]
 349:main.c        ****             if(pid_integral[cyl]>35000){
 1443              		.loc 1 349 0
 1444 0300 764A     		ldr	r2, .L105+44
 1445 0302 FB6A     		ldr	r3, [r7, #44]
 1446 0304 DB00     		lsls	r3, r3, #3
 1447 0306 1344     		add	r3, r3, r2
 1448 0308 D3E90001 		ldrd	r0, [r3]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 34


 1449 030c 68A3     		adr	r3, .L105
 1450 030e D3E90023 		ldrd	r2, [r3]
 1451 0312 FFF7FEFF 		bl	__aeabi_dcmpgt
 1452 0316 0346     		mov	r3, r0
 1453 0318 002B     		cmp	r3, #0
 1454 031a 09D0     		beq	.L102
 350:main.c        ****                 pid_integral[cyl] = 35000;
 1455              		.loc 1 350 0
 1456 031c 6F4A     		ldr	r2, .L105+44
 1457 031e FB6A     		ldr	r3, [r7, #44]
 1458 0320 DB00     		lsls	r3, r3, #3
 1459 0322 1A44     		add	r2, r2, r3
 1460 0324 62A4     		adr	r4, .L105
 1461 0326 D4E90034 		ldrd	r3, [r4]
 1462 032a C2E90034 		strd	r3, [r2]
 1463 032e 16E0     		b	.L83
 1464              	.L102:
 351:main.c        ****             } else if(pid_integral[cyl]<-35000){
 1465              		.loc 1 351 0
 1466 0330 6A4A     		ldr	r2, .L105+44
 1467 0332 FB6A     		ldr	r3, [r7, #44]
 1468 0334 DB00     		lsls	r3, r3, #3
 1469 0336 1344     		add	r3, r3, r2
 1470 0338 D3E90001 		ldrd	r0, [r3]
 1471 033c 5EA3     		adr	r3, .L105+8
 1472 033e D3E90023 		ldrd	r2, [r3]
 1473 0342 FFF7FEFF 		bl	__aeabi_dcmplt
 1474 0346 0346     		mov	r3, r0
 1475 0348 002B     		cmp	r3, #0
 1476 034a 08D0     		beq	.L83
 352:main.c        ****                 pid_integral[cyl] = -35000;
 1477              		.loc 1 352 0
 1478 034c 634A     		ldr	r2, .L105+44
 1479 034e FB6A     		ldr	r3, [r7, #44]
 1480 0350 DB00     		lsls	r3, r3, #3
 1481 0352 1A44     		add	r2, r2, r3
 1482 0354 58A4     		adr	r4, .L105+8
 1483 0356 D4E90034 		ldrd	r3, [r4]
 1484 035a C2E90034 		strd	r3, [r2]
 1485              	.L83:
 353:main.c        ****             }
 354:main.c        ****             pulse_temp[cyl] = pid[0] * err[cyl] + ( pid[1] * pid_integral[cyl] ) + ( pid[2] * der[c
 1486              		.loc 1 354 0 discriminator 2
 1487 035e 604B     		ldr	r3, .L105+48
 1488 0360 D3E90001 		ldrd	r0, [r3]
 1489 0364 5A4A     		ldr	r2, .L105+32
 1490 0366 FB6A     		ldr	r3, [r7, #44]
 1491 0368 DB00     		lsls	r3, r3, #3
 1492 036a 1344     		add	r3, r3, r2
 1493 036c 18CB     		ldmia	r3, {r3-r4}
 1494 036e 1A46     		mov	r2, r3
 1495 0370 2346     		mov	r3, r4
 1496 0372 FFF7FEFF 		bl	__aeabi_dmul
 1497 0376 0346     		mov	r3, r0
 1498 0378 0C46     		mov	r4, r1
 1499 037a 1D46     		mov	r5, r3
 1500 037c 2646     		mov	r6, r4
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 35


 1501 037e 584B     		ldr	r3, .L105+48
 1502 0380 D3E90201 		ldrd	r0, [r3, #8]
 1503 0384 554A     		ldr	r2, .L105+44
 1504 0386 FB6A     		ldr	r3, [r7, #44]
 1505 0388 DB00     		lsls	r3, r3, #3
 1506 038a 1344     		add	r3, r3, r2
 1507 038c 18CB     		ldmia	r3, {r3-r4}
 1508 038e 1A46     		mov	r2, r3
 1509 0390 2346     		mov	r3, r4
 1510 0392 FFF7FEFF 		bl	__aeabi_dmul
 1511 0396 0346     		mov	r3, r0
 1512 0398 0C46     		mov	r4, r1
 1513 039a 1A46     		mov	r2, r3
 1514 039c 2346     		mov	r3, r4
 1515 039e 2846     		mov	r0, r5
 1516 03a0 3146     		mov	r1, r6
 1517 03a2 FFF7FEFF 		bl	__aeabi_dadd
 1518 03a6 0346     		mov	r3, r0
 1519 03a8 0C46     		mov	r4, r1
 1520 03aa 1D46     		mov	r5, r3
 1521 03ac 2646     		mov	r6, r4
 1522 03ae 4C4B     		ldr	r3, .L105+48
 1523 03b0 D3E90401 		ldrd	r0, [r3, #16]
 1524 03b4 484A     		ldr	r2, .L105+40
 1525 03b6 FB6A     		ldr	r3, [r7, #44]
 1526 03b8 DB00     		lsls	r3, r3, #3
 1527 03ba 1344     		add	r3, r3, r2
 1528 03bc 18CB     		ldmia	r3, {r3-r4}
 1529 03be 1A46     		mov	r2, r3
 1530 03c0 2346     		mov	r3, r4
 1531 03c2 FFF7FEFF 		bl	__aeabi_dmul
 1532 03c6 0346     		mov	r3, r0
 1533 03c8 0C46     		mov	r4, r1
 1534 03ca 1846     		mov	r0, r3
 1535 03cc 2146     		mov	r1, r4
 1536 03ce D7E90C23 		ldrd	r2, [r7, #48]
 1537 03d2 FFF7FEFF 		bl	__aeabi_ddiv
 1538 03d6 0346     		mov	r3, r0
 1539 03d8 0C46     		mov	r4, r1
 1540 03da 1A46     		mov	r2, r3
 1541 03dc 2346     		mov	r3, r4
 1542 03de 2846     		mov	r0, r5
 1543 03e0 3146     		mov	r1, r6
 1544 03e2 FFF7FEFF 		bl	__aeabi_dadd
 1545 03e6 0346     		mov	r3, r0
 1546 03e8 0C46     		mov	r4, r1
 1547 03ea 1846     		mov	r0, r3
 1548 03ec 2146     		mov	r1, r4
 1549 03ee FFF7FEFF 		bl	__aeabi_d2iz
 1550 03f2 0146     		mov	r1, r0
 1551 03f4 3B4A     		ldr	r2, .L105+52
 1552 03f6 FB6A     		ldr	r3, [r7, #44]
 1553 03f8 42F82310 		str	r1, [r2, r3, lsl #2]
 355:main.c        ****             
 356:main.c        ****             pulse[cyl] = pulseCheck(pulse_temp[cyl],offsets[cyl][1],offsets[cyl][0]);
 1554              		.loc 1 356 0 discriminator 2
 1555 03fc 394A     		ldr	r2, .L105+52
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 36


 1556 03fe FB6A     		ldr	r3, [r7, #44]
 1557 0400 52F82300 		ldr	r0, [r2, r3, lsl #2]
 1558 0404 384A     		ldr	r2, .L105+56
 1559 0406 FB6A     		ldr	r3, [r7, #44]
 1560 0408 DB00     		lsls	r3, r3, #3
 1561 040a 1344     		add	r3, r3, r2
 1562 040c 5968     		ldr	r1, [r3, #4]
 1563 040e 364A     		ldr	r2, .L105+56
 1564 0410 FB6A     		ldr	r3, [r7, #44]
 1565 0412 52F83330 		ldr	r3, [r2, r3, lsl #3]
 1566 0416 1A46     		mov	r2, r3
 1567 0418 FFF7FEFF 		bl	pulseCheck
 1568 041c 0146     		mov	r1, r0
 1569 041e 334A     		ldr	r2, .L105+60
 1570 0420 FB6A     		ldr	r3, [r7, #44]
 1571 0422 42F82310 		str	r1, [r2, r3, lsl #2]
 357:main.c        ****             
 358:main.c        ****             writePWM(cyl,pulse[cyl]);
 1572              		.loc 1 358 0 discriminator 2
 1573 0426 314A     		ldr	r2, .L105+60
 1574 0428 FB6A     		ldr	r3, [r7, #44]
 1575 042a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1576 042e 1946     		mov	r1, r3
 1577 0430 F86A     		ldr	r0, [r7, #44]
 1578 0432 FFF7FEFF 		bl	writePWM
 359:main.c        ****             prev_err[cyl] = err[cyl];
 1579              		.loc 1 359 0 discriminator 2
 1580 0436 264A     		ldr	r2, .L105+32
 1581 0438 FB6A     		ldr	r3, [r7, #44]
 1582 043a DB00     		lsls	r3, r3, #3
 1583 043c 1344     		add	r3, r3, r2
 1584 043e 18CB     		ldmia	r3, {r3-r4}
 1585 0440 2449     		ldr	r1, .L105+36
 1586 0442 FA6A     		ldr	r2, [r7, #44]
 1587 0444 D200     		lsls	r2, r2, #3
 1588 0446 0A44     		add	r2, r2, r1
 1589 0448 C2E90034 		strd	r3, [r2]
 340:main.c        ****             if(new_pos_set[cyl]){
 1590              		.loc 1 340 0 discriminator 2
 1591 044c FB6A     		ldr	r3, [r7, #44]
 1592 044e 0133     		adds	r3, r3, #1
 1593 0450 FB62     		str	r3, [r7, #44]
 1594              	.L79:
 340:main.c        ****             if(new_pos_set[cyl]){
 1595              		.loc 1 340 0 is_stmt 0 discriminator 1
 1596 0452 FB6A     		ldr	r3, [r7, #44]
 1597 0454 032B     		cmp	r3, #3
 1598 0456 7FF7F5AE 		ble	.L85
 1599              	.LBE9:
 360:main.c        ****         }
 361:main.c        ****         
 362:main.c        ****         
 363:main.c        ****         /* END PID CODE */
 364:main.c        ****         if(start_calib){
 1600              		.loc 1 364 0 is_stmt 1
 1601 045a 254B     		ldr	r3, .L105+64
 1602 045c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 37


 1603 045e 002B     		cmp	r3, #0
 1604 0460 00F0D980 		beq	.L86
 1605              	.LBB10:
 365:main.c        ****                 
 366:main.c        ****             int calib_cyl = 0;
 1606              		.loc 1 366 0
 1607 0464 0023     		movs	r3, #0
 1608 0466 FB60     		str	r3, [r7, #12]
 367:main.c        ****             int upper_offset_set = 0;
 1609              		.loc 1 367 0
 1610 0468 0023     		movs	r3, #0
 1611 046a BB62     		str	r3, [r7, #40]
 368:main.c        ****             int lower_offset_set = 0;
 1612              		.loc 1 368 0
 1613 046c 0023     		movs	r3, #0
 1614 046e 7B62     		str	r3, [r7, #36]
 369:main.c        ****             int upper_offset = 160;
 1615              		.loc 1 369 0
 1616 0470 A023     		movs	r3, #160
 1617 0472 3B62     		str	r3, [r7, #32]
 370:main.c        ****             int lower_offset = -110;
 1618              		.loc 1 370 0
 1619 0474 6FF06D03 		mvn	r3, #109
 1620 0478 FB61     		str	r3, [r7, #28]
 371:main.c        ****             int lower_check_no = 0;
 1621              		.loc 1 371 0
 1622 047a 0023     		movs	r3, #0
 1623 047c BB61     		str	r3, [r7, #24]
 372:main.c        ****             int upper_check_no = 0;
 1624              		.loc 1 372 0
 1625 047e 0023     		movs	r3, #0
 1626 0480 7B61     		str	r3, [r7, #20]
 373:main.c        ****             uint16 prev_adcValue = adcValue[0];
 1627              		.loc 1 373 0
 1628 0482 124B     		ldr	r3, .L105+28
 1629 0484 1B88     		ldrh	r3, [r3]	@ movhi
 1630 0486 7B81     		strh	r3, [r7, #10]	@ movhi
 374:main.c        ****             uint16 diff = 0;
 1631              		.loc 1 374 0
 1632 0488 0023     		movs	r3, #0
 1633 048a 3B81     		strh	r3, [r7, #8]	@ movhi
 1634              	.LBB11:
 375:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1635              		.loc 1 375 0
 1636 048c 0023     		movs	r3, #0
 1637 048e 3B61     		str	r3, [r7, #16]
 1638 0490 06E0     		b	.L87
 1639              	.L88:
 376:main.c        ****                 writePWM(g,0);
 1640              		.loc 1 376 0 discriminator 3
 1641 0492 0021     		movs	r1, #0
 1642 0494 3869     		ldr	r0, [r7, #16]
 1643 0496 FFF7FEFF 		bl	writePWM
 375:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1644              		.loc 1 375 0 discriminator 3
 1645 049a 3B69     		ldr	r3, [r7, #16]
 1646 049c 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 38


 1647 049e 3B61     		str	r3, [r7, #16]
 1648              	.L87:
 375:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1649              		.loc 1 375 0 is_stmt 0 discriminator 1
 1650 04a0 3B69     		ldr	r3, [r7, #16]
 1651 04a2 032B     		cmp	r3, #3
 1652 04a4 F5DD     		ble	.L88
 1653              	.LBE11:
 377:main.c        ****                 
 378:main.c        ****             CyDelay(1000);
 1654              		.loc 1 378 0 is_stmt 1
 1655 04a6 4FF47A70 		mov	r0, #1000
 1656 04aa FFF7FEFF 		bl	CyDelay
 379:main.c        ****         
 380:main.c        ****             while(upper_offset_set==0 || lower_offset_set==0){
 1657              		.loc 1 380 0
 1658 04ae 9BE0     		b	.L89
 1659              	.L106:
 1660              		.align	3
 1661              	.L105:
 1662 04b0 00000000 		.word	0
 1663 04b4 0017E140 		.word	1088493312
 1664 04b8 00000000 		.word	0
 1665 04bc 0017E1C0 		.word	-1058990336
 1666 04c0 00000000 		.word	new_pos_set
 1667 04c4 00000000 		.word	new_pos
 1668 04c8 00000000 		.word	pos
 1669 04cc 00000000 		.word	adcValue
 1670 04d0 00000000 		.word	err
 1671 04d4 00000000 		.word	prev_err
 1672 04d8 00000000 		.word	der
 1673 04dc 00000000 		.word	pid_integral
 1674 04e0 00000000 		.word	pid
 1675 04e4 00000000 		.word	pulse_temp
 1676 04e8 00000000 		.word	offsets
 1677 04ec 00000000 		.word	pulse
 1678 04f0 00000000 		.word	start_calib
 1679              	.L97:
 381:main.c        ****                 
 382:main.c        ****                 prev_adcValue = adcValue[calib_cyl];
 1680              		.loc 1 382 0
 1681 04f4 684A     		ldr	r2, .L107+16
 1682 04f6 FB68     		ldr	r3, [r7, #12]
 1683 04f8 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 1684 04fc 7B81     		strh	r3, [r7, #10]	@ movhi
 383:main.c        ****                 if(upper_offset_set==0){
 1685              		.loc 1 383 0
 1686 04fe BB6A     		ldr	r3, [r7, #40]
 1687 0500 002B     		cmp	r3, #0
 1688 0502 2FD1     		bne	.L90
 384:main.c        ****                     writePWM(calib_cyl,upper_offset);
 1689              		.loc 1 384 0
 1690 0504 396A     		ldr	r1, [r7, #32]
 1691 0506 F868     		ldr	r0, [r7, #12]
 1692 0508 FFF7FEFF 		bl	writePWM
 385:main.c        ****                     CyDelay(200);
 1693              		.loc 1 385 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 39


 1694 050c C820     		movs	r0, #200
 1695 050e FFF7FEFF 		bl	CyDelay
 386:main.c        ****                     diff = abs(prev_adcValue-adcValue[calib_cyl]);
 1696              		.loc 1 386 0
 1697 0512 7B89     		ldrh	r3, [r7, #10]
 1698 0514 6049     		ldr	r1, .L107+16
 1699 0516 FA68     		ldr	r2, [r7, #12]
 1700 0518 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1701 051c 9B1A     		subs	r3, r3, r2
 1702 051e 002B     		cmp	r3, #0
 1703 0520 B8BF     		it	lt
 1704 0522 5B42     		rsblt	r3, r3, #0
 1705 0524 3B81     		strh	r3, [r7, #8]	@ movhi
 387:main.c        ****                     if(diff>10){
 1706              		.loc 1 387 0
 1707 0526 3B89     		ldrh	r3, [r7, #8]
 1708 0528 0A2B     		cmp	r3, #10
 1709 052a 03D9     		bls	.L91
 388:main.c        ****                         upper_check_no ++;;
 1710              		.loc 1 388 0
 1711 052c 7B69     		ldr	r3, [r7, #20]
 1712 052e 0133     		adds	r3, r3, #1
 1713 0530 7B61     		str	r3, [r7, #20]
 1714 0532 04E0     		b	.L92
 1715              	.L91:
 389:main.c        ****                     }else{
 390:main.c        ****                         upper_offset = upper_offset + 1;
 1716              		.loc 1 390 0
 1717 0534 3B6A     		ldr	r3, [r7, #32]
 1718 0536 0133     		adds	r3, r3, #1
 1719 0538 3B62     		str	r3, [r7, #32]
 391:main.c        ****                         upper_check_no=0;
 1720              		.loc 1 391 0
 1721 053a 0023     		movs	r3, #0
 1722 053c 7B61     		str	r3, [r7, #20]
 1723              	.L92:
 392:main.c        ****                     }
 393:main.c        ****                     sprintf(sendValue,"UPPER:\tLower Offset: %d \tUpper Offset: %d \t ADC Diff: %d\
 1724              		.loc 1 393 0
 1725 053e 3B89     		ldrh	r3, [r7, #8]
 1726 0540 0093     		str	r3, [sp]
 1727 0542 3B6A     		ldr	r3, [r7, #32]
 1728 0544 FA69     		ldr	r2, [r7, #28]
 1729 0546 5549     		ldr	r1, .L107+20
 1730 0548 5548     		ldr	r0, .L107+24
 1731 054a FFF7FEFF 		bl	sprintf
 394:main.c        ****                     UART_PutString(sendValue);
 1732              		.loc 1 394 0
 1733 054e 5448     		ldr	r0, .L107+24
 1734 0550 FFF7FEFF 		bl	UART_PutString
 395:main.c        ****                     writePWM(calib_cyl,0);
 1735              		.loc 1 395 0
 1736 0554 0021     		movs	r1, #0
 1737 0556 F868     		ldr	r0, [r7, #12]
 1738 0558 FFF7FEFF 		bl	writePWM
 396:main.c        ****                     CyDelay(500);
 1739              		.loc 1 396 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 40


 1740 055c 4FF4FA70 		mov	r0, #500
 1741 0560 FFF7FEFF 		bl	CyDelay
 1742              	.L90:
 397:main.c        ****                 }
 398:main.c        ****                 
 399:main.c        ****                 prev_adcValue = adcValue[calib_cyl];
 1743              		.loc 1 399 0
 1744 0564 4C4A     		ldr	r2, .L107+16
 1745 0566 FB68     		ldr	r3, [r7, #12]
 1746 0568 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 1747 056c 7B81     		strh	r3, [r7, #10]	@ movhi
 400:main.c        ****                 if(lower_offset_set==0){
 1748              		.loc 1 400 0
 1749 056e 7B6A     		ldr	r3, [r7, #36]
 1750 0570 002B     		cmp	r3, #0
 1751 0572 2FD1     		bne	.L93
 401:main.c        ****                     writePWM(calib_cyl,lower_offset);
 1752              		.loc 1 401 0
 1753 0574 F969     		ldr	r1, [r7, #28]
 1754 0576 F868     		ldr	r0, [r7, #12]
 1755 0578 FFF7FEFF 		bl	writePWM
 402:main.c        ****                     CyDelay(200);
 1756              		.loc 1 402 0
 1757 057c C820     		movs	r0, #200
 1758 057e FFF7FEFF 		bl	CyDelay
 403:main.c        ****                     diff = abs(prev_adcValue-adcValue[calib_cyl]);
 1759              		.loc 1 403 0
 1760 0582 7B89     		ldrh	r3, [r7, #10]
 1761 0584 4449     		ldr	r1, .L107+16
 1762 0586 FA68     		ldr	r2, [r7, #12]
 1763 0588 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1764 058c 9B1A     		subs	r3, r3, r2
 1765 058e 002B     		cmp	r3, #0
 1766 0590 B8BF     		it	lt
 1767 0592 5B42     		rsblt	r3, r3, #0
 1768 0594 3B81     		strh	r3, [r7, #8]	@ movhi
 404:main.c        ****                     if(diff>10){
 1769              		.loc 1 404 0
 1770 0596 3B89     		ldrh	r3, [r7, #8]
 1771 0598 0A2B     		cmp	r3, #10
 1772 059a 03D9     		bls	.L94
 405:main.c        ****                         lower_check_no++;
 1773              		.loc 1 405 0
 1774 059c BB69     		ldr	r3, [r7, #24]
 1775 059e 0133     		adds	r3, r3, #1
 1776 05a0 BB61     		str	r3, [r7, #24]
 1777 05a2 04E0     		b	.L95
 1778              	.L94:
 406:main.c        ****                     }else{
 407:main.c        ****                         lower_offset = lower_offset - 1;
 1779              		.loc 1 407 0
 1780 05a4 FB69     		ldr	r3, [r7, #28]
 1781 05a6 013B     		subs	r3, r3, #1
 1782 05a8 FB61     		str	r3, [r7, #28]
 408:main.c        ****                         lower_check_no = 0;
 1783              		.loc 1 408 0
 1784 05aa 0023     		movs	r3, #0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 41


 1785 05ac BB61     		str	r3, [r7, #24]
 1786              	.L95:
 409:main.c        ****                     }
 410:main.c        ****                     sprintf(sendValue,"LOWER:\tLower Offset: %d \tUpper Offset: %d \t ADC Diff: %d\
 1787              		.loc 1 410 0
 1788 05ae 3B89     		ldrh	r3, [r7, #8]
 1789 05b0 0093     		str	r3, [sp]
 1790 05b2 3B6A     		ldr	r3, [r7, #32]
 1791 05b4 FA69     		ldr	r2, [r7, #28]
 1792 05b6 3B49     		ldr	r1, .L107+28
 1793 05b8 3948     		ldr	r0, .L107+24
 1794 05ba FFF7FEFF 		bl	sprintf
 411:main.c        ****                     UART_PutString(sendValue);
 1795              		.loc 1 411 0
 1796 05be 3848     		ldr	r0, .L107+24
 1797 05c0 FFF7FEFF 		bl	UART_PutString
 412:main.c        ****                     writePWM(calib_cyl,0);
 1798              		.loc 1 412 0
 1799 05c4 0021     		movs	r1, #0
 1800 05c6 F868     		ldr	r0, [r7, #12]
 1801 05c8 FFF7FEFF 		bl	writePWM
 413:main.c        ****                     CyDelay(500);
 1802              		.loc 1 413 0
 1803 05cc 4FF4FA70 		mov	r0, #500
 1804 05d0 FFF7FEFF 		bl	CyDelay
 1805              	.L93:
 414:main.c        ****                 }
 415:main.c        ****                 
 416:main.c        ****                 if(upper_check_no>2){
 1806              		.loc 1 416 0
 1807 05d4 7B69     		ldr	r3, [r7, #20]
 1808 05d6 022B     		cmp	r3, #2
 1809 05d8 01DD     		ble	.L96
 417:main.c        ****                     upper_offset_set=1;}
 1810              		.loc 1 417 0
 1811 05da 0123     		movs	r3, #1
 1812 05dc BB62     		str	r3, [r7, #40]
 1813              	.L96:
 418:main.c        ****                 if(lower_check_no>2){
 1814              		.loc 1 418 0
 1815 05de BB69     		ldr	r3, [r7, #24]
 1816 05e0 022B     		cmp	r3, #2
 1817 05e2 01DD     		ble	.L89
 419:main.c        ****                     lower_offset_set=1;}
 1818              		.loc 1 419 0
 1819 05e4 0123     		movs	r3, #1
 1820 05e6 7B62     		str	r3, [r7, #36]
 1821              	.L89:
 380:main.c        ****                 
 1822              		.loc 1 380 0
 1823 05e8 BB6A     		ldr	r3, [r7, #40]
 1824 05ea 002B     		cmp	r3, #0
 1825 05ec 82D0     		beq	.L97
 380:main.c        ****                 
 1826              		.loc 1 380 0 is_stmt 0 discriminator 1
 1827 05ee 7B6A     		ldr	r3, [r7, #36]
 1828 05f0 002B     		cmp	r3, #0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 42


 1829 05f2 3FF47FAF 		beq	.L97
 420:main.c        ****         
 421:main.c        ****             }
 422:main.c        ****             
 423:main.c        ****             sprintf(sendValue,"Lower Offset: %d \t Upper Offset: %d \n",lower_offset,upper_offset);
 1830              		.loc 1 423 0 is_stmt 1
 1831 05f6 3B6A     		ldr	r3, [r7, #32]
 1832 05f8 FA69     		ldr	r2, [r7, #28]
 1833 05fa 2B49     		ldr	r1, .L107+32
 1834 05fc 2848     		ldr	r0, .L107+24
 1835 05fe FFF7FEFF 		bl	sprintf
 424:main.c        ****             UART_PutString(sendValue);
 1836              		.loc 1 424 0
 1837 0602 2748     		ldr	r0, .L107+24
 1838 0604 FFF7FEFF 		bl	UART_PutString
 425:main.c        ****             
 426:main.c        ****             //while(1){CyDelay(100);};
 427:main.c        ****             start_calib = 0;
 1839              		.loc 1 427 0
 1840 0608 284B     		ldr	r3, .L107+36
 1841 060a 0022     		movs	r2, #0
 1842 060c 1A60     		str	r2, [r3]
 428:main.c        ****             CyDelay(15000);
 1843              		.loc 1 428 0
 1844 060e 43F69820 		movw	r0, #15000
 1845 0612 FFF7FEFF 		bl	CyDelay
 1846              	.L86:
 1847              	.LBE10:
 429:main.c        ****         }
 430:main.c        ****         CyDelay(1);
 1848              		.loc 1 430 0
 1849 0616 0120     		movs	r0, #1
 1850 0618 FFF7FEFF 		bl	CyDelay
 431:main.c        ****         
 432:main.c        ****         time = Timer_1_ReadCounter();
 1851              		.loc 1 432 0
 1852 061c FFF7FEFF 		bl	Timer_1_ReadCounter
 1853 0620 0346     		mov	r3, r0
 1854 0622 1846     		mov	r0, r3
 1855 0624 FFF7FEFF 		bl	__aeabi_ui2d
 1856 0628 0346     		mov	r3, r0
 1857 062a 0C46     		mov	r4, r1
 1858 062c C7E90034 		strd	r3, [r7]
 433:main.c        ****         dt=(double)(65535-time)/1000000;
 1859              		.loc 1 433 0
 1860 0630 D7E90023 		ldrd	r2, [r7]
 1861 0634 14A1     		adr	r1, .L107
 1862 0636 D1E90001 		ldrd	r0, [r1]
 1863 063a FFF7FEFF 		bl	__aeabi_dsub
 1864 063e 0346     		mov	r3, r0
 1865 0640 0C46     		mov	r4, r1
 1866 0642 1846     		mov	r0, r3
 1867 0644 2146     		mov	r1, r4
 1868 0646 12A3     		adr	r3, .L107+8
 1869 0648 D3E90023 		ldrd	r2, [r3]
 1870 064c FFF7FEFF 		bl	__aeabi_ddiv
 1871 0650 0346     		mov	r3, r0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 43


 1872 0652 0C46     		mov	r4, r1
 1873 0654 C7E90C34 		strd	r3, [r7, #48]
 434:main.c        ****         dts[dts_ct] = dt;
 1874              		.loc 1 434 0
 1875 0658 154B     		ldr	r3, .L107+40
 1876 065a 1B68     		ldr	r3, [r3]
 1877 065c 154A     		ldr	r2, .L107+44
 1878 065e DB00     		lsls	r3, r3, #3
 1879 0660 1A44     		add	r2, r2, r3
 1880 0662 D7E90C34 		ldrd	r3, [r7, #48]
 1881 0666 C2E90034 		strd	r3, [r2]
 435:main.c        ****         dts_ct++;
 1882              		.loc 1 435 0
 1883 066a 114B     		ldr	r3, .L107+40
 1884 066c 1B68     		ldr	r3, [r3]
 1885 066e 0133     		adds	r3, r3, #1
 1886 0670 0F4A     		ldr	r2, .L107+40
 1887 0672 1360     		str	r3, [r2]
 436:main.c        ****         if(dts_ct>29){
 1888              		.loc 1 436 0
 1889 0674 0E4B     		ldr	r3, .L107+40
 1890 0676 1B68     		ldr	r3, [r3]
 1891 0678 1D2B     		cmp	r3, #29
 1892 067a 7FF790AD 		ble	.L99
 437:main.c        ****             dts_ct=0;
 1893              		.loc 1 437 0
 1894 067e 0C4B     		ldr	r3, .L107+40
 1895 0680 0022     		movs	r2, #0
 1896 0682 1A60     		str	r2, [r3]
 438:main.c        ****         }
 439:main.c        ****         
 440:main.c        ****     }
 1897              		.loc 1 440 0
 1898 0684 8BE5     		b	.L99
 1899              	.L108:
 1900 0686 00BF     		.align	3
 1901              	.L107:
 1902 0688 00000000 		.word	0
 1903 068c E0FFEF40 		.word	1089470432
 1904 0690 00000000 		.word	0
 1905 0694 80842E41 		.word	1093567616
 1906 0698 00000000 		.word	adcValue
 1907 069c 44000000 		.word	.LC2
 1908 06a0 00000000 		.word	sendValue
 1909 06a4 80000000 		.word	.LC3
 1910 06a8 BC000000 		.word	.LC4
 1911 06ac 00000000 		.word	start_calib
 1912 06b0 00000000 		.word	dts_ct
 1913 06b4 00000000 		.word	dts
 1914              		.cfi_endproc
 1915              	.LFE68:
 1916              		.size	main, .-main
 1917              		.text
 1918              	.Letext0:
 1919              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1920              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1921              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 44


 1922              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 1923              		.section	.debug_info,"",%progbits
 1924              	.Ldebug_info0:
 1925 0000 04060000 		.4byte	0x604
 1926 0004 0400     		.2byte	0x4
 1927 0006 00000000 		.4byte	.Ldebug_abbrev0
 1928 000a 04       		.byte	0x4
 1929 000b 01       		.uleb128 0x1
 1930 000c 77000000 		.4byte	.LASF60
 1931 0010 0C       		.byte	0xc
 1932 0011 94020000 		.4byte	.LASF61
 1933 0015 22020000 		.4byte	.LASF62
 1934 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1935 001d 00000000 		.4byte	0
 1936 0021 00000000 		.4byte	.Ldebug_line0
 1937 0025 02       		.uleb128 0x2
 1938 0026 01       		.byte	0x1
 1939 0027 06       		.byte	0x6
 1940 0028 4F010000 		.4byte	.LASF0
 1941 002c 02       		.uleb128 0x2
 1942 002d 01       		.byte	0x1
 1943 002e 08       		.byte	0x8
 1944 002f A0010000 		.4byte	.LASF1
 1945 0033 02       		.uleb128 0x2
 1946 0034 02       		.byte	0x2
 1947 0035 05       		.byte	0x5
 1948 0036 52000000 		.4byte	.LASF2
 1949 003a 02       		.uleb128 0x2
 1950 003b 02       		.byte	0x2
 1951 003c 07       		.byte	0x7
 1952 003d 0F020000 		.4byte	.LASF3
 1953 0041 03       		.uleb128 0x3
 1954 0042 CD020000 		.4byte	.LASF9
 1955 0046 02       		.byte	0x2
 1956 0047 3F       		.byte	0x3f
 1957 0048 4C000000 		.4byte	0x4c
 1958 004c 02       		.uleb128 0x2
 1959 004d 04       		.byte	0x4
 1960 004e 05       		.byte	0x5
 1961 004f 7F010000 		.4byte	.LASF4
 1962 0053 02       		.uleb128 0x2
 1963 0054 04       		.byte	0x4
 1964 0055 07       		.byte	0x7
 1965 0056 A0020000 		.4byte	.LASF5
 1966 005a 02       		.uleb128 0x2
 1967 005b 08       		.byte	0x8
 1968 005c 05       		.byte	0x5
 1969 005d 05010000 		.4byte	.LASF6
 1970 0061 02       		.uleb128 0x2
 1971 0062 08       		.byte	0x8
 1972 0063 07       		.byte	0x7
 1973 0064 E0010000 		.4byte	.LASF7
 1974 0068 04       		.uleb128 0x4
 1975 0069 04       		.byte	0x4
 1976 006a 05       		.byte	0x5
 1977 006b 696E7400 		.ascii	"int\000"
 1978 006f 02       		.uleb128 0x2
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 45


 1979 0070 04       		.byte	0x4
 1980 0071 07       		.byte	0x7
 1981 0072 F7010000 		.4byte	.LASF8
 1982 0076 03       		.uleb128 0x3
 1983 0077 7D020000 		.4byte	.LASF10
 1984 007b 03       		.byte	0x3
 1985 007c 2C       		.byte	0x2c
 1986 007d 41000000 		.4byte	0x41
 1987 0081 05       		.uleb128 0x5
 1988 0082 34010000 		.4byte	.LASF11
 1989 0086 04       		.byte	0x4
 1990 0087 9201     		.2byte	0x192
 1991 0089 2C000000 		.4byte	0x2c
 1992 008d 05       		.uleb128 0x5
 1993 008e 18010000 		.4byte	.LASF12
 1994 0092 04       		.byte	0x4
 1995 0093 9301     		.2byte	0x193
 1996 0095 3A000000 		.4byte	0x3a
 1997 0099 02       		.uleb128 0x2
 1998 009a 04       		.byte	0x4
 1999 009b 04       		.byte	0x4
 2000 009c 5B010000 		.4byte	.LASF13
 2001 00a0 02       		.uleb128 0x2
 2002 00a1 08       		.byte	0x8
 2003 00a2 04       		.byte	0x4
 2004 00a3 2F030000 		.4byte	.LASF14
 2005 00a7 02       		.uleb128 0x2
 2006 00a8 01       		.byte	0x1
 2007 00a9 08       		.byte	0x8
 2008 00aa 6E020000 		.4byte	.LASF15
 2009 00ae 05       		.uleb128 0x5
 2010 00af 9B020000 		.4byte	.LASF16
 2011 00b3 04       		.byte	0x4
 2012 00b4 3C02     		.2byte	0x23c
 2013 00b6 BA000000 		.4byte	0xba
 2014 00ba 06       		.uleb128 0x6
 2015 00bb 81000000 		.4byte	0x81
 2016 00bf 02       		.uleb128 0x2
 2017 00c0 08       		.byte	0x8
 2018 00c1 04       		.byte	0x4
 2019 00c2 00000000 		.4byte	.LASF17
 2020 00c6 02       		.uleb128 0x2
 2021 00c7 04       		.byte	0x4
 2022 00c8 07       		.byte	0x7
 2023 00c9 69000000 		.4byte	.LASF18
 2024 00cd 07       		.uleb128 0x7
 2025 00ce 61010000 		.4byte	.LASF23
 2026 00d2 01       		.byte	0x1
 2027 00d3 19       		.byte	0x19
 2028 00d4 00000000 		.4byte	.LFB64
 2029 00d8 78000000 		.4byte	.LFE64-.LFB64
 2030 00dc 01       		.uleb128 0x1
 2031 00dd 9C       		.byte	0x9c
 2032 00de FF000000 		.4byte	0xff
 2033 00e2 08       		.uleb128 0x8
 2034 00e3 3A010000 		.4byte	.LASF19
 2035 00e7 01       		.byte	0x1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 46


 2036 00e8 19       		.byte	0x19
 2037 00e9 68000000 		.4byte	0x68
 2038 00ed 02       		.uleb128 0x2
 2039 00ee 91       		.byte	0x91
 2040 00ef 74       		.sleb128 -12
 2041 00f0 08       		.uleb128 0x8
 2042 00f1 2E010000 		.4byte	.LASF20
 2043 00f5 01       		.byte	0x1
 2044 00f6 19       		.byte	0x19
 2045 00f7 68000000 		.4byte	0x68
 2046 00fb 02       		.uleb128 0x2
 2047 00fc 91       		.byte	0x91
 2048 00fd 70       		.sleb128 -16
 2049 00fe 00       		.byte	0
 2050 00ff 09       		.uleb128 0x9
 2051 0100 E4020000 		.4byte	.LASF63
 2052 0104 01       		.byte	0x1
 2053 0105 2A       		.byte	0x2a
 2054 0106 68000000 		.4byte	0x68
 2055 010a 00000000 		.4byte	.LFB65
 2056 010e 54000000 		.4byte	.LFE65-.LFB65
 2057 0112 01       		.uleb128 0x1
 2058 0113 9C       		.byte	0x9c
 2059 0114 43010000 		.4byte	0x143
 2060 0118 08       		.uleb128 0x8
 2061 0119 2E010000 		.4byte	.LASF20
 2062 011d 01       		.byte	0x1
 2063 011e 2A       		.byte	0x2a
 2064 011f 68000000 		.4byte	0x68
 2065 0123 02       		.uleb128 0x2
 2066 0124 91       		.byte	0x91
 2067 0125 74       		.sleb128 -12
 2068 0126 08       		.uleb128 0x8
 2069 0127 D7020000 		.4byte	.LASF21
 2070 012b 01       		.byte	0x1
 2071 012c 2A       		.byte	0x2a
 2072 012d 68000000 		.4byte	0x68
 2073 0131 02       		.uleb128 0x2
 2074 0132 91       		.byte	0x91
 2075 0133 70       		.sleb128 -16
 2076 0134 08       		.uleb128 0x8
 2077 0135 5C000000 		.4byte	.LASF22
 2078 0139 01       		.byte	0x1
 2079 013a 2A       		.byte	0x2a
 2080 013b 68000000 		.4byte	0x68
 2081 013f 02       		.uleb128 0x2
 2082 0140 91       		.byte	0x91
 2083 0141 6C       		.sleb128 -20
 2084 0142 00       		.byte	0
 2085 0143 07       		.uleb128 0x7
 2086 0144 FB020000 		.4byte	.LASF24
 2087 0148 01       		.byte	0x1
 2088 0149 56       		.byte	0x56
 2089 014a 00000000 		.4byte	.LFB66
 2090 014e 6C010000 		.4byte	.LFE66-.LFB66
 2091 0152 01       		.uleb128 0x1
 2092 0153 9C       		.byte	0x9c
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 47


 2093 0154 CF010000 		.4byte	0x1cf
 2094 0158 0A       		.uleb128 0xa
 2095 0159 06000000 		.4byte	.LBB2
 2096 015d 4A010000 		.4byte	.LBE2-.LBB2
 2097 0161 0B       		.uleb128 0xb
 2098 0162 6300     		.ascii	"c\000"
 2099 0164 01       		.byte	0x1
 2100 0165 57       		.byte	0x57
 2101 0166 68000000 		.4byte	0x68
 2102 016a 02       		.uleb128 0x2
 2103 016b 91       		.byte	0x91
 2104 016c 74       		.sleb128 -12
 2105 016d 0C       		.uleb128 0xc
 2106 016e 16000000 		.4byte	.LBB3
 2107 0172 3A000000 		.4byte	.LBE3-.LBB3
 2108 0176 87010000 		.4byte	0x187
 2109 017a 0B       		.uleb128 0xb
 2110 017b 6A00     		.ascii	"j\000"
 2111 017d 01       		.byte	0x1
 2112 017e 5A       		.byte	0x5a
 2113 017f 68000000 		.4byte	0x68
 2114 0183 02       		.uleb128 0x2
 2115 0184 91       		.byte	0x91
 2116 0185 70       		.sleb128 -16
 2117 0186 00       		.byte	0
 2118 0187 0C       		.uleb128 0xc
 2119 0188 AA000000 		.4byte	.LBB4
 2120 018c 2C000000 		.4byte	.LBE4-.LBB4
 2121 0190 A1010000 		.4byte	0x1a1
 2122 0194 0B       		.uleb128 0xb
 2123 0195 6A00     		.ascii	"j\000"
 2124 0197 01       		.byte	0x1
 2125 0198 63       		.byte	0x63
 2126 0199 68000000 		.4byte	0x68
 2127 019d 02       		.uleb128 0x2
 2128 019e 91       		.byte	0x91
 2129 019f 6C       		.sleb128 -20
 2130 01a0 00       		.byte	0
 2131 01a1 0A       		.uleb128 0xa
 2132 01a2 D6000000 		.4byte	.LBB5
 2133 01a6 60000000 		.4byte	.LBE5-.LBB5
 2134 01aa 0B       		.uleb128 0xb
 2135 01ab 6900     		.ascii	"i\000"
 2136 01ad 01       		.byte	0x1
 2137 01ae 66       		.byte	0x66
 2138 01af 68000000 		.4byte	0x68
 2139 01b3 02       		.uleb128 0x2
 2140 01b4 91       		.byte	0x91
 2141 01b5 68       		.sleb128 -24
 2142 01b6 0A       		.uleb128 0xa
 2143 01b7 DC000000 		.4byte	.LBB6
 2144 01bb 4E000000 		.4byte	.LBE6-.LBB6
 2145 01bf 0B       		.uleb128 0xb
 2146 01c0 6A00     		.ascii	"j\000"
 2147 01c2 01       		.byte	0x1
 2148 01c3 67       		.byte	0x67
 2149 01c4 68000000 		.4byte	0x68
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 48


 2150 01c8 02       		.uleb128 0x2
 2151 01c9 91       		.byte	0x91
 2152 01ca 64       		.sleb128 -28
 2153 01cb 00       		.byte	0
 2154 01cc 00       		.byte	0
 2155 01cd 00       		.byte	0
 2156 01ce 00       		.byte	0
 2157 01cf 07       		.uleb128 0x7
 2158 01d0 09020000 		.4byte	.LASF25
 2159 01d4 01       		.byte	0x1
 2160 01d5 78       		.byte	0x78
 2161 01d6 00000000 		.4byte	.LFB67
 2162 01da 1C030000 		.4byte	.LFE67-.LFB67
 2163 01de 01       		.uleb128 0x1
 2164 01df 9C       		.byte	0x9c
 2165 01e0 18020000 		.4byte	0x218
 2166 01e4 0D       		.uleb128 0xd
 2167 01e5 C6010000 		.4byte	.LASF26
 2168 01e9 01       		.byte	0x1
 2169 01ea 7A       		.byte	0x7a
 2170 01eb 81000000 		.4byte	0x81
 2171 01ef 02       		.uleb128 0x2
 2172 01f0 91       		.byte	0x91
 2173 01f1 6B       		.sleb128 -21
 2174 01f2 0D       		.uleb128 0xd
 2175 01f3 06030000 		.4byte	.LASF27
 2176 01f7 01       		.byte	0x1
 2177 01f8 7B       		.byte	0x7b
 2178 01f9 81000000 		.4byte	0x81
 2179 01fd 02       		.uleb128 0x2
 2180 01fe 91       		.byte	0x91
 2181 01ff 6A       		.sleb128 -22
 2182 0200 0A       		.uleb128 0xa
 2183 0201 C4000000 		.4byte	.LBB7
 2184 0205 1C000000 		.4byte	.LBE7-.LBB7
 2185 0209 0B       		.uleb128 0xb
 2186 020a 707000   		.ascii	"pp\000"
 2187 020d 01       		.byte	0x1
 2188 020e 9A       		.byte	0x9a
 2189 020f 68000000 		.4byte	0x68
 2190 0213 02       		.uleb128 0x2
 2191 0214 91       		.byte	0x91
 2192 0215 6C       		.sleb128 -20
 2193 0216 00       		.byte	0
 2194 0217 00       		.byte	0
 2195 0218 0E       		.uleb128 0xe
 2196 0219 72000000 		.4byte	.LASF28
 2197 021d 01       		.byte	0x1
 2198 021e FC       		.byte	0xfc
 2199 021f 68000000 		.4byte	0x68
 2200 0223 00000000 		.4byte	.LFB68
 2201 0227 B8060000 		.4byte	.LFE68-.LFB68
 2202 022b 01       		.uleb128 0x1
 2203 022c 9C       		.byte	0x9c
 2204 022d 35030000 		.4byte	0x335
 2205 0231 0F       		.uleb128 0xf
 2206 0232 647400   		.ascii	"dt\000"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 49


 2207 0235 01       		.byte	0x1
 2208 0236 3001     		.2byte	0x130
 2209 0238 A0000000 		.4byte	0xa0
 2210 023c 02       		.uleb128 0x2
 2211 023d 91       		.byte	0x91
 2212 023e 58       		.sleb128 -40
 2213 023f 10       		.uleb128 0x10
 2214 0240 04020000 		.4byte	.LASF29
 2215 0244 01       		.byte	0x1
 2216 0245 3101     		.2byte	0x131
 2217 0247 A0000000 		.4byte	0xa0
 2218 024b 03       		.uleb128 0x3
 2219 024c 91       		.byte	0x91
 2220 024d A87F     		.sleb128 -88
 2221 024f 0C       		.uleb128 0xc
 2222 0250 8E000000 		.4byte	.LBB8
 2223 0254 A0000000 		.4byte	.LBE8-.LBB8
 2224 0258 6A020000 		.4byte	0x26a
 2225 025c 0F       		.uleb128 0xf
 2226 025d 6700     		.ascii	"g\000"
 2227 025f 01       		.byte	0x1
 2228 0260 1201     		.2byte	0x112
 2229 0262 68000000 		.4byte	0x68
 2230 0266 02       		.uleb128 0x2
 2231 0267 91       		.byte	0x91
 2232 0268 64       		.sleb128 -28
 2233 0269 00       		.byte	0
 2234 026a 0C       		.uleb128 0xc
 2235 026b EC010000 		.4byte	.LBB9
 2236 026f 6E020000 		.4byte	.LBE9-.LBB9
 2237 0273 87020000 		.4byte	0x287
 2238 0277 0F       		.uleb128 0xf
 2239 0278 63796C00 		.ascii	"cyl\000"
 2240 027c 01       		.byte	0x1
 2241 027d 5401     		.2byte	0x154
 2242 027f 68000000 		.4byte	0x68
 2243 0283 02       		.uleb128 0x2
 2244 0284 91       		.byte	0x91
 2245 0285 54       		.sleb128 -44
 2246 0286 00       		.byte	0
 2247 0287 0A       		.uleb128 0xa
 2248 0288 64040000 		.4byte	.LBB10
 2249 028c B2010000 		.4byte	.LBE10-.LBB10
 2250 0290 10       		.uleb128 0x10
 2251 0291 73020000 		.4byte	.LASF30
 2252 0295 01       		.byte	0x1
 2253 0296 6E01     		.2byte	0x16e
 2254 0298 68000000 		.4byte	0x68
 2255 029c 03       		.uleb128 0x3
 2256 029d 91       		.byte	0x91
 2257 029e B47F     		.sleb128 -76
 2258 02a0 10       		.uleb128 0x10
 2259 02a1 4A030000 		.4byte	.LASF31
 2260 02a5 01       		.byte	0x1
 2261 02a6 6F01     		.2byte	0x16f
 2262 02a8 68000000 		.4byte	0x68
 2263 02ac 02       		.uleb128 0x2
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 50


 2264 02ad 91       		.byte	0x91
 2265 02ae 50       		.sleb128 -48
 2266 02af 10       		.uleb128 0x10
 2267 02b0 8F010000 		.4byte	.LASF32
 2268 02b4 01       		.byte	0x1
 2269 02b5 7001     		.2byte	0x170
 2270 02b7 68000000 		.4byte	0x68
 2271 02bb 02       		.uleb128 0x2
 2272 02bc 91       		.byte	0x91
 2273 02bd 4C       		.sleb128 -52
 2274 02be 10       		.uleb128 0x10
 2275 02bf 72010000 		.4byte	.LASF33
 2276 02c3 01       		.byte	0x1
 2277 02c4 7101     		.2byte	0x171
 2278 02c6 68000000 		.4byte	0x68
 2279 02ca 02       		.uleb128 0x2
 2280 02cb 91       		.byte	0x91
 2281 02cc 48       		.sleb128 -56
 2282 02cd 10       		.uleb128 0x10
 2283 02ce B9010000 		.4byte	.LASF34
 2284 02d2 01       		.byte	0x1
 2285 02d3 7201     		.2byte	0x172
 2286 02d5 68000000 		.4byte	0x68
 2287 02d9 02       		.uleb128 0x2
 2288 02da 91       		.byte	0x91
 2289 02db 44       		.sleb128 -60
 2290 02dc 10       		.uleb128 0x10
 2291 02dd 0C000000 		.4byte	.LASF35
 2292 02e1 01       		.byte	0x1
 2293 02e2 7301     		.2byte	0x173
 2294 02e4 68000000 		.4byte	0x68
 2295 02e8 02       		.uleb128 0x2
 2296 02e9 91       		.byte	0x91
 2297 02ea 40       		.sleb128 -64
 2298 02eb 10       		.uleb128 0x10
 2299 02ec 85020000 		.4byte	.LASF36
 2300 02f0 01       		.byte	0x1
 2301 02f1 7401     		.2byte	0x174
 2302 02f3 68000000 		.4byte	0x68
 2303 02f7 03       		.uleb128 0x3
 2304 02f8 91       		.byte	0x91
 2305 02f9 BC7F     		.sleb128 -68
 2306 02fb 10       		.uleb128 0x10
 2307 02fc BF020000 		.4byte	.LASF37
 2308 0300 01       		.byte	0x1
 2309 0301 7501     		.2byte	0x175
 2310 0303 8D000000 		.4byte	0x8d
 2311 0307 03       		.uleb128 0x3
 2312 0308 91       		.byte	0x91
 2313 0309 B27F     		.sleb128 -78
 2314 030b 10       		.uleb128 0x10
 2315 030c 3C000000 		.4byte	.LASF38
 2316 0310 01       		.byte	0x1
 2317 0311 7601     		.2byte	0x176
 2318 0313 8D000000 		.4byte	0x8d
 2319 0317 03       		.uleb128 0x3
 2320 0318 91       		.byte	0x91
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 51


 2321 0319 B07F     		.sleb128 -80
 2322 031b 0A       		.uleb128 0xa
 2323 031c 8C040000 		.4byte	.LBB11
 2324 0320 1A000000 		.4byte	.LBE11-.LBB11
 2325 0324 0F       		.uleb128 0xf
 2326 0325 6700     		.ascii	"g\000"
 2327 0327 01       		.byte	0x1
 2328 0328 7701     		.2byte	0x177
 2329 032a 68000000 		.4byte	0x68
 2330 032e 03       		.uleb128 0x3
 2331 032f 91       		.byte	0x91
 2332 0330 B87F     		.sleb128 -72
 2333 0332 00       		.byte	0
 2334 0333 00       		.byte	0
 2335 0334 00       		.byte	0
 2336 0335 11       		.uleb128 0x11
 2337 0336 3D030000 		.4byte	.LASF39
 2338 033a 05       		.byte	0x5
 2339 033b 1207     		.2byte	0x712
 2340 033d 41030000 		.4byte	0x341
 2341 0341 06       		.uleb128 0x6
 2342 0342 76000000 		.4byte	0x76
 2343 0346 12       		.uleb128 0x12
 2344 0347 2B000000 		.4byte	.LASF40
 2345 034b 01       		.byte	0x1
 2346 034c 0E       		.byte	0xe
 2347 034d 68000000 		.4byte	0x68
 2348 0351 05       		.uleb128 0x5
 2349 0352 03       		.byte	0x3
 2350 0353 00000000 		.4byte	psoc_id
 2351 0357 12       		.uleb128 0x12
 2352 0358 43010000 		.4byte	.LASF41
 2353 035c 01       		.byte	0x1
 2354 035d 17       		.byte	0x17
 2355 035e 81000000 		.4byte	0x81
 2356 0362 05       		.uleb128 0x5
 2357 0363 03       		.byte	0x3
 2358 0364 00000000 		.4byte	errorStatus
 2359 0368 12       		.uleb128 0x12
 2360 0369 1F010000 		.4byte	.LASF42
 2361 036d 01       		.byte	0x1
 2362 036e 33       		.byte	0x33
 2363 036f 68000000 		.4byte	0x68
 2364 0373 05       		.uleb128 0x5
 2365 0374 03       		.byte	0x3
 2366 0375 00000000 		.4byte	data_read_mode
 2367 0379 13       		.uleb128 0x13
 2368 037a 89030000 		.4byte	0x389
 2369 037e 89030000 		.4byte	0x389
 2370 0382 14       		.uleb128 0x14
 2371 0383 C6000000 		.4byte	0xc6
 2372 0387 03       		.byte	0x3
 2373 0388 00       		.byte	0
 2374 0389 06       		.uleb128 0x6
 2375 038a 68000000 		.4byte	0x68
 2376 038e 12       		.uleb128 0x12
 2377 038f 41000000 		.4byte	.LASF43
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 52


 2378 0393 01       		.byte	0x1
 2379 0394 35       		.byte	0x35
 2380 0395 9F030000 		.4byte	0x39f
 2381 0399 05       		.uleb128 0x5
 2382 039a 03       		.byte	0x3
 2383 039b 00000000 		.4byte	new_pos_set
 2384 039f 06       		.uleb128 0x6
 2385 03a0 79030000 		.4byte	0x379
 2386 03a4 13       		.uleb128 0x13
 2387 03a5 68000000 		.4byte	0x68
 2388 03a9 B4030000 		.4byte	0x3b4
 2389 03ad 14       		.uleb128 0x14
 2390 03ae C6000000 		.4byte	0xc6
 2391 03b2 03       		.byte	0x3
 2392 03b3 00       		.byte	0
 2393 03b4 12       		.uleb128 0x12
 2394 03b5 CF010000 		.4byte	.LASF44
 2395 03b9 01       		.byte	0x1
 2396 03ba 36       		.byte	0x36
 2397 03bb A4030000 		.4byte	0x3a4
 2398 03bf 05       		.uleb128 0x5
 2399 03c0 03       		.byte	0x3
 2400 03c1 00000000 		.4byte	new_pos
 2401 03c5 15       		.uleb128 0x15
 2402 03c6 706F7300 		.ascii	"pos\000"
 2403 03ca 01       		.byte	0x1
 2404 03cb 37       		.byte	0x37
 2405 03cc A4030000 		.4byte	0x3a4
 2406 03d0 05       		.uleb128 0x5
 2407 03d1 03       		.byte	0x3
 2408 03d2 00000000 		.4byte	pos
 2409 03d6 12       		.uleb128 0x12
 2410 03d7 2E010000 		.4byte	.LASF20
 2411 03db 01       		.byte	0x1
 2412 03dc 38       		.byte	0x38
 2413 03dd A4030000 		.4byte	0x3a4
 2414 03e1 05       		.uleb128 0x5
 2415 03e2 03       		.byte	0x3
 2416 03e3 00000000 		.4byte	pulse
 2417 03e7 12       		.uleb128 0x12
 2418 03e8 AE010000 		.4byte	.LASF45
 2419 03ec 01       		.byte	0x1
 2420 03ed 39       		.byte	0x39
 2421 03ee A4030000 		.4byte	0x3a4
 2422 03f2 05       		.uleb128 0x5
 2423 03f3 03       		.byte	0x3
 2424 03f4 00000000 		.4byte	pulse_temp
 2425 03f8 13       		.uleb128 0x13
 2426 03f9 A0000000 		.4byte	0xa0
 2427 03fd 08040000 		.4byte	0x408
 2428 0401 14       		.uleb128 0x14
 2429 0402 C6000000 		.4byte	0xc6
 2430 0406 03       		.byte	0x3
 2431 0407 00       		.byte	0
 2432 0408 15       		.uleb128 0x15
 2433 0409 65727200 		.ascii	"err\000"
 2434 040d 01       		.byte	0x1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 53


 2435 040e 3A       		.byte	0x3a
 2436 040f F8030000 		.4byte	0x3f8
 2437 0413 05       		.uleb128 0x5
 2438 0414 03       		.byte	0x3
 2439 0415 00000000 		.4byte	err
 2440 0419 13       		.uleb128 0x13
 2441 041a 8D000000 		.4byte	0x8d
 2442 041e 29040000 		.4byte	0x429
 2443 0422 14       		.uleb128 0x14
 2444 0423 C6000000 		.4byte	0xc6
 2445 0427 03       		.byte	0x3
 2446 0428 00       		.byte	0
 2447 0429 12       		.uleb128 0x12
 2448 042a D7010000 		.4byte	.LASF46
 2449 042e 01       		.byte	0x1
 2450 042f 3B       		.byte	0x3b
 2451 0430 19040000 		.4byte	0x419
 2452 0434 05       		.uleb128 0x5
 2453 0435 03       		.byte	0x3
 2454 0436 00000000 		.4byte	adcValue
 2455 043a 15       		.uleb128 0x15
 2456 043b 64657200 		.ascii	"der\000"
 2457 043f 01       		.byte	0x1
 2458 0440 3C       		.byte	0x3c
 2459 0441 F8030000 		.4byte	0x3f8
 2460 0445 05       		.uleb128 0x5
 2461 0446 03       		.byte	0x3
 2462 0447 00000000 		.4byte	der
 2463 044b 12       		.uleb128 0x12
 2464 044c 33000000 		.4byte	.LASF47
 2465 0450 01       		.byte	0x1
 2466 0451 3D       		.byte	0x3d
 2467 0452 F8030000 		.4byte	0x3f8
 2468 0456 05       		.uleb128 0x5
 2469 0457 03       		.byte	0x3
 2470 0458 00000000 		.4byte	prev_err
 2471 045c 12       		.uleb128 0x12
 2472 045d B2020000 		.4byte	.LASF48
 2473 0461 01       		.byte	0x1
 2474 0462 3E       		.byte	0x3e
 2475 0463 F8030000 		.4byte	0x3f8
 2476 0467 05       		.uleb128 0x5
 2477 0468 03       		.byte	0x3
 2478 0469 00000000 		.4byte	pid_integral
 2479 046d 12       		.uleb128 0x12
 2480 046e 1B000000 		.4byte	.LASF49
 2481 0472 01       		.byte	0x1
 2482 0473 40       		.byte	0x40
 2483 0474 68000000 		.4byte	0x68
 2484 0478 05       		.uleb128 0x5
 2485 0479 03       		.byte	0x3
 2486 047a 00000000 		.4byte	cyl_set
 2487 047e 13       		.uleb128 0x13
 2488 047f A7000000 		.4byte	0xa7
 2489 0483 8E040000 		.4byte	0x48e
 2490 0487 14       		.uleb128 0x14
 2491 0488 C6000000 		.4byte	0xc6
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 54


 2492 048c 00       		.byte	0
 2493 048d 00       		.byte	0
 2494 048e 12       		.uleb128 0x12
 2495 048f 23000000 		.4byte	.LASF50
 2496 0493 01       		.byte	0x1
 2497 0494 41       		.byte	0x41
 2498 0495 7E040000 		.4byte	0x47e
 2499 0499 05       		.uleb128 0x5
 2500 049a 03       		.byte	0x3
 2501 049b 00000000 		.4byte	cyl_tmp
 2502 049f 13       		.uleb128 0x13
 2503 04a0 A0000000 		.4byte	0xa0
 2504 04a4 AF040000 		.4byte	0x4af
 2505 04a8 14       		.uleb128 0x14
 2506 04a9 C6000000 		.4byte	0xc6
 2507 04ad 1D       		.byte	0x1d
 2508 04ae 00       		.byte	0
 2509 04af 15       		.uleb128 0x15
 2510 04b0 64747300 		.ascii	"dts\000"
 2511 04b4 01       		.byte	0x1
 2512 04b5 42       		.byte	0x42
 2513 04b6 9F040000 		.4byte	0x49f
 2514 04ba 05       		.uleb128 0x5
 2515 04bb 03       		.byte	0x3
 2516 04bc 00000000 		.4byte	dts
 2517 04c0 12       		.uleb128 0x12
 2518 04c1 36030000 		.4byte	.LASF51
 2519 04c5 01       		.byte	0x1
 2520 04c6 43       		.byte	0x43
 2521 04c7 68000000 		.4byte	0x68
 2522 04cb 05       		.uleb128 0x5
 2523 04cc 03       		.byte	0x3
 2524 04cd 00000000 		.4byte	dts_ct
 2525 04d1 13       		.uleb128 0x13
 2526 04d2 68000000 		.4byte	0x68
 2527 04d6 E7040000 		.4byte	0x4e7
 2528 04da 14       		.uleb128 0x14
 2529 04db C6000000 		.4byte	0xc6
 2530 04df 03       		.byte	0x3
 2531 04e0 14       		.uleb128 0x14
 2532 04e1 C6000000 		.4byte	0xc6
 2533 04e5 01       		.byte	0x1
 2534 04e6 00       		.byte	0
 2535 04e7 12       		.uleb128 0x12
 2536 04e8 6A010000 		.4byte	.LASF52
 2537 04ec 01       		.byte	0x1
 2538 04ed 45       		.byte	0x45
 2539 04ee D1040000 		.4byte	0x4d1
 2540 04f2 05       		.uleb128 0x5
 2541 04f3 03       		.byte	0x3
 2542 04f4 00000000 		.4byte	offsets
 2543 04f8 13       		.uleb128 0x13
 2544 04f9 A7000000 		.4byte	0xa7
 2545 04fd 08050000 		.4byte	0x508
 2546 0501 14       		.uleb128 0x14
 2547 0502 C6000000 		.4byte	0xc6
 2548 0506 63       		.byte	0x63
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 55


 2549 0507 00       		.byte	0
 2550 0508 12       		.uleb128 0x12
 2551 0509 25030000 		.4byte	.LASF53
 2552 050d 01       		.byte	0x1
 2553 050e 47       		.byte	0x47
 2554 050f F8040000 		.4byte	0x4f8
 2555 0513 05       		.uleb128 0x5
 2556 0514 03       		.byte	0x3
 2557 0515 00000000 		.4byte	sendValue
 2558 0519 13       		.uleb128 0x13
 2559 051a A7000000 		.4byte	0xa7
 2560 051e 29050000 		.4byte	0x529
 2561 0522 14       		.uleb128 0x14
 2562 0523 C6000000 		.4byte	0xc6
 2563 0527 13       		.byte	0x13
 2564 0528 00       		.byte	0
 2565 0529 12       		.uleb128 0x12
 2566 052a 4D000000 		.4byte	.LASF54
 2567 052e 01       		.byte	0x1
 2568 052f 48       		.byte	0x48
 2569 0530 19050000 		.4byte	0x519
 2570 0534 05       		.uleb128 0x5
 2571 0535 03       		.byte	0x3
 2572 0536 00000000 		.4byte	temp
 2573 053a 15       		.uleb128 0x15
 2574 053b 6E6E00   		.ascii	"nn\000"
 2575 053e 01       		.byte	0x1
 2576 053f 49       		.byte	0x49
 2577 0540 68000000 		.4byte	0x68
 2578 0544 05       		.uleb128 0x5
 2579 0545 03       		.byte	0x3
 2580 0546 00000000 		.4byte	nn
 2581 054a 13       		.uleb128 0x13
 2582 054b A0000000 		.4byte	0xa0
 2583 054f 5A050000 		.4byte	0x55a
 2584 0553 14       		.uleb128 0x14
 2585 0554 C6000000 		.4byte	0xc6
 2586 0558 02       		.byte	0x2
 2587 0559 00       		.byte	0
 2588 055a 15       		.uleb128 0x15
 2589 055b 70696400 		.ascii	"pid\000"
 2590 055f 01       		.byte	0x1
 2591 0560 4A       		.byte	0x4a
 2592 0561 4A050000 		.4byte	0x54a
 2593 0565 05       		.uleb128 0x5
 2594 0566 03       		.byte	0x3
 2595 0567 00000000 		.4byte	pid
 2596 056b 12       		.uleb128 0x12
 2597 056c 13010000 		.4byte	.LASF55
 2598 0570 01       		.byte	0x1
 2599 0571 4C       		.byte	0x4c
 2600 0572 F8040000 		.4byte	0x4f8
 2601 0576 05       		.uleb128 0x5
 2602 0577 03       		.byte	0x3
 2603 0578 00000000 		.4byte	help
 2604 057c 15       		.uleb128 0x15
 2605 057d 747400   		.ascii	"tt\000"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 56


 2606 0580 01       		.byte	0x1
 2607 0581 4D       		.byte	0x4d
 2608 0582 68000000 		.4byte	0x68
 2609 0586 05       		.uleb128 0x5
 2610 0587 03       		.byte	0x3
 2611 0588 00000000 		.4byte	tt
 2612 058c 12       		.uleb128 0x12
 2613 058d EF020000 		.4byte	.LASF56
 2614 0591 01       		.byte	0x1
 2615 0592 4F       		.byte	0x4f
 2616 0593 68000000 		.4byte	0x68
 2617 0597 05       		.uleb128 0x5
 2618 0598 03       		.byte	0x3
 2619 0599 00000000 		.4byte	start_calib
 2620 059d 12       		.uleb128 0x12
 2621 059e 88010000 		.4byte	.LASF57
 2622 05a2 01       		.byte	0x1
 2623 05a3 50       		.byte	0x50
 2624 05a4 68000000 		.4byte	0x68
 2625 05a8 05       		.uleb128 0x5
 2626 05a9 03       		.byte	0x3
 2627 05aa 00000000 		.4byte	cyl_no
 2628 05ae 13       		.uleb128 0x13
 2629 05af 8D000000 		.4byte	0x8d
 2630 05b3 C4050000 		.4byte	0x5c4
 2631 05b7 14       		.uleb128 0x14
 2632 05b8 C6000000 		.4byte	0xc6
 2633 05bc 03       		.byte	0x3
 2634 05bd 14       		.uleb128 0x14
 2635 05be C6000000 		.4byte	0xc6
 2636 05c2 06       		.byte	0x6
 2637 05c3 00       		.byte	0
 2638 05c4 12       		.uleb128 0x12
 2639 05c5 0D030000 		.4byte	.LASF58
 2640 05c9 01       		.byte	0x1
 2641 05ca 52       		.byte	0x52
 2642 05cb AE050000 		.4byte	0x5ae
 2643 05cf 05       		.uleb128 0x5
 2644 05d0 03       		.byte	0x3
 2645 05d1 00000000 		.4byte	moving_median
 2646 05d5 13       		.uleb128 0x13
 2647 05d6 8D000000 		.4byte	0x8d
 2648 05da E5050000 		.4byte	0x5e5
 2649 05de 14       		.uleb128 0x14
 2650 05df C6000000 		.4byte	0xc6
 2651 05e3 06       		.byte	0x6
 2652 05e4 00       		.byte	0
 2653 05e5 12       		.uleb128 0x12
 2654 05e6 1B030000 		.4byte	.LASF59
 2655 05ea 01       		.byte	0x1
 2656 05eb 53       		.byte	0x53
 2657 05ec D5050000 		.4byte	0x5d5
 2658 05f0 05       		.uleb128 0x5
 2659 05f1 03       		.byte	0x3
 2660 05f2 00000000 		.4byte	tempArray
 2661 05f6 15       		.uleb128 0x15
 2662 05f7 746D7000 		.ascii	"tmp\000"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 57


 2663 05fb 01       		.byte	0x1
 2664 05fc 54       		.byte	0x54
 2665 05fd 8D000000 		.4byte	0x8d
 2666 0601 05       		.uleb128 0x5
 2667 0602 03       		.byte	0x3
 2668 0603 00000000 		.4byte	tmp
 2669 0607 00       		.byte	0
 2670              		.section	.debug_abbrev,"",%progbits
 2671              	.Ldebug_abbrev0:
 2672 0000 01       		.uleb128 0x1
 2673 0001 11       		.uleb128 0x11
 2674 0002 01       		.byte	0x1
 2675 0003 25       		.uleb128 0x25
 2676 0004 0E       		.uleb128 0xe
 2677 0005 13       		.uleb128 0x13
 2678 0006 0B       		.uleb128 0xb
 2679 0007 03       		.uleb128 0x3
 2680 0008 0E       		.uleb128 0xe
 2681 0009 1B       		.uleb128 0x1b
 2682 000a 0E       		.uleb128 0xe
 2683 000b 55       		.uleb128 0x55
 2684 000c 17       		.uleb128 0x17
 2685 000d 11       		.uleb128 0x11
 2686 000e 01       		.uleb128 0x1
 2687 000f 10       		.uleb128 0x10
 2688 0010 17       		.uleb128 0x17
 2689 0011 00       		.byte	0
 2690 0012 00       		.byte	0
 2691 0013 02       		.uleb128 0x2
 2692 0014 24       		.uleb128 0x24
 2693 0015 00       		.byte	0
 2694 0016 0B       		.uleb128 0xb
 2695 0017 0B       		.uleb128 0xb
 2696 0018 3E       		.uleb128 0x3e
 2697 0019 0B       		.uleb128 0xb
 2698 001a 03       		.uleb128 0x3
 2699 001b 0E       		.uleb128 0xe
 2700 001c 00       		.byte	0
 2701 001d 00       		.byte	0
 2702 001e 03       		.uleb128 0x3
 2703 001f 16       		.uleb128 0x16
 2704 0020 00       		.byte	0
 2705 0021 03       		.uleb128 0x3
 2706 0022 0E       		.uleb128 0xe
 2707 0023 3A       		.uleb128 0x3a
 2708 0024 0B       		.uleb128 0xb
 2709 0025 3B       		.uleb128 0x3b
 2710 0026 0B       		.uleb128 0xb
 2711 0027 49       		.uleb128 0x49
 2712 0028 13       		.uleb128 0x13
 2713 0029 00       		.byte	0
 2714 002a 00       		.byte	0
 2715 002b 04       		.uleb128 0x4
 2716 002c 24       		.uleb128 0x24
 2717 002d 00       		.byte	0
 2718 002e 0B       		.uleb128 0xb
 2719 002f 0B       		.uleb128 0xb
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 58


 2720 0030 3E       		.uleb128 0x3e
 2721 0031 0B       		.uleb128 0xb
 2722 0032 03       		.uleb128 0x3
 2723 0033 08       		.uleb128 0x8
 2724 0034 00       		.byte	0
 2725 0035 00       		.byte	0
 2726 0036 05       		.uleb128 0x5
 2727 0037 16       		.uleb128 0x16
 2728 0038 00       		.byte	0
 2729 0039 03       		.uleb128 0x3
 2730 003a 0E       		.uleb128 0xe
 2731 003b 3A       		.uleb128 0x3a
 2732 003c 0B       		.uleb128 0xb
 2733 003d 3B       		.uleb128 0x3b
 2734 003e 05       		.uleb128 0x5
 2735 003f 49       		.uleb128 0x49
 2736 0040 13       		.uleb128 0x13
 2737 0041 00       		.byte	0
 2738 0042 00       		.byte	0
 2739 0043 06       		.uleb128 0x6
 2740 0044 35       		.uleb128 0x35
 2741 0045 00       		.byte	0
 2742 0046 49       		.uleb128 0x49
 2743 0047 13       		.uleb128 0x13
 2744 0048 00       		.byte	0
 2745 0049 00       		.byte	0
 2746 004a 07       		.uleb128 0x7
 2747 004b 2E       		.uleb128 0x2e
 2748 004c 01       		.byte	0x1
 2749 004d 3F       		.uleb128 0x3f
 2750 004e 19       		.uleb128 0x19
 2751 004f 03       		.uleb128 0x3
 2752 0050 0E       		.uleb128 0xe
 2753 0051 3A       		.uleb128 0x3a
 2754 0052 0B       		.uleb128 0xb
 2755 0053 3B       		.uleb128 0x3b
 2756 0054 0B       		.uleb128 0xb
 2757 0055 27       		.uleb128 0x27
 2758 0056 19       		.uleb128 0x19
 2759 0057 11       		.uleb128 0x11
 2760 0058 01       		.uleb128 0x1
 2761 0059 12       		.uleb128 0x12
 2762 005a 06       		.uleb128 0x6
 2763 005b 40       		.uleb128 0x40
 2764 005c 18       		.uleb128 0x18
 2765 005d 9642     		.uleb128 0x2116
 2766 005f 19       		.uleb128 0x19
 2767 0060 01       		.uleb128 0x1
 2768 0061 13       		.uleb128 0x13
 2769 0062 00       		.byte	0
 2770 0063 00       		.byte	0
 2771 0064 08       		.uleb128 0x8
 2772 0065 05       		.uleb128 0x5
 2773 0066 00       		.byte	0
 2774 0067 03       		.uleb128 0x3
 2775 0068 0E       		.uleb128 0xe
 2776 0069 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 59


 2777 006a 0B       		.uleb128 0xb
 2778 006b 3B       		.uleb128 0x3b
 2779 006c 0B       		.uleb128 0xb
 2780 006d 49       		.uleb128 0x49
 2781 006e 13       		.uleb128 0x13
 2782 006f 02       		.uleb128 0x2
 2783 0070 18       		.uleb128 0x18
 2784 0071 00       		.byte	0
 2785 0072 00       		.byte	0
 2786 0073 09       		.uleb128 0x9
 2787 0074 2E       		.uleb128 0x2e
 2788 0075 01       		.byte	0x1
 2789 0076 3F       		.uleb128 0x3f
 2790 0077 19       		.uleb128 0x19
 2791 0078 03       		.uleb128 0x3
 2792 0079 0E       		.uleb128 0xe
 2793 007a 3A       		.uleb128 0x3a
 2794 007b 0B       		.uleb128 0xb
 2795 007c 3B       		.uleb128 0x3b
 2796 007d 0B       		.uleb128 0xb
 2797 007e 27       		.uleb128 0x27
 2798 007f 19       		.uleb128 0x19
 2799 0080 49       		.uleb128 0x49
 2800 0081 13       		.uleb128 0x13
 2801 0082 11       		.uleb128 0x11
 2802 0083 01       		.uleb128 0x1
 2803 0084 12       		.uleb128 0x12
 2804 0085 06       		.uleb128 0x6
 2805 0086 40       		.uleb128 0x40
 2806 0087 18       		.uleb128 0x18
 2807 0088 9742     		.uleb128 0x2117
 2808 008a 19       		.uleb128 0x19
 2809 008b 01       		.uleb128 0x1
 2810 008c 13       		.uleb128 0x13
 2811 008d 00       		.byte	0
 2812 008e 00       		.byte	0
 2813 008f 0A       		.uleb128 0xa
 2814 0090 0B       		.uleb128 0xb
 2815 0091 01       		.byte	0x1
 2816 0092 11       		.uleb128 0x11
 2817 0093 01       		.uleb128 0x1
 2818 0094 12       		.uleb128 0x12
 2819 0095 06       		.uleb128 0x6
 2820 0096 00       		.byte	0
 2821 0097 00       		.byte	0
 2822 0098 0B       		.uleb128 0xb
 2823 0099 34       		.uleb128 0x34
 2824 009a 00       		.byte	0
 2825 009b 03       		.uleb128 0x3
 2826 009c 08       		.uleb128 0x8
 2827 009d 3A       		.uleb128 0x3a
 2828 009e 0B       		.uleb128 0xb
 2829 009f 3B       		.uleb128 0x3b
 2830 00a0 0B       		.uleb128 0xb
 2831 00a1 49       		.uleb128 0x49
 2832 00a2 13       		.uleb128 0x13
 2833 00a3 02       		.uleb128 0x2
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 60


 2834 00a4 18       		.uleb128 0x18
 2835 00a5 00       		.byte	0
 2836 00a6 00       		.byte	0
 2837 00a7 0C       		.uleb128 0xc
 2838 00a8 0B       		.uleb128 0xb
 2839 00a9 01       		.byte	0x1
 2840 00aa 11       		.uleb128 0x11
 2841 00ab 01       		.uleb128 0x1
 2842 00ac 12       		.uleb128 0x12
 2843 00ad 06       		.uleb128 0x6
 2844 00ae 01       		.uleb128 0x1
 2845 00af 13       		.uleb128 0x13
 2846 00b0 00       		.byte	0
 2847 00b1 00       		.byte	0
 2848 00b2 0D       		.uleb128 0xd
 2849 00b3 34       		.uleb128 0x34
 2850 00b4 00       		.byte	0
 2851 00b5 03       		.uleb128 0x3
 2852 00b6 0E       		.uleb128 0xe
 2853 00b7 3A       		.uleb128 0x3a
 2854 00b8 0B       		.uleb128 0xb
 2855 00b9 3B       		.uleb128 0x3b
 2856 00ba 0B       		.uleb128 0xb
 2857 00bb 49       		.uleb128 0x49
 2858 00bc 13       		.uleb128 0x13
 2859 00bd 02       		.uleb128 0x2
 2860 00be 18       		.uleb128 0x18
 2861 00bf 00       		.byte	0
 2862 00c0 00       		.byte	0
 2863 00c1 0E       		.uleb128 0xe
 2864 00c2 2E       		.uleb128 0x2e
 2865 00c3 01       		.byte	0x1
 2866 00c4 3F       		.uleb128 0x3f
 2867 00c5 19       		.uleb128 0x19
 2868 00c6 03       		.uleb128 0x3
 2869 00c7 0E       		.uleb128 0xe
 2870 00c8 3A       		.uleb128 0x3a
 2871 00c9 0B       		.uleb128 0xb
 2872 00ca 3B       		.uleb128 0x3b
 2873 00cb 0B       		.uleb128 0xb
 2874 00cc 49       		.uleb128 0x49
 2875 00cd 13       		.uleb128 0x13
 2876 00ce 11       		.uleb128 0x11
 2877 00cf 01       		.uleb128 0x1
 2878 00d0 12       		.uleb128 0x12
 2879 00d1 06       		.uleb128 0x6
 2880 00d2 40       		.uleb128 0x40
 2881 00d3 18       		.uleb128 0x18
 2882 00d4 9642     		.uleb128 0x2116
 2883 00d6 19       		.uleb128 0x19
 2884 00d7 01       		.uleb128 0x1
 2885 00d8 13       		.uleb128 0x13
 2886 00d9 00       		.byte	0
 2887 00da 00       		.byte	0
 2888 00db 0F       		.uleb128 0xf
 2889 00dc 34       		.uleb128 0x34
 2890 00dd 00       		.byte	0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 61


 2891 00de 03       		.uleb128 0x3
 2892 00df 08       		.uleb128 0x8
 2893 00e0 3A       		.uleb128 0x3a
 2894 00e1 0B       		.uleb128 0xb
 2895 00e2 3B       		.uleb128 0x3b
 2896 00e3 05       		.uleb128 0x5
 2897 00e4 49       		.uleb128 0x49
 2898 00e5 13       		.uleb128 0x13
 2899 00e6 02       		.uleb128 0x2
 2900 00e7 18       		.uleb128 0x18
 2901 00e8 00       		.byte	0
 2902 00e9 00       		.byte	0
 2903 00ea 10       		.uleb128 0x10
 2904 00eb 34       		.uleb128 0x34
 2905 00ec 00       		.byte	0
 2906 00ed 03       		.uleb128 0x3
 2907 00ee 0E       		.uleb128 0xe
 2908 00ef 3A       		.uleb128 0x3a
 2909 00f0 0B       		.uleb128 0xb
 2910 00f1 3B       		.uleb128 0x3b
 2911 00f2 05       		.uleb128 0x5
 2912 00f3 49       		.uleb128 0x49
 2913 00f4 13       		.uleb128 0x13
 2914 00f5 02       		.uleb128 0x2
 2915 00f6 18       		.uleb128 0x18
 2916 00f7 00       		.byte	0
 2917 00f8 00       		.byte	0
 2918 00f9 11       		.uleb128 0x11
 2919 00fa 34       		.uleb128 0x34
 2920 00fb 00       		.byte	0
 2921 00fc 03       		.uleb128 0x3
 2922 00fd 0E       		.uleb128 0xe
 2923 00fe 3A       		.uleb128 0x3a
 2924 00ff 0B       		.uleb128 0xb
 2925 0100 3B       		.uleb128 0x3b
 2926 0101 05       		.uleb128 0x5
 2927 0102 49       		.uleb128 0x49
 2928 0103 13       		.uleb128 0x13
 2929 0104 3F       		.uleb128 0x3f
 2930 0105 19       		.uleb128 0x19
 2931 0106 3C       		.uleb128 0x3c
 2932 0107 19       		.uleb128 0x19
 2933 0108 00       		.byte	0
 2934 0109 00       		.byte	0
 2935 010a 12       		.uleb128 0x12
 2936 010b 34       		.uleb128 0x34
 2937 010c 00       		.byte	0
 2938 010d 03       		.uleb128 0x3
 2939 010e 0E       		.uleb128 0xe
 2940 010f 3A       		.uleb128 0x3a
 2941 0110 0B       		.uleb128 0xb
 2942 0111 3B       		.uleb128 0x3b
 2943 0112 0B       		.uleb128 0xb
 2944 0113 49       		.uleb128 0x49
 2945 0114 13       		.uleb128 0x13
 2946 0115 3F       		.uleb128 0x3f
 2947 0116 19       		.uleb128 0x19
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 62


 2948 0117 02       		.uleb128 0x2
 2949 0118 18       		.uleb128 0x18
 2950 0119 00       		.byte	0
 2951 011a 00       		.byte	0
 2952 011b 13       		.uleb128 0x13
 2953 011c 01       		.uleb128 0x1
 2954 011d 01       		.byte	0x1
 2955 011e 49       		.uleb128 0x49
 2956 011f 13       		.uleb128 0x13
 2957 0120 01       		.uleb128 0x1
 2958 0121 13       		.uleb128 0x13
 2959 0122 00       		.byte	0
 2960 0123 00       		.byte	0
 2961 0124 14       		.uleb128 0x14
 2962 0125 21       		.uleb128 0x21
 2963 0126 00       		.byte	0
 2964 0127 49       		.uleb128 0x49
 2965 0128 13       		.uleb128 0x13
 2966 0129 2F       		.uleb128 0x2f
 2967 012a 0B       		.uleb128 0xb
 2968 012b 00       		.byte	0
 2969 012c 00       		.byte	0
 2970 012d 15       		.uleb128 0x15
 2971 012e 34       		.uleb128 0x34
 2972 012f 00       		.byte	0
 2973 0130 03       		.uleb128 0x3
 2974 0131 08       		.uleb128 0x8
 2975 0132 3A       		.uleb128 0x3a
 2976 0133 0B       		.uleb128 0xb
 2977 0134 3B       		.uleb128 0x3b
 2978 0135 0B       		.uleb128 0xb
 2979 0136 49       		.uleb128 0x49
 2980 0137 13       		.uleb128 0x13
 2981 0138 3F       		.uleb128 0x3f
 2982 0139 19       		.uleb128 0x19
 2983 013a 02       		.uleb128 0x2
 2984 013b 18       		.uleb128 0x18
 2985 013c 00       		.byte	0
 2986 013d 00       		.byte	0
 2987 013e 00       		.byte	0
 2988              		.section	.debug_aranges,"",%progbits
 2989 0000 3C000000 		.4byte	0x3c
 2990 0004 0200     		.2byte	0x2
 2991 0006 00000000 		.4byte	.Ldebug_info0
 2992 000a 04       		.byte	0x4
 2993 000b 00       		.byte	0
 2994 000c 0000     		.2byte	0
 2995 000e 0000     		.2byte	0
 2996 0010 00000000 		.4byte	.LFB64
 2997 0014 78000000 		.4byte	.LFE64-.LFB64
 2998 0018 00000000 		.4byte	.LFB65
 2999 001c 54000000 		.4byte	.LFE65-.LFB65
 3000 0020 00000000 		.4byte	.LFB66
 3001 0024 6C010000 		.4byte	.LFE66-.LFB66
 3002 0028 00000000 		.4byte	.LFB67
 3003 002c 1C030000 		.4byte	.LFE67-.LFB67
 3004 0030 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 63


 3005 0034 B8060000 		.4byte	.LFE68-.LFB68
 3006 0038 00000000 		.4byte	0
 3007 003c 00000000 		.4byte	0
 3008              		.section	.debug_ranges,"",%progbits
 3009              	.Ldebug_ranges0:
 3010 0000 00000000 		.4byte	.LFB64
 3011 0004 78000000 		.4byte	.LFE64
 3012 0008 00000000 		.4byte	.LFB65
 3013 000c 54000000 		.4byte	.LFE65
 3014 0010 00000000 		.4byte	.LFB66
 3015 0014 6C010000 		.4byte	.LFE66
 3016 0018 00000000 		.4byte	.LFB67
 3017 001c 1C030000 		.4byte	.LFE67
 3018 0020 00000000 		.4byte	.LFB68
 3019 0024 B8060000 		.4byte	.LFE68
 3020 0028 00000000 		.4byte	0
 3021 002c 00000000 		.4byte	0
 3022              		.section	.debug_line,"",%progbits
 3023              	.Ldebug_line0:
 3024 0000 C4030000 		.section	.debug_str,"MS",%progbits,1
 3024      02004C01 
 3024      00000201 
 3024      FB0E0D00 
 3024      01010101 
 3025              	.LASF17:
 3026 0000 6C6F6E67 		.ascii	"long double\000"
 3026      20646F75 
 3026      626C6500 
 3027              	.LASF35:
 3028 000c 6C6F7765 		.ascii	"lower_check_no\000"
 3028      725F6368 
 3028      65636B5F 
 3028      6E6F00
 3029              	.LASF49:
 3030 001b 63796C5F 		.ascii	"cyl_set\000"
 3030      73657400 
 3031              	.LASF50:
 3032 0023 63796C5F 		.ascii	"cyl_tmp\000"
 3032      746D7000 
 3033              	.LASF40:
 3034 002b 70736F63 		.ascii	"psoc_id\000"
 3034      5F696400 
 3035              	.LASF47:
 3036 0033 70726576 		.ascii	"prev_err\000"
 3036      5F657272 
 3036      00
 3037              	.LASF38:
 3038 003c 64696666 		.ascii	"diff\000"
 3038      00
 3039              	.LASF43:
 3040 0041 6E65775F 		.ascii	"new_pos_set\000"
 3040      706F735F 
 3040      73657400 
 3041              	.LASF54:
 3042 004d 74656D70 		.ascii	"temp\000"
 3042      00
 3043              	.LASF2:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 64


 3044 0052 73686F72 		.ascii	"short int\000"
 3044      7420696E 
 3044      7400
 3045              	.LASF22:
 3046 005c 6F666673 		.ascii	"offset_lower\000"
 3046      65745F6C 
 3046      6F776572 
 3046      00
 3047              	.LASF18:
 3048 0069 73697A65 		.ascii	"sizetype\000"
 3048      74797065 
 3048      00
 3049              	.LASF28:
 3050 0072 6D61696E 		.ascii	"main\000"
 3050      00
 3051              	.LASF60:
 3052 0077 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3052      43313120 
 3052      352E342E 
 3052      31203230 
 3052      31363036 
 3053 00aa 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3053      20726576 
 3053      6973696F 
 3053      6E203233 
 3053      37373135 
 3054 00dd 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3054      66756E63 
 3054      74696F6E 
 3054      2D736563 
 3054      74696F6E 
 3055              	.LASF6:
 3056 0105 6C6F6E67 		.ascii	"long long int\000"
 3056      206C6F6E 
 3056      6720696E 
 3056      7400
 3057              	.LASF55:
 3058 0113 68656C70 		.ascii	"help\000"
 3058      00
 3059              	.LASF12:
 3060 0118 75696E74 		.ascii	"uint16\000"
 3060      313600
 3061              	.LASF42:
 3062 011f 64617461 		.ascii	"data_read_mode\000"
 3062      5F726561 
 3062      645F6D6F 
 3062      646500
 3063              	.LASF20:
 3064 012e 70756C73 		.ascii	"pulse\000"
 3064      6500
 3065              	.LASF11:
 3066 0134 75696E74 		.ascii	"uint8\000"
 3066      3800
 3067              	.LASF19:
 3068 013a 63796C69 		.ascii	"cylinder\000"
 3068      6E646572 
 3068      00
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 65


 3069              	.LASF41:
 3070 0143 6572726F 		.ascii	"errorStatus\000"
 3070      72537461 
 3070      74757300 
 3071              	.LASF0:
 3072 014f 7369676E 		.ascii	"signed char\000"
 3072      65642063 
 3072      68617200 
 3073              	.LASF13:
 3074 015b 666C6F61 		.ascii	"float\000"
 3074      7400
 3075              	.LASF23:
 3076 0161 77726974 		.ascii	"writePWM\000"
 3076      6550574D 
 3076      00
 3077              	.LASF52:
 3078 016a 6F666673 		.ascii	"offsets\000"
 3078      65747300 
 3079              	.LASF33:
 3080 0172 75707065 		.ascii	"upper_offset\000"
 3080      725F6F66 
 3080      66736574 
 3080      00
 3081              	.LASF4:
 3082 017f 6C6F6E67 		.ascii	"long int\000"
 3082      20696E74 
 3082      00
 3083              	.LASF57:
 3084 0188 63796C5F 		.ascii	"cyl_no\000"
 3084      6E6F00
 3085              	.LASF32:
 3086 018f 6C6F7765 		.ascii	"lower_offset_set\000"
 3086      725F6F66 
 3086      66736574 
 3086      5F736574 
 3086      00
 3087              	.LASF1:
 3088 01a0 756E7369 		.ascii	"unsigned char\000"
 3088      676E6564 
 3088      20636861 
 3088      7200
 3089              	.LASF45:
 3090 01ae 70756C73 		.ascii	"pulse_temp\000"
 3090      655F7465 
 3090      6D7000
 3091              	.LASF34:
 3092 01b9 6C6F7765 		.ascii	"lower_offset\000"
 3092      725F6F66 
 3092      66736574 
 3092      00
 3093              	.LASF26:
 3094 01c6 72785374 		.ascii	"rxStatus\000"
 3094      61747573 
 3094      00
 3095              	.LASF44:
 3096 01cf 6E65775F 		.ascii	"new_pos\000"
 3096      706F7300 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 66


 3097              	.LASF46:
 3098 01d7 61646356 		.ascii	"adcValue\000"
 3098      616C7565 
 3098      00
 3099              	.LASF7:
 3100 01e0 6C6F6E67 		.ascii	"long long unsigned int\000"
 3100      206C6F6E 
 3100      6720756E 
 3100      7369676E 
 3100      65642069 
 3101              	.LASF8:
 3102 01f7 756E7369 		.ascii	"unsigned int\000"
 3102      676E6564 
 3102      20696E74 
 3102      00
 3103              	.LASF29:
 3104 0204 74696D65 		.ascii	"time\000"
 3104      00
 3105              	.LASF25:
 3106 0209 52784973 		.ascii	"RxIsr\000"
 3106      7200
 3107              	.LASF3:
 3108 020f 73686F72 		.ascii	"short unsigned int\000"
 3108      7420756E 
 3108      7369676E 
 3108      65642069 
 3108      6E7400
 3109              	.LASF62:
 3110 0222 433A5C55 		.ascii	"C:\\Users\\Andrew\\Documents\\GitHub\\Hydraulic-Mim"
 3110      73657273 
 3110      5C416E64 
 3110      7265775C 
 3110      446F6375 
 3111 0250 69632D41 		.ascii	"ic-Arm\\PSOC_arm_project.cydsn\000"
 3111      726D5C50 
 3111      534F435F 
 3111      61726D5F 
 3111      70726F6A 
 3112              	.LASF15:
 3113 026e 63686172 		.ascii	"char\000"
 3113      00
 3114              	.LASF30:
 3115 0273 63616C69 		.ascii	"calib_cyl\000"
 3115      625F6379 
 3115      6C00
 3116              	.LASF10:
 3117 027d 696E7433 		.ascii	"int32_t\000"
 3117      325F7400 
 3118              	.LASF36:
 3119 0285 75707065 		.ascii	"upper_check_no\000"
 3119      725F6368 
 3119      65636B5F 
 3119      6E6F00
 3120              	.LASF61:
 3121 0294 6D61696E 		.ascii	"main.c\000"
 3121      2E6300
 3122              	.LASF16:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 67


 3123 029b 72656738 		.ascii	"reg8\000"
 3123      00
 3124              	.LASF5:
 3125 02a0 6C6F6E67 		.ascii	"long unsigned int\000"
 3125      20756E73 
 3125      69676E65 
 3125      6420696E 
 3125      7400
 3126              	.LASF48:
 3127 02b2 7069645F 		.ascii	"pid_integral\000"
 3127      696E7465 
 3127      6772616C 
 3127      00
 3128              	.LASF37:
 3129 02bf 70726576 		.ascii	"prev_adcValue\000"
 3129      5F616463 
 3129      56616C75 
 3129      6500
 3130              	.LASF9:
 3131 02cd 5F5F696E 		.ascii	"__int32_t\000"
 3131      7433325F 
 3131      7400
 3132              	.LASF21:
 3133 02d7 6F666673 		.ascii	"offset_upper\000"
 3133      65745F75 
 3133      70706572 
 3133      00
 3134              	.LASF63:
 3135 02e4 70756C73 		.ascii	"pulseCheck\000"
 3135      65436865 
 3135      636B00
 3136              	.LASF56:
 3137 02ef 73746172 		.ascii	"start_calib\000"
 3137      745F6361 
 3137      6C696200 
 3138              	.LASF24:
 3139 02fb 6164635F 		.ascii	"adc_update\000"
 3139      75706461 
 3139      746500
 3140              	.LASF27:
 3141 0306 72784461 		.ascii	"rxData\000"
 3141      746100
 3142              	.LASF58:
 3143 030d 6D6F7669 		.ascii	"moving_median\000"
 3143      6E675F6D 
 3143      65646961 
 3143      6E00
 3144              	.LASF59:
 3145 031b 74656D70 		.ascii	"tempArray\000"
 3145      41727261 
 3145      7900
 3146              	.LASF53:
 3147 0325 73656E64 		.ascii	"sendValue\000"
 3147      56616C75 
 3147      6500
 3148              	.LASF14:
 3149 032f 646F7562 		.ascii	"double\000"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccKAQ361.s 			page 68


 3149      6C6500
 3150              	.LASF51:
 3151 0336 6474735F 		.ascii	"dts_ct\000"
 3151      637400
 3152              	.LASF39:
 3153 033d 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3153      52784275 
 3153      66666572 
 3153      00
 3154              	.LASF31:
 3155 034a 75707065 		.ascii	"upper_offset_set\000"
 3155      725F6F66 
 3155      66736574 
 3155      5F736574 
 3155      00
 3156              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
