ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	psoc_id,4,4
  20              		.syntax unified
  21              		.global _printf_float
  22              		.thumb
  23              		.syntax unified
  24              		.global	errorStatus
  25              		.bss
  26              		.type	errorStatus, %object
  27              		.size	errorStatus, 1
  28              	errorStatus:
  29 0000 00       		.space	1
  30              		.section	.text.writePWM,"ax",%progbits
  31              		.align	2
  32              		.global	writePWM
  33              		.thumb
  34              		.thumb_func
  35              		.type	writePWM, %function
  36              	writePWM:
  37              	.LFB64:
  38              		.file 1 "main.c"
   1:main.c        **** 
   2:main.c        **** #include <project.h>
   3:main.c        **** #include <stdio.h>
   4:main.c        **** #include "common.h"
   5:main.c        **** #include <math.h>
   6:main.c        **** #include <stdlib.h>     /* strtod */
   7:main.c        **** 
   8:main.c        **** #define	Frequency 1000000.0			// Frequency of PWMClock
   9:main.c        **** #define	One_ms (Frequency/1000.0)	// 1 ms constant
  10:main.c        **** #define filter_size 7
  11:main.c        **** #define CYL_NO 4                    // Number of connected cylinders
  12:main.c        **** 
  13:main.c        **** #define PSOC_ID_BYTE_ADDRESS          (0x20)
  14:main.c        **** int psoc_id;
  15:main.c        **** 
  16:main.c        **** 
  17:main.c        **** /* Add an explicit reference to the floating point printf library to allow
  18:main.c        **** the usage of floating point conversion specifier */
  19:main.c        **** #if defined (__GNUC__)
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 2


  20:main.c        ****     asm (".global _printf_float");
  21:main.c        **** #endif
  22:main.c        **** 
  23:main.c        **** uint8 errorStatus = 0u;
  24:main.c        **** 
  25:main.c        **** void writePWM(int cylinder, int pulse){
  39              		.loc 1 25 0
  40              		.cfi_startproc
  41              		@ args = 0, pretend = 0, frame = 8
  42              		@ frame_needed = 1, uses_anonymous_args = 0
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 82B0     		sub	sp, sp, #8
  48              		.cfi_def_cfa_offset 16
  49 0004 00AF     		add	r7, sp, #0
  50              		.cfi_def_cfa_register 7
  51 0006 7860     		str	r0, [r7, #4]
  52 0008 3960     		str	r1, [r7]
  26:main.c        ****     switch(cylinder){
  53              		.loc 1 26 0
  54 000a 7B68     		ldr	r3, [r7, #4]
  55 000c 032B     		cmp	r3, #3
  56 000e 2FD8     		bhi	.L8
  57 0010 01A2     		adr	r2, .L4
  58 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  59 0016 00BF     		.p2align 2
  60              	.L4:
  61 0018 29000000 		.word	.L3+1
  62 001c 3B000000 		.word	.L5+1
  63 0020 4D000000 		.word	.L6+1
  64 0024 5F000000 		.word	.L7+1
  65              		.p2align 1
  66              	.L3:
  27:main.c        ****                 case 0:
  28:main.c        ****                     PWM_0_WriteCompare(pulse + 1500);
  67              		.loc 1 28 0
  68 0028 3B68     		ldr	r3, [r7]
  69 002a 9BB2     		uxth	r3, r3
  70 002c 03F2DC53 		addw	r3, r3, #1500
  71 0030 9BB2     		uxth	r3, r3
  72 0032 1846     		mov	r0, r3
  73 0034 FFF7FEFF 		bl	PWM_0_WriteCompare
  29:main.c        ****                     break;
  74              		.loc 1 29 0
  75 0038 1AE0     		b	.L2
  76              	.L5:
  30:main.c        ****                 case 1:
  31:main.c        ****                     PWM_1_WriteCompare(pulse + 1500);
  77              		.loc 1 31 0
  78 003a 3B68     		ldr	r3, [r7]
  79 003c 9BB2     		uxth	r3, r3
  80 003e 03F2DC53 		addw	r3, r3, #1500
  81 0042 9BB2     		uxth	r3, r3
  82 0044 1846     		mov	r0, r3
  83 0046 FFF7FEFF 		bl	PWM_1_WriteCompare
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 3


  32:main.c        ****                     break;
  84              		.loc 1 32 0
  85 004a 11E0     		b	.L2
  86              	.L6:
  33:main.c        ****                 case 2:
  34:main.c        ****                     PWM_2_WriteCompare(pulse + 1500);
  87              		.loc 1 34 0
  88 004c 3B68     		ldr	r3, [r7]
  89 004e 9BB2     		uxth	r3, r3
  90 0050 03F2DC53 		addw	r3, r3, #1500
  91 0054 9BB2     		uxth	r3, r3
  92 0056 1846     		mov	r0, r3
  93 0058 FFF7FEFF 		bl	PWM_2_WriteCompare
  35:main.c        ****                     break;
  94              		.loc 1 35 0
  95 005c 08E0     		b	.L2
  96              	.L7:
  36:main.c        ****                 case 3:
  37:main.c        ****                     PWM_3_WriteCompare(pulse + 1500);
  97              		.loc 1 37 0
  98 005e 3B68     		ldr	r3, [r7]
  99 0060 9BB2     		uxth	r3, r3
 100 0062 03F2DC53 		addw	r3, r3, #1500
 101 0066 9BB2     		uxth	r3, r3
 102 0068 1846     		mov	r0, r3
 103 006a FFF7FEFF 		bl	PWM_3_WriteCompare
  38:main.c        ****                     break;
 104              		.loc 1 38 0
 105 006e 00BF     		nop
 106              	.L2:
 107              	.L8:
  39:main.c        ****             }  
  40:main.c        **** }
 108              		.loc 1 40 0
 109 0070 00BF     		nop
 110 0072 0837     		adds	r7, r7, #8
 111              		.cfi_def_cfa_offset 8
 112 0074 BD46     		mov	sp, r7
 113              		.cfi_def_cfa_register 13
 114              		@ sp needed
 115 0076 80BD     		pop	{r7, pc}
 116              		.cfi_endproc
 117              	.LFE64:
 118              		.size	writePWM, .-writePWM
 119              		.section	.text.pulseCheck,"ax",%progbits
 120              		.align	2
 121              		.global	pulseCheck
 122              		.thumb
 123              		.thumb_func
 124              		.type	pulseCheck, %function
 125              	pulseCheck:
 126              	.LFB65:
  41:main.c        **** 
  42:main.c        **** int pulseCheck(int pulse, int offset_upper, int offset_lower) {
 127              		.loc 1 42 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 4


 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 0000 80B4     		push	{r7}
 133              		.cfi_def_cfa_offset 4
 134              		.cfi_offset 7, -4
 135 0002 85B0     		sub	sp, sp, #20
 136              		.cfi_def_cfa_offset 24
 137 0004 00AF     		add	r7, sp, #0
 138              		.cfi_def_cfa_register 7
 139 0006 F860     		str	r0, [r7, #12]
 140 0008 B960     		str	r1, [r7, #8]
 141 000a 7A60     		str	r2, [r7, #4]
  43:main.c        ****     if(pulse<0){pulse = pulse - offset_lower;}
 142              		.loc 1 43 0
 143 000c FB68     		ldr	r3, [r7, #12]
 144 000e 002B     		cmp	r3, #0
 145 0010 03DA     		bge	.L10
 146              		.loc 1 43 0 is_stmt 0 discriminator 1
 147 0012 FA68     		ldr	r2, [r7, #12]
 148 0014 7B68     		ldr	r3, [r7, #4]
 149 0016 D31A     		subs	r3, r2, r3
 150 0018 FB60     		str	r3, [r7, #12]
 151              	.L10:
  44:main.c        ****         if(pulse>0){pulse = pulse + offset_upper;}
 152              		.loc 1 44 0 is_stmt 1
 153 001a FB68     		ldr	r3, [r7, #12]
 154 001c 002B     		cmp	r3, #0
 155 001e 03DD     		ble	.L11
 156              		.loc 1 44 0 is_stmt 0 discriminator 1
 157 0020 FA68     		ldr	r2, [r7, #12]
 158 0022 BB68     		ldr	r3, [r7, #8]
 159 0024 1344     		add	r3, r3, r2
 160 0026 FB60     		str	r3, [r7, #12]
 161              	.L11:
  45:main.c        ****         if(pulse<-500){pulse=-500;}
 162              		.loc 1 45 0 is_stmt 1
 163 0028 FB68     		ldr	r3, [r7, #12]
 164 002a 13F5FA7F 		cmn	r3, #500
 165 002e 01DA     		bge	.L12
 166              		.loc 1 45 0 is_stmt 0 discriminator 1
 167 0030 074B     		ldr	r3, .L15
 168 0032 FB60     		str	r3, [r7, #12]
 169              	.L12:
  46:main.c        ****         if(pulse>500){pulse=500;}
 170              		.loc 1 46 0 is_stmt 1
 171 0034 FB68     		ldr	r3, [r7, #12]
 172 0036 B3F5FA7F 		cmp	r3, #500
 173 003a 02DD     		ble	.L13
 174              		.loc 1 46 0 is_stmt 0 discriminator 1
 175 003c 4FF4FA73 		mov	r3, #500
 176 0040 FB60     		str	r3, [r7, #12]
 177              	.L13:
  47:main.c        ****     return pulse;
 178              		.loc 1 47 0 is_stmt 1
 179 0042 FB68     		ldr	r3, [r7, #12]
  48:main.c        **** }
 180              		.loc 1 48 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 5


 181 0044 1846     		mov	r0, r3
 182 0046 1437     		adds	r7, r7, #20
 183              		.cfi_def_cfa_offset 4
 184 0048 BD46     		mov	sp, r7
 185              		.cfi_def_cfa_register 13
 186              		@ sp needed
 187 004a 80BC     		pop	{r7}
 188              		.cfi_restore 7
 189              		.cfi_def_cfa_offset 0
 190 004c 7047     		bx	lr
 191              	.L16:
 192 004e 00BF     		.align	2
 193              	.L15:
 194 0050 0CFEFFFF 		.word	-500
 195              		.cfi_endproc
 196              	.LFE65:
 197              		.size	pulseCheck, .-pulseCheck
 198              		.global	data_read_mode
 199              		.bss
 200 0001 000000   		.align	2
 201              		.type	data_read_mode, %object
 202              		.size	data_read_mode, 4
 203              	data_read_mode:
 204 0004 00000000 		.space	4
 205              		.comm	new_pos_set,16,4
 206              		.comm	new_pos,16,4
 207              		.comm	pos,16,4
 208              		.comm	pulse,16,4
 209              		.comm	pulse_temp,16,4
 210              		.comm	err,32,8
 211              		.comm	adcValue,8,4
 212              		.comm	der,32,8
 213              		.comm	prev_err,32,8
 214              		.comm	pid_integral,32,8
 215              		.global	cyl_set
 216              		.align	2
 217              		.type	cyl_set, %object
 218              		.size	cyl_set, 4
 219              	cyl_set:
 220 0008 00000000 		.space	4
 221              		.comm	cyl_tmp,1,4
 222              		.comm	dts,240,8
 223              		.global	dts_ct
 224              		.align	2
 225              		.type	dts_ct, %object
 226              		.size	dts_ct, 4
 227              	dts_ct:
 228 000c 00000000 		.space	4
 229              		.global	offsets
 230              		.align	2
 231              		.type	offsets, %object
 232              		.size	offsets, 32
 233              	offsets:
 234 0010 00000000 		.space	32
 234      00000000 
 234      00000000 
 234      00000000 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 6


 234      00000000 
 235              		.comm	sendValue,100,4
 236              		.comm	temp,20,4
 237              		.global	nn
 238              		.align	2
 239              		.type	nn, %object
 240              		.size	nn, 4
 241              	nn:
 242 0030 00000000 		.space	4
 243              		.global	pid
 244              		.data
 245              		.align	3
 246              		.type	pid, %object
 247              		.size	pid, 24
 248              	pid:
 249 0000 33333333 		.word	858993459
 250 0004 3333D33F 		.word	1070805811
 251 0008 FCA9F1D2 		.word	-755914244
 252 000c 4D62503F 		.word	1062232653
 253 0010 00000000 		.word	0
 254 0014 00000000 		.word	0
 255              		.comm	help,100,4
 256              		.global	tt
 257              		.bss
 258              		.align	2
 259              		.type	tt, %object
 260              		.size	tt, 4
 261              	tt:
 262 0034 00000000 		.space	4
 263              		.global	start_calib
 264              		.align	2
 265              		.type	start_calib, %object
 266              		.size	start_calib, 4
 267              	start_calib:
 268 0038 00000000 		.space	4
 269              		.global	cyl_no
 270              		.align	2
 271              		.type	cyl_no, %object
 272              		.size	cyl_no, 4
 273              	cyl_no:
 274 003c 00000000 		.space	4
 275              		.global	moving_median
 276              		.align	2
 277              		.type	moving_median, %object
 278              		.size	moving_median, 56
 279              	moving_median:
 280 0040 00000000 		.space	56
 280      00000000 
 280      00000000 
 280      00000000 
 280      00000000 
 281              		.comm	tempArray,14,4
 282              		.comm	tmp,2,2
 283              		.section	.text.adc_update,"ax",%progbits
 284              		.align	2
 285              		.global	adc_update
 286              		.thumb
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 7


 287              		.thumb_func
 288              		.type	adc_update, %function
 289              	adc_update:
 290              	.LFB66:
  49:main.c        **** 
  50:main.c        **** 
  51:main.c        **** int data_read_mode = 0;
  52:main.c        **** 
  53:main.c        **** volatile int new_pos_set[CYL_NO];
  54:main.c        **** int new_pos[CYL_NO];
  55:main.c        **** int pos[CYL_NO];
  56:main.c        **** int pulse[CYL_NO];
  57:main.c        **** int pulse_temp[CYL_NO];
  58:main.c        **** double err[CYL_NO];
  59:main.c        **** uint16 adcValue[CYL_NO];
  60:main.c        **** double der[CYL_NO];
  61:main.c        **** double prev_err[CYL_NO];
  62:main.c        **** double pid_integral[CYL_NO];
  63:main.c        **** 
  64:main.c        **** int cyl_set = 0;
  65:main.c        **** char cyl_tmp[1];
  66:main.c        **** double dts[30];
  67:main.c        **** int dts_ct = 0;
  68:main.c        **** 
  69:main.c        **** int offsets[4][2] = {{0,0},{0,0},{0,0},{0,0}}; //{lower,upper} - both positive
  70:main.c        **** 
  71:main.c        **** char sendValue[100];
  72:main.c        **** char temp[20];
  73:main.c        **** int nn=0;
  74:main.c        **** double pid[3] = {0.3,0.001,0.0};
  75:main.c        **** 
  76:main.c        **** char help[100];
  77:main.c        **** int tt = 0;
  78:main.c        **** 
  79:main.c        **** int start_calib = 0;
  80:main.c        **** int cyl_no = 0;
  81:main.c        **** 
  82:main.c        **** uint16 moving_median[CYL_NO][filter_size] = {0};
  83:main.c        **** uint16 tempArray[filter_size];
  84:main.c        **** uint16 tmp;
  85:main.c        **** 
  86:main.c        **** CY_ISR(adc_update){
 291              		.loc 1 86 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 24
 294              		@ frame_needed = 1, uses_anonymous_args = 0
 295 0000 80B5     		push	{r7, lr}
 296              		.cfi_def_cfa_offset 8
 297              		.cfi_offset 7, -8
 298              		.cfi_offset 14, -4
 299 0002 86B0     		sub	sp, sp, #24
 300              		.cfi_def_cfa_offset 32
 301 0004 00AF     		add	r7, sp, #0
 302              		.cfi_def_cfa_register 7
 303              	.LBB2:
  87:main.c        ****     for(int c = 0;c<CYL_NO;c++){
 304              		.loc 1 87 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 8


 305 0006 0023     		movs	r3, #0
 306 0008 7B61     		str	r3, [r7, #20]
 307 000a 9DE0     		b	.L18
 308              	.L28:
  88:main.c        ****         AMux_0_FastSelect(c);
 309              		.loc 1 88 0
 310 000c 7B69     		ldr	r3, [r7, #20]
 311 000e DBB2     		uxtb	r3, r3
 312 0010 1846     		mov	r0, r3
 313 0012 FFF7FEFF 		bl	AMux_0_FastSelect
 314              	.LBB3:
  89:main.c        ****         
  90:main.c        ****         for(int j=0;j<filter_size-1;j++){
 315              		.loc 1 90 0
 316 0016 0023     		movs	r3, #0
 317 0018 3B61     		str	r3, [r7, #16]
 318 001a 16E0     		b	.L19
 319              	.L20:
  91:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 320              		.loc 1 91 0 discriminator 3
 321 001c 3B69     		ldr	r3, [r7, #16]
 322 001e 591C     		adds	r1, r3, #1
 323 0020 4E48     		ldr	r0, .L29
 324 0022 7A69     		ldr	r2, [r7, #20]
 325 0024 1346     		mov	r3, r2
 326 0026 DB00     		lsls	r3, r3, #3
 327 0028 9B1A     		subs	r3, r3, r2
 328 002a 0B44     		add	r3, r3, r1
 329 002c 30F81300 		ldrh	r0, [r0, r3, lsl #1]
 330 0030 4A49     		ldr	r1, .L29
 331 0032 7A69     		ldr	r2, [r7, #20]
 332 0034 1346     		mov	r3, r2
 333 0036 DB00     		lsls	r3, r3, #3
 334 0038 9B1A     		subs	r3, r3, r2
 335 003a 3A69     		ldr	r2, [r7, #16]
 336 003c 1344     		add	r3, r3, r2
 337 003e 0246     		mov	r2, r0	@ movhi
 338 0040 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
  90:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 339              		.loc 1 90 0 discriminator 3
 340 0044 3B69     		ldr	r3, [r7, #16]
 341 0046 0133     		adds	r3, r3, #1
 342 0048 3B61     		str	r3, [r7, #16]
 343              	.L19:
  90:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 344              		.loc 1 90 0 is_stmt 0 discriminator 1
 345 004a 3B69     		ldr	r3, [r7, #16]
 346 004c 052B     		cmp	r3, #5
 347 004e E5DD     		ble	.L20
 348              	.LBE3:
  92:main.c        ****         }
  93:main.c        ****         
  94:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 349              		.loc 1 94 0 is_stmt 1
 350 0050 FFF7FEFF 		bl	ADC_0_GetResult16
 351 0054 0346     		mov	r3, r0
 352 0056 98B2     		uxth	r0, r3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 9


 353 0058 4049     		ldr	r1, .L29
 354 005a 7A69     		ldr	r2, [r7, #20]
 355 005c 1346     		mov	r3, r2
 356 005e DB00     		lsls	r3, r3, #3
 357 0060 9B1A     		subs	r3, r3, r2
 358 0062 5B00     		lsls	r3, r3, #1
 359 0064 0B44     		add	r3, r3, r1
 360 0066 0C33     		adds	r3, r3, #12
 361 0068 0246     		mov	r2, r0	@ movhi
 362 006a 1A80     		strh	r2, [r3]	@ movhi
  95:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 363              		.loc 1 95 0
 364 006c FFF7FEFF 		bl	ADC_0_GetResult16
 365 0070 0346     		mov	r3, r0
 366 0072 98B2     		uxth	r0, r3
 367 0074 3949     		ldr	r1, .L29
 368 0076 7A69     		ldr	r2, [r7, #20]
 369 0078 1346     		mov	r3, r2
 370 007a DB00     		lsls	r3, r3, #3
 371 007c 9B1A     		subs	r3, r3, r2
 372 007e 5B00     		lsls	r3, r3, #1
 373 0080 0B44     		add	r3, r3, r1
 374 0082 0C33     		adds	r3, r3, #12
 375 0084 0246     		mov	r2, r0	@ movhi
 376 0086 1A80     		strh	r2, [r3]	@ movhi
  96:main.c        ****         ADC_0_IsEndConversion(ADC_0_WAIT_FOR_RESULT);
 377              		.loc 1 96 0
 378 0088 0020     		movs	r0, #0
 379 008a FFF7FEFF 		bl	ADC_0_IsEndConversion
  97:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 380              		.loc 1 97 0
 381 008e FFF7FEFF 		bl	ADC_0_GetResult16
 382 0092 0346     		mov	r3, r0
 383 0094 98B2     		uxth	r0, r3
 384 0096 3149     		ldr	r1, .L29
 385 0098 7A69     		ldr	r2, [r7, #20]
 386 009a 1346     		mov	r3, r2
 387 009c DB00     		lsls	r3, r3, #3
 388 009e 9B1A     		subs	r3, r3, r2
 389 00a0 5B00     		lsls	r3, r3, #1
 390 00a2 0B44     		add	r3, r3, r1
 391 00a4 0C33     		adds	r3, r3, #12
 392 00a6 0246     		mov	r2, r0	@ movhi
 393 00a8 1A80     		strh	r2, [r3]	@ movhi
 394              	.LBB4:
  98:main.c        ****         
  99:main.c        ****         for(int j=0;j<filter_size;j++){
 395              		.loc 1 99 0
 396 00aa 0023     		movs	r3, #0
 397 00ac FB60     		str	r3, [r7, #12]
 398 00ae 0FE0     		b	.L21
 399              	.L22:
 100:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 400              		.loc 1 100 0 discriminator 3
 401 00b0 2A49     		ldr	r1, .L29
 402 00b2 7A69     		ldr	r2, [r7, #20]
 403 00b4 1346     		mov	r3, r2
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 10


 404 00b6 DB00     		lsls	r3, r3, #3
 405 00b8 9B1A     		subs	r3, r3, r2
 406 00ba FA68     		ldr	r2, [r7, #12]
 407 00bc 1344     		add	r3, r3, r2
 408 00be 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 409 00c2 274A     		ldr	r2, .L29+4
 410 00c4 FB68     		ldr	r3, [r7, #12]
 411 00c6 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  99:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 412              		.loc 1 99 0 discriminator 3
 413 00ca FB68     		ldr	r3, [r7, #12]
 414 00cc 0133     		adds	r3, r3, #1
 415 00ce FB60     		str	r3, [r7, #12]
 416              	.L21:
  99:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 417              		.loc 1 99 0 is_stmt 0 discriminator 1
 418 00d0 FB68     		ldr	r3, [r7, #12]
 419 00d2 062B     		cmp	r3, #6
 420 00d4 ECDD     		ble	.L22
 421              	.LBE4:
 422              	.LBB5:
 101:main.c        ****         }
 102:main.c        ****         for(int i = 0; i < filter_size; i++){                     //Loop for ascending ordering
 423              		.loc 1 102 0 is_stmt 1
 424 00d6 0023     		movs	r3, #0
 425 00d8 BB60     		str	r3, [r7, #8]
 426 00da 29E0     		b	.L23
 427              	.L27:
 428              	.LBB6:
 103:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 429              		.loc 1 103 0
 430 00dc 0023     		movs	r3, #0
 431 00de 7B60     		str	r3, [r7, #4]
 432 00e0 20E0     		b	.L24
 433              	.L26:
 104:main.c        ****         	{
 105:main.c        ****         		if (tempArray[j] > tempArray[i])                //Comparing other array elements
 434              		.loc 1 105 0
 435 00e2 1F4A     		ldr	r2, .L29+4
 436 00e4 7B68     		ldr	r3, [r7, #4]
 437 00e6 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 438 00ea 1D49     		ldr	r1, .L29+4
 439 00ec BB68     		ldr	r3, [r7, #8]
 440 00ee 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 441 00f2 9A42     		cmp	r2, r3
 442 00f4 13D9     		bls	.L25
 106:main.c        ****         		{
 107:main.c        ****         			tmp = tempArray[i];         //Using temporary variable for storing last value
 443              		.loc 1 107 0
 444 00f6 1A4A     		ldr	r2, .L29+4
 445 00f8 BB68     		ldr	r3, [r7, #8]
 446 00fa 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 447 00fe 194B     		ldr	r3, .L29+8
 448 0100 1A80     		strh	r2, [r3]	@ movhi
 108:main.c        ****         			tempArray[i] = tempArray[j];            //replacing value
 449              		.loc 1 108 0
 450 0102 174A     		ldr	r2, .L29+4
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 11


 451 0104 7B68     		ldr	r3, [r7, #4]
 452 0106 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 453 010a 154A     		ldr	r2, .L29+4
 454 010c BB68     		ldr	r3, [r7, #8]
 455 010e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 109:main.c        ****         			tempArray[j] = tmp;             //storing last value
 456              		.loc 1 109 0
 457 0112 144B     		ldr	r3, .L29+8
 458 0114 1988     		ldrh	r1, [r3]
 459 0116 124A     		ldr	r2, .L29+4
 460 0118 7B68     		ldr	r3, [r7, #4]
 461 011a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 462              	.L25:
 103:main.c        ****         	{
 463              		.loc 1 103 0 discriminator 2
 464 011e 7B68     		ldr	r3, [r7, #4]
 465 0120 0133     		adds	r3, r3, #1
 466 0122 7B60     		str	r3, [r7, #4]
 467              	.L24:
 103:main.c        ****         	{
 468              		.loc 1 103 0 is_stmt 0 discriminator 1
 469 0124 7B68     		ldr	r3, [r7, #4]
 470 0126 062B     		cmp	r3, #6
 471 0128 DBDD     		ble	.L26
 472              	.LBE6:
 102:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 473              		.loc 1 102 0 is_stmt 1 discriminator 2
 474 012a BB68     		ldr	r3, [r7, #8]
 475 012c 0133     		adds	r3, r3, #1
 476 012e BB60     		str	r3, [r7, #8]
 477              	.L23:
 102:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 478              		.loc 1 102 0 is_stmt 0 discriminator 1
 479 0130 BB68     		ldr	r3, [r7, #8]
 480 0132 062B     		cmp	r3, #6
 481 0134 D2DD     		ble	.L27
 482              	.LBE5:
 110:main.c        ****         		}  
 111:main.c        ****         	}
 112:main.c        ****         }
 113:main.c        ****         adcValue[c] = tempArray[(filter_size-1)/2];
 483              		.loc 1 113 0 is_stmt 1 discriminator 2
 484 0136 0A4B     		ldr	r3, .L29+4
 485 0138 D988     		ldrh	r1, [r3, #6]
 486 013a 0B4A     		ldr	r2, .L29+12
 487 013c 7B69     		ldr	r3, [r7, #20]
 488 013e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  87:main.c        ****         AMux_0_FastSelect(c);
 489              		.loc 1 87 0 discriminator 2
 490 0142 7B69     		ldr	r3, [r7, #20]
 491 0144 0133     		adds	r3, r3, #1
 492 0146 7B61     		str	r3, [r7, #20]
 493              	.L18:
  87:main.c        ****         AMux_0_FastSelect(c);
 494              		.loc 1 87 0 is_stmt 0 discriminator 1
 495 0148 7B69     		ldr	r3, [r7, #20]
 496 014a 032B     		cmp	r3, #3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 12


 497 014c 7FF75EAF 		ble	.L28
 498              	.LBE2:
 114:main.c        ****     }
 115:main.c        ****     update_median_isr_ClearPending();
 499              		.loc 1 115 0 is_stmt 1
 500 0150 FFF7FEFF 		bl	update_median_isr_ClearPending
 116:main.c        ****     
 117:main.c        **** }
 501              		.loc 1 117 0
 502 0154 00BF     		nop
 503 0156 1837     		adds	r7, r7, #24
 504              		.cfi_def_cfa_offset 8
 505 0158 BD46     		mov	sp, r7
 506              		.cfi_def_cfa_register 13
 507              		@ sp needed
 508 015a 80BD     		pop	{r7, pc}
 509              	.L30:
 510              		.align	2
 511              	.L29:
 512 015c 00000000 		.word	moving_median
 513 0160 00000000 		.word	tempArray
 514 0164 00000000 		.word	tmp
 515 0168 00000000 		.word	adcValue
 516              		.cfi_endproc
 517              	.LFE66:
 518              		.size	adc_update, .-adc_update
 519              		.section	.text.RxIsr,"ax",%progbits
 520              		.align	2
 521              		.global	RxIsr
 522              		.thumb
 523              		.thumb_func
 524              		.type	RxIsr, %function
 525              	RxIsr:
 526              	.LFB67:
 118:main.c        **** 
 119:main.c        **** 
 120:main.c        **** CY_ISR(RxIsr)
 121:main.c        **** {
 527              		.loc 1 121 0
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 8
 530              		@ frame_needed = 1, uses_anonymous_args = 0
 531 0000 90B5     		push	{r4, r7, lr}
 532              		.cfi_def_cfa_offset 12
 533              		.cfi_offset 4, -12
 534              		.cfi_offset 7, -8
 535              		.cfi_offset 14, -4
 536 0002 83B0     		sub	sp, sp, #12
 537              		.cfi_def_cfa_offset 24
 538 0004 00AF     		add	r7, sp, #0
 539              		.cfi_def_cfa_register 7
 540              	.L64:
 122:main.c        ****     uint8 rxStatus;         
 123:main.c        ****     uint8 rxData;           
 124:main.c        ****     
 125:main.c        ****     do
 126:main.c        ****     {
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 13


 127:main.c        ****         /* Read receiver status register */
 128:main.c        ****         rxStatus = UART_RXSTATUS_REG;
 541              		.loc 1 128 0
 542 0006 9A4B     		ldr	r3, .L67
 543 0008 1B78     		ldrb	r3, [r3]
 544 000a FB70     		strb	r3, [r7, #3]
 129:main.c        **** 
 130:main.c        ****         if((rxStatus & (UART_RX_STS_BREAK      | UART_RX_STS_PAR_ERROR |
 131:main.c        ****                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 545              		.loc 1 131 0
 546 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 547 000e 03F01E03 		and	r3, r3, #30
 130:main.c        ****                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 548              		.loc 1 130 0
 549 0012 002B     		cmp	r3, #0
 550 0014 0CD0     		beq	.L32
 132:main.c        ****         {
 133:main.c        ****             /* ERROR handling. */
 134:main.c        ****             errorStatus |= rxStatus & ( UART_RX_STS_BREAK      | UART_RX_STS_PAR_ERROR | 
 551              		.loc 1 134 0
 552 0016 97F90330 		ldrsb	r3, [r7, #3]
 553 001a 03F01E03 		and	r3, r3, #30
 554 001e 5AB2     		sxtb	r2, r3
 555 0020 944B     		ldr	r3, .L67+4
 556 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 557 0024 5BB2     		sxtb	r3, r3
 558 0026 1343     		orrs	r3, r3, r2
 559 0028 5BB2     		sxtb	r3, r3
 560 002a DAB2     		uxtb	r2, r3
 561 002c 914B     		ldr	r3, .L67+4
 562 002e 1A70     		strb	r2, [r3]
 563              	.L32:
 135:main.c        ****                                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN);
 136:main.c        ****         }
 137:main.c        ****         
 138:main.c        ****         if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 564              		.loc 1 138 0
 565 0030 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 566 0032 03F02003 		and	r3, r3, #32
 567 0036 002B     		cmp	r3, #0
 568 0038 00F04C81 		beq	.L33
 139:main.c        ****         {
 140:main.c        ****             /* Read data from the RX data register */
 141:main.c        ****             rxData = UART_RXDATA_REG;
 569              		.loc 1 141 0
 570 003c 8E4B     		ldr	r3, .L67+8
 571 003e 1B78     		ldrb	r3, [r3]
 572 0040 BB70     		strb	r3, [r7, #2]
 142:main.c        ****             help[tt] = rxData;
 573              		.loc 1 142 0
 574 0042 8E4B     		ldr	r3, .L67+12
 575 0044 1B68     		ldr	r3, [r3]
 576 0046 8E49     		ldr	r1, .L67+16
 577 0048 BA78     		ldrb	r2, [r7, #2]
 578 004a CA54     		strb	r2, [r1, r3]
 143:main.c        ****             tt++;
 579              		.loc 1 143 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 14


 580 004c 8B4B     		ldr	r3, .L67+12
 581 004e 1B68     		ldr	r3, [r3]
 582 0050 0133     		adds	r3, r3, #1
 583 0052 8A4A     		ldr	r2, .L67+12
 584 0054 1360     		str	r3, [r2]
 144:main.c        ****             if(tt==99){tt=0;}
 585              		.loc 1 144 0
 586 0056 894B     		ldr	r3, .L67+12
 587 0058 1B68     		ldr	r3, [r3]
 588 005a 632B     		cmp	r3, #99
 589 005c 02D1     		bne	.L34
 590              		.loc 1 144 0 is_stmt 0 discriminator 1
 591 005e 874B     		ldr	r3, .L67+12
 592 0060 0022     		movs	r2, #0
 593 0062 1A60     		str	r2, [r3]
 594              	.L34:
 145:main.c        ****             if(rxData=='b' ){start_calib=1;};
 595              		.loc 1 145 0 is_stmt 1
 596 0064 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 597 0066 622B     		cmp	r3, #98
 598 0068 02D1     		bne	.L35
 599              		.loc 1 145 0 is_stmt 0 discriminator 1
 600 006a 864B     		ldr	r3, .L67+20
 601 006c 0122     		movs	r2, #1
 602 006e 1A60     		str	r2, [r3]
 603              	.L35:
 146:main.c        ****             switch(data_read_mode)
 604              		.loc 1 146 0 is_stmt 1
 605 0070 854B     		ldr	r3, .L67+24
 606 0072 1B68     		ldr	r3, [r3]
 607 0074 062B     		cmp	r3, #6
 608 0076 00F22D81 		bhi	.L33
 609 007a 01A2     		adr	r2, .L38
 610 007c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 611              		.p2align 2
 612              	.L38:
 613 0080 9D000000 		.word	.L37+1
 614 0084 D3000000 		.word	.L39+1
 615 0088 1B010000 		.word	.L40+1
 616 008c 8F010000 		.word	.L41+1
 617 0090 D1010000 		.word	.L42+1
 618 0094 13020000 		.word	.L43+1
 619 0098 55020000 		.word	.L44+1
 620              		.p2align 1
 621              	.L37:
 147:main.c        ****             {
 148:main.c        ****                 case 0:
 149:main.c        ****                     if(rxData=='{' )
 622              		.loc 1 149 0
 623 009c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 624 009e 7B2B     		cmp	r3, #123
 625 00a0 40F01581 		bne	.L65
 626              	.LBB7:
 150:main.c        ****                     {
 151:main.c        ****                         //aaaa
 152:main.c        ****                         for(int pp=1;pp<20;pp++){
 627              		.loc 1 152 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 15


 628 00a4 0123     		movs	r3, #1
 629 00a6 7B60     		str	r3, [r7, #4]
 630 00a8 07E0     		b	.L46
 631              	.L47:
 153:main.c        ****                             temp[pp] = ' ';
 632              		.loc 1 153 0 discriminator 3
 633 00aa 784A     		ldr	r2, .L67+28
 634 00ac 7B68     		ldr	r3, [r7, #4]
 635 00ae 1344     		add	r3, r3, r2
 636 00b0 2022     		movs	r2, #32
 637 00b2 1A70     		strb	r2, [r3]
 152:main.c        ****                             temp[pp] = ' ';
 638              		.loc 1 152 0 discriminator 3
 639 00b4 7B68     		ldr	r3, [r7, #4]
 640 00b6 0133     		adds	r3, r3, #1
 641 00b8 7B60     		str	r3, [r7, #4]
 642              	.L46:
 152:main.c        ****                             temp[pp] = ' ';
 643              		.loc 1 152 0 is_stmt 0 discriminator 1
 644 00ba 7B68     		ldr	r3, [r7, #4]
 645 00bc 132B     		cmp	r3, #19
 646 00be F4DD     		ble	.L47
 647              	.LBE7:
 154:main.c        ****                         }
 155:main.c        ****                         temp[0] = '\0';
 648              		.loc 1 155 0 is_stmt 1
 649 00c0 724B     		ldr	r3, .L67+28
 650 00c2 0022     		movs	r2, #0
 651 00c4 1A70     		strb	r2, [r3]
 156:main.c        ****                         data_read_mode++;
 652              		.loc 1 156 0
 653 00c6 704B     		ldr	r3, .L67+24
 654 00c8 1B68     		ldr	r3, [r3]
 655 00ca 0133     		adds	r3, r3, #1
 656 00cc 6E4A     		ldr	r2, .L67+24
 657 00ce 1360     		str	r3, [r2]
 157:main.c        ****                     }
 158:main.c        ****                 break;
 658              		.loc 1 158 0
 659 00d0 FDE0     		b	.L65
 660              	.L39:
 159:main.c        ****                 case 1:
 160:main.c        ****                     if(rxData=='x'){
 661              		.loc 1 160 0
 662 00d2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 663 00d4 782B     		cmp	r3, #120
 664 00d6 03D1     		bne	.L48
 161:main.c        ****                         data_read_mode = 2;}
 665              		.loc 1 161 0
 666 00d8 6B4B     		ldr	r3, .L67+24
 667 00da 0222     		movs	r2, #2
 668 00dc 1A60     		str	r2, [r3]
 162:main.c        ****                     else if(rxData=='p'){
 163:main.c        ****                         data_read_mode = 3;}
 164:main.c        ****                     else if(rxData=='i'){
 165:main.c        ****                         data_read_mode = 4;}
 166:main.c        ****                     else if(rxData=='d'){
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 16


 167:main.c        ****                         data_read_mode = 5;}
 168:main.c        ****                     else if(rxData=='c'){
 169:main.c        ****                         data_read_mode = 6;}
 170:main.c        ****                 break;
 669              		.loc 1 170 0
 670 00de F8E0     		b	.L66
 671              	.L48:
 162:main.c        ****                     else if(rxData=='p'){
 672              		.loc 1 162 0
 673 00e0 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 674 00e2 702B     		cmp	r3, #112
 675 00e4 03D1     		bne	.L50
 163:main.c        ****                     else if(rxData=='i'){
 676              		.loc 1 163 0
 677 00e6 684B     		ldr	r3, .L67+24
 678 00e8 0322     		movs	r2, #3
 679 00ea 1A60     		str	r2, [r3]
 680              		.loc 1 170 0
 681 00ec F1E0     		b	.L66
 682              	.L50:
 164:main.c        ****                         data_read_mode = 4;}
 683              		.loc 1 164 0
 684 00ee BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 685 00f0 692B     		cmp	r3, #105
 686 00f2 03D1     		bne	.L51
 165:main.c        ****                     else if(rxData=='d'){
 687              		.loc 1 165 0
 688 00f4 644B     		ldr	r3, .L67+24
 689 00f6 0422     		movs	r2, #4
 690 00f8 1A60     		str	r2, [r3]
 691              		.loc 1 170 0
 692 00fa EAE0     		b	.L66
 693              	.L51:
 166:main.c        ****                         data_read_mode = 5;}
 694              		.loc 1 166 0
 695 00fc BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 696 00fe 642B     		cmp	r3, #100
 697 0100 03D1     		bne	.L52
 167:main.c        ****                     else if(rxData=='c'){
 698              		.loc 1 167 0
 699 0102 614B     		ldr	r3, .L67+24
 700 0104 0522     		movs	r2, #5
 701 0106 1A60     		str	r2, [r3]
 702              		.loc 1 170 0
 703 0108 E3E0     		b	.L66
 704              	.L52:
 168:main.c        ****                         data_read_mode = 6;}
 705              		.loc 1 168 0
 706 010a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 707 010c 632B     		cmp	r3, #99
 708 010e 40F0E080 		bne	.L66
 169:main.c        ****                 break;
 709              		.loc 1 169 0
 710 0112 5D4B     		ldr	r3, .L67+24
 711 0114 0622     		movs	r2, #6
 712 0116 1A60     		str	r2, [r3]
 713              		.loc 1 170 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 17


 714 0118 DBE0     		b	.L66
 715              	.L40:
 171:main.c        ****                 case 2: //x
 172:main.c        ****                     if(rxData != '}'){
 716              		.loc 1 172 0
 717 011a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 718 011c 7D2B     		cmp	r3, #125
 719 011e 0AD0     		beq	.L53
 173:main.c        ****                         temp[nn] = rxData;
 720              		.loc 1 173 0
 721 0120 5B4B     		ldr	r3, .L67+32
 722 0122 1B68     		ldr	r3, [r3]
 723 0124 5949     		ldr	r1, .L67+28
 724 0126 BA78     		ldrb	r2, [r7, #2]
 725 0128 CA54     		strb	r2, [r1, r3]
 174:main.c        ****                         nn++;
 726              		.loc 1 174 0
 727 012a 594B     		ldr	r3, .L67+32
 728 012c 1B68     		ldr	r3, [r3]
 729 012e 0133     		adds	r3, r3, #1
 730 0130 574A     		ldr	r2, .L67+32
 731 0132 1360     		str	r3, [r2]
 175:main.c        ****                     }
 176:main.c        ****                     else {
 177:main.c        ****                         new_pos[cyl_no] = (int) strtol(temp, (char **)NULL, 10);
 178:main.c        ****                         if(new_pos[cyl_no]==0){
 179:main.c        ****                             new_pos[cyl_no] = pos[cyl_no];
 180:main.c        ****                         }
 181:main.c        ****                         new_pos_set[cyl_no] = 1;
 182:main.c        ****                         nn=0; 
 183:main.c        ****                         temp[0] = '\0';
 184:main.c        ****                         data_read_mode = 0;
 185:main.c        ****                         
 186:main.c        ****                     }
 187:main.c        ****                   
 188:main.c        ****                 break;
 732              		.loc 1 188 0
 733 0134 CEE0     		b	.L33
 734              	.L53:
 177:main.c        ****                         if(new_pos[cyl_no]==0){
 735              		.loc 1 177 0
 736 0136 574B     		ldr	r3, .L67+36
 737 0138 1C68     		ldr	r4, [r3]
 738 013a 0A22     		movs	r2, #10
 739 013c 0021     		movs	r1, #0
 740 013e 5348     		ldr	r0, .L67+28
 741 0140 FFF7FEFF 		bl	strtol
 742 0144 0246     		mov	r2, r0
 743 0146 544B     		ldr	r3, .L67+40
 744 0148 43F82420 		str	r2, [r3, r4, lsl #2]
 178:main.c        ****                             new_pos[cyl_no] = pos[cyl_no];
 745              		.loc 1 178 0
 746 014c 514B     		ldr	r3, .L67+36
 747 014e 1B68     		ldr	r3, [r3]
 748 0150 514A     		ldr	r2, .L67+40
 749 0152 52F82330 		ldr	r3, [r2, r3, lsl #2]
 750 0156 002B     		cmp	r3, #0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 18


 751 0158 09D1     		bne	.L55
 179:main.c        ****                         }
 752              		.loc 1 179 0
 753 015a 4E4B     		ldr	r3, .L67+36
 754 015c 1B68     		ldr	r3, [r3]
 755 015e 4D4A     		ldr	r2, .L67+36
 756 0160 1268     		ldr	r2, [r2]
 757 0162 4E49     		ldr	r1, .L67+44
 758 0164 51F82220 		ldr	r2, [r1, r2, lsl #2]
 759 0168 4B49     		ldr	r1, .L67+40
 760 016a 41F82320 		str	r2, [r1, r3, lsl #2]
 761              	.L55:
 181:main.c        ****                         nn=0; 
 762              		.loc 1 181 0
 763 016e 494B     		ldr	r3, .L67+36
 764 0170 1B68     		ldr	r3, [r3]
 765 0172 4B4A     		ldr	r2, .L67+48
 766 0174 0121     		movs	r1, #1
 767 0176 42F82310 		str	r1, [r2, r3, lsl #2]
 182:main.c        ****                         temp[0] = '\0';
 768              		.loc 1 182 0
 769 017a 454B     		ldr	r3, .L67+32
 770 017c 0022     		movs	r2, #0
 771 017e 1A60     		str	r2, [r3]
 183:main.c        ****                         data_read_mode = 0;
 772              		.loc 1 183 0
 773 0180 424B     		ldr	r3, .L67+28
 774 0182 0022     		movs	r2, #0
 775 0184 1A70     		strb	r2, [r3]
 184:main.c        ****                         
 776              		.loc 1 184 0
 777 0186 404B     		ldr	r3, .L67+24
 778 0188 0022     		movs	r2, #0
 779 018a 1A60     		str	r2, [r3]
 780              		.loc 1 188 0
 781 018c A2E0     		b	.L33
 782              	.L41:
 189:main.c        ****                 case 3: //p
 190:main.c        ****                     if(rxData != '}'){
 783              		.loc 1 190 0
 784 018e BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 785 0190 7D2B     		cmp	r3, #125
 786 0192 0AD0     		beq	.L56
 191:main.c        ****                         temp[nn] = rxData;
 787              		.loc 1 191 0
 788 0194 3E4B     		ldr	r3, .L67+32
 789 0196 1B68     		ldr	r3, [r3]
 790 0198 3C49     		ldr	r1, .L67+28
 791 019a BA78     		ldrb	r2, [r7, #2]
 792 019c CA54     		strb	r2, [r1, r3]
 192:main.c        ****                         nn++;
 793              		.loc 1 192 0
 794 019e 3C4B     		ldr	r3, .L67+32
 795 01a0 1B68     		ldr	r3, [r3]
 796 01a2 0133     		adds	r3, r3, #1
 797 01a4 3A4A     		ldr	r2, .L67+32
 798 01a6 1360     		str	r3, [r2]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 19


 193:main.c        ****                     }
 194:main.c        ****                     else {
 195:main.c        ****                         pid[0] = strtod(temp, NULL);
 196:main.c        ****                         nn=0;
 197:main.c        ****                         temp[0] = '\0';
 198:main.c        ****                         data_read_mode = 0;
 199:main.c        ****                     }
 200:main.c        ****                     
 201:main.c        ****                 break;
 799              		.loc 1 201 0
 800 01a8 94E0     		b	.L33
 801              	.L56:
 195:main.c        ****                         nn=0;
 802              		.loc 1 195 0
 803 01aa 0021     		movs	r1, #0
 804 01ac 3748     		ldr	r0, .L67+28
 805 01ae FFF7FEFF 		bl	strtod
 806 01b2 0346     		mov	r3, r0
 807 01b4 0C46     		mov	r4, r1
 808 01b6 3B4A     		ldr	r2, .L67+52
 809 01b8 C2E90034 		strd	r3, [r2]
 196:main.c        ****                         temp[0] = '\0';
 810              		.loc 1 196 0
 811 01bc 344B     		ldr	r3, .L67+32
 812 01be 0022     		movs	r2, #0
 813 01c0 1A60     		str	r2, [r3]
 197:main.c        ****                         data_read_mode = 0;
 814              		.loc 1 197 0
 815 01c2 324B     		ldr	r3, .L67+28
 816 01c4 0022     		movs	r2, #0
 817 01c6 1A70     		strb	r2, [r3]
 198:main.c        ****                     }
 818              		.loc 1 198 0
 819 01c8 2F4B     		ldr	r3, .L67+24
 820 01ca 0022     		movs	r2, #0
 821 01cc 1A60     		str	r2, [r3]
 822              		.loc 1 201 0
 823 01ce 81E0     		b	.L33
 824              	.L42:
 202:main.c        ****                 case 4: //i
 203:main.c        ****                     if(rxData != '}'){
 825              		.loc 1 203 0
 826 01d0 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 827 01d2 7D2B     		cmp	r3, #125
 828 01d4 0AD0     		beq	.L58
 204:main.c        ****                         temp[nn] = rxData;
 829              		.loc 1 204 0
 830 01d6 2E4B     		ldr	r3, .L67+32
 831 01d8 1B68     		ldr	r3, [r3]
 832 01da 2C49     		ldr	r1, .L67+28
 833 01dc BA78     		ldrb	r2, [r7, #2]
 834 01de CA54     		strb	r2, [r1, r3]
 205:main.c        ****                         nn++;
 835              		.loc 1 205 0
 836 01e0 2B4B     		ldr	r3, .L67+32
 837 01e2 1B68     		ldr	r3, [r3]
 838 01e4 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 20


 839 01e6 2A4A     		ldr	r2, .L67+32
 840 01e8 1360     		str	r3, [r2]
 206:main.c        ****                     }
 207:main.c        ****                     else {
 208:main.c        ****                         pid[1] = strtod(temp, NULL);
 209:main.c        ****                         nn=0;
 210:main.c        ****                         temp[0] = '\0';
 211:main.c        ****                         data_read_mode = 0;
 212:main.c        ****                     }
 213:main.c        ****                 break;
 841              		.loc 1 213 0
 842 01ea 73E0     		b	.L33
 843              	.L58:
 208:main.c        ****                         nn=0;
 844              		.loc 1 208 0
 845 01ec 0021     		movs	r1, #0
 846 01ee 2748     		ldr	r0, .L67+28
 847 01f0 FFF7FEFF 		bl	strtod
 848 01f4 0346     		mov	r3, r0
 849 01f6 0C46     		mov	r4, r1
 850 01f8 2A4A     		ldr	r2, .L67+52
 851 01fa C2E90234 		strd	r3, [r2, #8]
 209:main.c        ****                         temp[0] = '\0';
 852              		.loc 1 209 0
 853 01fe 244B     		ldr	r3, .L67+32
 854 0200 0022     		movs	r2, #0
 855 0202 1A60     		str	r2, [r3]
 210:main.c        ****                         data_read_mode = 0;
 856              		.loc 1 210 0
 857 0204 214B     		ldr	r3, .L67+28
 858 0206 0022     		movs	r2, #0
 859 0208 1A70     		strb	r2, [r3]
 211:main.c        ****                     }
 860              		.loc 1 211 0
 861 020a 1F4B     		ldr	r3, .L67+24
 862 020c 0022     		movs	r2, #0
 863 020e 1A60     		str	r2, [r3]
 864              		.loc 1 213 0
 865 0210 60E0     		b	.L33
 866              	.L43:
 214:main.c        ****                 case 5: //d
 215:main.c        ****                     if(rxData != '}'){
 867              		.loc 1 215 0
 868 0212 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 869 0214 7D2B     		cmp	r3, #125
 870 0216 0AD0     		beq	.L60
 216:main.c        ****                         temp[nn] = rxData;
 871              		.loc 1 216 0
 872 0218 1D4B     		ldr	r3, .L67+32
 873 021a 1B68     		ldr	r3, [r3]
 874 021c 1B49     		ldr	r1, .L67+28
 875 021e BA78     		ldrb	r2, [r7, #2]
 876 0220 CA54     		strb	r2, [r1, r3]
 217:main.c        ****                         nn++;
 877              		.loc 1 217 0
 878 0222 1B4B     		ldr	r3, .L67+32
 879 0224 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 21


 880 0226 0133     		adds	r3, r3, #1
 881 0228 194A     		ldr	r2, .L67+32
 882 022a 1360     		str	r3, [r2]
 218:main.c        ****                     }
 219:main.c        ****                     else {
 220:main.c        ****                         pid[2] = strtod(temp, NULL);
 221:main.c        ****                         nn=0;
 222:main.c        ****                         temp[0] = '\0';
 223:main.c        ****                         data_read_mode = 0;
 224:main.c        ****                     }
 225:main.c        ****                 break;
 883              		.loc 1 225 0
 884 022c 52E0     		b	.L33
 885              	.L60:
 220:main.c        ****                         nn=0;
 886              		.loc 1 220 0
 887 022e 0021     		movs	r1, #0
 888 0230 1648     		ldr	r0, .L67+28
 889 0232 FFF7FEFF 		bl	strtod
 890 0236 0346     		mov	r3, r0
 891 0238 0C46     		mov	r4, r1
 892 023a 1A4A     		ldr	r2, .L67+52
 893 023c C2E90434 		strd	r3, [r2, #16]
 221:main.c        ****                         temp[0] = '\0';
 894              		.loc 1 221 0
 895 0240 134B     		ldr	r3, .L67+32
 896 0242 0022     		movs	r2, #0
 897 0244 1A60     		str	r2, [r3]
 222:main.c        ****                         data_read_mode = 0;
 898              		.loc 1 222 0
 899 0246 114B     		ldr	r3, .L67+28
 900 0248 0022     		movs	r2, #0
 901 024a 1A70     		strb	r2, [r3]
 223:main.c        ****                     }
 902              		.loc 1 223 0
 903 024c 0E4B     		ldr	r3, .L67+24
 904 024e 0022     		movs	r2, #0
 905 0250 1A60     		str	r2, [r3]
 906              		.loc 1 225 0
 907 0252 3FE0     		b	.L33
 908              	.L44:
 226:main.c        ****                 case 6: //c
 227:main.c        ****                     if(rxData != '}'){
 909              		.loc 1 227 0
 910 0254 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 911 0256 7D2B     		cmp	r3, #125
 912 0258 26D0     		beq	.L62
 228:main.c        ****                         temp[nn] = rxData;
 913              		.loc 1 228 0
 914 025a 0D4B     		ldr	r3, .L67+32
 915 025c 1B68     		ldr	r3, [r3]
 916 025e 0B49     		ldr	r1, .L67+28
 917 0260 BA78     		ldrb	r2, [r7, #2]
 918 0262 CA54     		strb	r2, [r1, r3]
 229:main.c        ****                         nn++;
 919              		.loc 1 229 0
 920 0264 0A4B     		ldr	r3, .L67+32
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 22


 921 0266 1B68     		ldr	r3, [r3]
 922 0268 0133     		adds	r3, r3, #1
 923 026a 094A     		ldr	r2, .L67+32
 924 026c 1360     		str	r3, [r2]
 230:main.c        ****                     }
 231:main.c        ****                     else {
 232:main.c        ****                         cyl_no = (int) strtol(temp, (char **)NULL, 10);
 233:main.c        ****                         nn=0; 
 234:main.c        ****                         temp[0] = '\0';
 235:main.c        ****                         data_read_mode = 0;
 236:main.c        ****                     }
 237:main.c        ****                   
 238:main.c        ****                 break;
 925              		.loc 1 238 0
 926 026e 31E0     		b	.L33
 927              	.L68:
 928              		.align	2
 929              	.L67:
 930 0270 69650040 		.word	1073767785
 931 0274 00000000 		.word	errorStatus
 932 0278 4A650040 		.word	1073767754
 933 027c 00000000 		.word	tt
 934 0280 00000000 		.word	help
 935 0284 00000000 		.word	start_calib
 936 0288 00000000 		.word	data_read_mode
 937 028c 00000000 		.word	temp
 938 0290 00000000 		.word	nn
 939 0294 00000000 		.word	cyl_no
 940 0298 00000000 		.word	new_pos
 941 029c 00000000 		.word	pos
 942 02a0 00000000 		.word	new_pos_set
 943 02a4 00000000 		.word	pid
 944              	.L62:
 232:main.c        ****                         nn=0; 
 945              		.loc 1 232 0
 946 02a8 0A22     		movs	r2, #10
 947 02aa 0021     		movs	r1, #0
 948 02ac 0E48     		ldr	r0, .L69
 949 02ae FFF7FEFF 		bl	strtol
 950 02b2 0246     		mov	r2, r0
 951 02b4 0D4B     		ldr	r3, .L69+4
 952 02b6 1A60     		str	r2, [r3]
 233:main.c        ****                         temp[0] = '\0';
 953              		.loc 1 233 0
 954 02b8 0D4B     		ldr	r3, .L69+8
 955 02ba 0022     		movs	r2, #0
 956 02bc 1A60     		str	r2, [r3]
 234:main.c        ****                         data_read_mode = 0;
 957              		.loc 1 234 0
 958 02be 0A4B     		ldr	r3, .L69
 959 02c0 0022     		movs	r2, #0
 960 02c2 1A70     		strb	r2, [r3]
 235:main.c        ****                     }
 961              		.loc 1 235 0
 962 02c4 0B4B     		ldr	r3, .L69+12
 963 02c6 0022     		movs	r2, #0
 964 02c8 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 23


 965              		.loc 1 238 0
 966 02ca 00BF     		nop
 967 02cc 02E0     		b	.L33
 968              	.L65:
 158:main.c        ****                 case 1:
 969              		.loc 1 158 0
 970 02ce 00BF     		nop
 971 02d0 00E0     		b	.L33
 972              	.L66:
 170:main.c        ****                 case 2: //x
 973              		.loc 1 170 0
 974 02d2 00BF     		nop
 975              	.L33:
 239:main.c        ****             }
 240:main.c        ****             
 241:main.c        ****             if(errorStatus == 0u)
 242:main.c        ****             {
 243:main.c        ****                 /* Send data backward */
 244:main.c        ****                 //UART_TXDATA_REG = rxData;
 245:main.c        ****             }
 246:main.c        ****         }
 247:main.c        ****     }while((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u);
 976              		.loc 1 247 0
 977 02d4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 978 02d6 03F02003 		and	r3, r3, #32
 979 02da 002B     		cmp	r3, #0
 980 02dc 7FF493AE 		bne	.L64
 248:main.c        **** }
 981              		.loc 1 248 0
 982 02e0 00BF     		nop
 983 02e2 0C37     		adds	r7, r7, #12
 984              		.cfi_def_cfa_offset 12
 985 02e4 BD46     		mov	sp, r7
 986              		.cfi_def_cfa_register 13
 987              		@ sp needed
 988 02e6 90BD     		pop	{r4, r7, pc}
 989              	.L70:
 990              		.align	2
 991              	.L69:
 992 02e8 00000000 		.word	temp
 993 02ec 00000000 		.word	cyl_no
 994 02f0 00000000 		.word	nn
 995 02f4 00000000 		.word	data_read_mode
 996              		.cfi_endproc
 997              	.LFE67:
 998              		.size	RxIsr, .-RxIsr
 999              		.section	.rodata
 1000              		.align	2
 1001              	.LC0:
 1002 0000 25303864 		.ascii	"%08d\011%08.2f\011%08d\011%08.2f\000"
 1002      09253038 
 1002      2E326609 
 1002      25303864 
 1002      09253038 
 1003              		.align	2
 1004              	.LC1:
 1005 0018 25303564 		.ascii	"%05d\011%05d\011%05d\011%05d\011%05d\011%05d\011%05"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 24


 1005      09253035 
 1005      64092530 
 1005      35640925 
 1005      30356409 
 1006 0039 64092530 		.ascii	"d\011%05d\011\000"
 1006      35640900 
 1007              		.global	__aeabi_i2d
 1008              		.global	__aeabi_dsub
 1009              		.global	__aeabi_dmul
 1010              		.global	__aeabi_dadd
 1011              		.global	__aeabi_dcmpgt
 1012              		.global	__aeabi_dcmplt
 1013              		.global	__aeabi_ddiv
 1014              		.global	__aeabi_d2iz
 1015 0041 000000   		.align	2
 1016              	.LC2:
 1017 0044 55505045 		.ascii	"UPPER:\011Lower Offset: %d \011Upper Offset: %d \011"
 1017      523A094C 
 1017      6F776572 
 1017      204F6666 
 1017      7365743A 
 1018 006f 20414443 		.ascii	" ADC Diff: %d\012\000"
 1018      20446966 
 1018      663A2025 
 1018      640A00
 1019 007e 0000     		.align	2
 1020              	.LC3:
 1021 0080 4C4F5745 		.ascii	"LOWER:\011Lower Offset: %d \011Upper Offset: %d \011"
 1021      523A094C 
 1021      6F776572 
 1021      204F6666 
 1021      7365743A 
 1022 00ab 20414443 		.ascii	" ADC Diff: %d\012\000"
 1022      20446966 
 1022      663A2025 
 1022      640A00
 1023 00ba 0000     		.align	2
 1024              	.LC4:
 1025 00bc 4C6F7765 		.ascii	"Lower Offset: %d \011 Upper Offset: %d \012\000"
 1025      72204F66 
 1025      66736574 
 1025      3A202564 
 1025      20092055 
 1026              		.global	__aeabi_ui2d
 1027              		.section	.text.main,"ax",%progbits
 1028              		.align	2
 1029              		.global	main
 1030              		.thumb
 1031              		.thumb_func
 1032              		.type	main, %function
 1033              	main:
 1034              	.LFB68:
 249:main.c        **** 
 250:main.c        **** int main()
 251:main.c        **** {
 1035              		.loc 1 251 0
 1036              		.cfi_startproc
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 25


 1037              		@ args = 0, pretend = 0, frame = 64
 1038              		@ frame_needed = 1, uses_anonymous_args = 0
 1039 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1040              		.cfi_def_cfa_offset 20
 1041              		.cfi_offset 4, -20
 1042              		.cfi_offset 5, -16
 1043              		.cfi_offset 6, -12
 1044              		.cfi_offset 7, -8
 1045              		.cfi_offset 14, -4
 1046 0002 97B0     		sub	sp, sp, #92
 1047              		.cfi_def_cfa_offset 112
 1048 0004 06AF     		add	r7, sp, #24
 1049              		.cfi_def_cfa 7, 88
 252:main.c        ****     
 253:main.c        ****     EEPROM_Start();
 1050              		.loc 1 253 0
 1051 0006 FFF7FEFF 		bl	EEPROM_Start
 254:main.c        ****     EEPROM_UpdateTemperature();
 1052              		.loc 1 254 0
 1053 000a FFF7FEFF 		bl	EEPROM_UpdateTemperature
 255:main.c        ****     psoc_id = EEPROM_ReadByte(PSOC_ID_BYTE_ADDRESS);
 1054              		.loc 1 255 0
 1055 000e 2020     		movs	r0, #32
 1056 0010 FFF7FEFF 		bl	EEPROM_ReadByte
 1057 0014 0346     		mov	r3, r0
 1058 0016 1A46     		mov	r2, r3
 1059 0018 794B     		ldr	r3, .L101+8
 1060 001a 1A60     		str	r2, [r3]
 256:main.c        ****     switch(psoc_id){
 1061              		.loc 1 256 0
 1062 001c 784B     		ldr	r3, .L101+8
 1063 001e 1B68     		ldr	r3, [r3]
 1064 0020 102B     		cmp	r3, #16
 1065 0022 02D0     		beq	.L73
 1066 0024 112B     		cmp	r3, #17
 1067 0026 19D0     		beq	.L74
 1068 0028 31E0     		b	.L72
 1069              	.L73:
 257:main.c        ****         case 16:
 258:main.c        ****             offsets[0][0] = 125;offsets[0][1] = 179;
 1070              		.loc 1 258 0
 1071 002a 764B     		ldr	r3, .L101+12
 1072 002c 7D22     		movs	r2, #125
 1073 002e 1A60     		str	r2, [r3]
 1074 0030 744B     		ldr	r3, .L101+12
 1075 0032 B322     		movs	r2, #179
 1076 0034 5A60     		str	r2, [r3, #4]
 259:main.c        ****             offsets[1][0] = 132;offsets[1][1] = 176;
 1077              		.loc 1 259 0
 1078 0036 734B     		ldr	r3, .L101+12
 1079 0038 8422     		movs	r2, #132
 1080 003a 9A60     		str	r2, [r3, #8]
 1081 003c 714B     		ldr	r3, .L101+12
 1082 003e B022     		movs	r2, #176
 1083 0040 DA60     		str	r2, [r3, #12]
 260:main.c        ****             offsets[2][0] = 165;offsets[2][1] = 165;
 1084              		.loc 1 260 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 26


 1085 0042 704B     		ldr	r3, .L101+12
 1086 0044 A522     		movs	r2, #165
 1087 0046 1A61     		str	r2, [r3, #16]
 1088 0048 6E4B     		ldr	r3, .L101+12
 1089 004a A522     		movs	r2, #165
 1090 004c 5A61     		str	r2, [r3, #20]
 261:main.c        ****             offsets[3][0] = 180;offsets[3][1] = 180;
 1091              		.loc 1 261 0
 1092 004e 6D4B     		ldr	r3, .L101+12
 1093 0050 B422     		movs	r2, #180
 1094 0052 9A61     		str	r2, [r3, #24]
 1095 0054 6B4B     		ldr	r3, .L101+12
 1096 0056 B422     		movs	r2, #180
 1097 0058 DA61     		str	r2, [r3, #28]
 262:main.c        ****             break;
 1098              		.loc 1 262 0
 1099 005a 18E0     		b	.L72
 1100              	.L74:
 263:main.c        ****         case 17:
 264:main.c        ****             offsets[0][0] = 125;offsets[0][1] = 179;
 1101              		.loc 1 264 0
 1102 005c 694B     		ldr	r3, .L101+12
 1103 005e 7D22     		movs	r2, #125
 1104 0060 1A60     		str	r2, [r3]
 1105 0062 684B     		ldr	r3, .L101+12
 1106 0064 B322     		movs	r2, #179
 1107 0066 5A60     		str	r2, [r3, #4]
 265:main.c        ****             offsets[1][0] = 132;offsets[1][1] = 176;
 1108              		.loc 1 265 0
 1109 0068 664B     		ldr	r3, .L101+12
 1110 006a 8422     		movs	r2, #132
 1111 006c 9A60     		str	r2, [r3, #8]
 1112 006e 654B     		ldr	r3, .L101+12
 1113 0070 B022     		movs	r2, #176
 1114 0072 DA60     		str	r2, [r3, #12]
 266:main.c        ****             offsets[2][0] = 185;offsets[2][1] = 172;
 1115              		.loc 1 266 0
 1116 0074 634B     		ldr	r3, .L101+12
 1117 0076 B922     		movs	r2, #185
 1118 0078 1A61     		str	r2, [r3, #16]
 1119 007a 624B     		ldr	r3, .L101+12
 1120 007c AC22     		movs	r2, #172
 1121 007e 5A61     		str	r2, [r3, #20]
 267:main.c        ****             offsets[3][0] = 195;offsets[3][1] = 169;
 1122              		.loc 1 267 0
 1123 0080 604B     		ldr	r3, .L101+12
 1124 0082 C322     		movs	r2, #195
 1125 0084 9A61     		str	r2, [r3, #24]
 1126 0086 5F4B     		ldr	r3, .L101+12
 1127 0088 A922     		movs	r2, #169
 1128 008a DA61     		str	r2, [r3, #28]
 268:main.c        ****             break;
 1129              		.loc 1 268 0
 1130 008c 00BF     		nop
 1131              	.L72:
 1132              	.LBB8:
 269:main.c        ****     }
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 27


 270:main.c        ****     
 271:main.c        ****     //initializing variables
 272:main.c        ****     for(int g = 0;g<CYL_NO;g++){
 1133              		.loc 1 272 0
 1134 008e 0023     		movs	r3, #0
 1135 0090 FB63     		str	r3, [r7, #60]
 1136 0092 49E0     		b	.L75
 1137              	.L76:
 273:main.c        ****         new_pos_set[g]  = 0;
 1138              		.loc 1 273 0 discriminator 3
 1139 0094 5C4A     		ldr	r2, .L101+16
 1140 0096 FB6B     		ldr	r3, [r7, #60]
 1141 0098 0021     		movs	r1, #0
 1142 009a 42F82310 		str	r1, [r2, r3, lsl #2]
 274:main.c        ****         new_pos[g]      = 0;
 1143              		.loc 1 274 0 discriminator 3
 1144 009e 5B4A     		ldr	r2, .L101+20
 1145 00a0 FB6B     		ldr	r3, [r7, #60]
 1146 00a2 0021     		movs	r1, #0
 1147 00a4 42F82310 		str	r1, [r2, r3, lsl #2]
 275:main.c        ****         pos[g]          = 1300;
 1148              		.loc 1 275 0 discriminator 3
 1149 00a8 594A     		ldr	r2, .L101+24
 1150 00aa FB6B     		ldr	r3, [r7, #60]
 1151 00ac 40F21451 		movw	r1, #1300
 1152 00b0 42F82310 		str	r1, [r2, r3, lsl #2]
 276:main.c        ****         pulse[g]        = 0;
 1153              		.loc 1 276 0 discriminator 3
 1154 00b4 574A     		ldr	r2, .L101+28
 1155 00b6 FB6B     		ldr	r3, [r7, #60]
 1156 00b8 0021     		movs	r1, #0
 1157 00ba 42F82310 		str	r1, [r2, r3, lsl #2]
 277:main.c        ****         pulse_temp[g]   = 0;
 1158              		.loc 1 277 0 discriminator 3
 1159 00be 564A     		ldr	r2, .L101+32
 1160 00c0 FB6B     		ldr	r3, [r7, #60]
 1161 00c2 0021     		movs	r1, #0
 1162 00c4 42F82310 		str	r1, [r2, r3, lsl #2]
 278:main.c        ****         err[g]          = 0;
 1163              		.loc 1 278 0 discriminator 3
 1164 00c8 544A     		ldr	r2, .L101+36
 1165 00ca FB6B     		ldr	r3, [r7, #60]
 1166 00cc DB00     		lsls	r3, r3, #3
 1167 00ce 1A44     		add	r2, r2, r3
 1168 00d0 4FF00003 		mov	r3, #0
 1169 00d4 4FF00004 		mov	r4, #0
 1170 00d8 C2E90034 		strd	r3, [r2]
 279:main.c        ****         adcValue[g]     = 0;
 1171              		.loc 1 279 0 discriminator 3
 1172 00dc 504A     		ldr	r2, .L101+40
 1173 00de FB6B     		ldr	r3, [r7, #60]
 1174 00e0 0021     		movs	r1, #0
 1175 00e2 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 280:main.c        ****         der[g]          = 0;
 1176              		.loc 1 280 0 discriminator 3
 1177 00e6 4F4A     		ldr	r2, .L101+44
 1178 00e8 FB6B     		ldr	r3, [r7, #60]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 28


 1179 00ea DB00     		lsls	r3, r3, #3
 1180 00ec 1A44     		add	r2, r2, r3
 1181 00ee 4FF00003 		mov	r3, #0
 1182 00f2 4FF00004 		mov	r4, #0
 1183 00f6 C2E90034 		strd	r3, [r2]
 281:main.c        ****         prev_err[g]     = 0;
 1184              		.loc 1 281 0 discriminator 3
 1185 00fa 4B4A     		ldr	r2, .L101+48
 1186 00fc FB6B     		ldr	r3, [r7, #60]
 1187 00fe DB00     		lsls	r3, r3, #3
 1188 0100 1A44     		add	r2, r2, r3
 1189 0102 4FF00003 		mov	r3, #0
 1190 0106 4FF00004 		mov	r4, #0
 1191 010a C2E90034 		strd	r3, [r2]
 282:main.c        ****         pid_integral[g] = 0;
 1192              		.loc 1 282 0 discriminator 3
 1193 010e 474A     		ldr	r2, .L101+52
 1194 0110 FB6B     		ldr	r3, [r7, #60]
 1195 0112 DB00     		lsls	r3, r3, #3
 1196 0114 1A44     		add	r2, r2, r3
 1197 0116 4FF00003 		mov	r3, #0
 1198 011a 4FF00004 		mov	r4, #0
 1199 011e C2E90034 		strd	r3, [r2]
 272:main.c        ****         new_pos_set[g]  = 0;
 1200              		.loc 1 272 0 discriminator 3
 1201 0122 FB6B     		ldr	r3, [r7, #60]
 1202 0124 0133     		adds	r3, r3, #1
 1203 0126 FB63     		str	r3, [r7, #60]
 1204              	.L75:
 272:main.c        ****         new_pos_set[g]  = 0;
 1205              		.loc 1 272 0 is_stmt 0 discriminator 1
 1206 0128 FB6B     		ldr	r3, [r7, #60]
 1207 012a 032B     		cmp	r3, #3
 1208 012c B2DD     		ble	.L76
 1209              	.LBE8:
 283:main.c        ****     }
 284:main.c        ****     //PWM variables
 285:main.c        ****     PWM_0_Start();
 1210              		.loc 1 285 0 is_stmt 1
 1211 012e FFF7FEFF 		bl	PWM_0_Start
 286:main.c        ****     PWM_1_Start();
 1212              		.loc 1 286 0
 1213 0132 FFF7FEFF 		bl	PWM_1_Start
 287:main.c        ****     PWM_2_Start();
 1214              		.loc 1 287 0
 1215 0136 FFF7FEFF 		bl	PWM_2_Start
 288:main.c        ****     PWM_3_Start();
 1216              		.loc 1 288 0
 1217 013a FFF7FEFF 		bl	PWM_3_Start
 289:main.c        ****     ADC_0_Start();
 1218              		.loc 1 289 0
 1219 013e FFF7FEFF 		bl	ADC_0_Start
 290:main.c        ****     ADC_0_StartConvert();
 1220              		.loc 1 290 0
 1221 0142 FFF7FEFF 		bl	ADC_0_StartConvert
 291:main.c        ****     AMux_0_Init();
 1222              		.loc 1 291 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 29


 1223 0146 FFF7FEFF 		bl	AMux_0_Start
 292:main.c        ****     
 293:main.c        ****     UART_Start();           /* Start communication component */
 1224              		.loc 1 293 0
 1225 014a FFF7FEFF 		bl	UART_Start
 294:main.c        **** 
 295:main.c        **** #if(INTERRUPT_CODE_ENABLED == ENABLED)
 296:main.c        ****     isr_rx_StartEx(RxIsr);
 1226              		.loc 1 296 0
 1227 014e 3848     		ldr	r0, .L101+56
 1228 0150 FFF7FEFF 		bl	isr_rx_StartEx
 297:main.c        ****     update_median_isr_StartEx(adc_update);
 1229              		.loc 1 297 0
 1230 0154 3748     		ldr	r0, .L101+60
 1231 0156 FFF7FEFF 		bl	update_median_isr_StartEx
 298:main.c        **** #endif /* INTERRUPT_CODE_ENABLED == ENABLED */
 299:main.c        ****     
 300:main.c        ****     CyGlobalIntEnable;      /* Enable global interrupts. */
 1232              		.loc 1 300 0
 1233              		.syntax unified
 1234              	@ 300 "main.c" 1
 1235 015a 62B6     		CPSIE   i
 1236              	@ 0 "" 2
 301:main.c        ****     
 302:main.c        ****     double dt;
 303:main.c        ****     double time;
 304:main.c        ****     
 305:main.c        ****     dt = 0.025; //initialised dt, corrected by timer  below
 1237              		.loc 1 305 0
 1238              		.thumb
 1239              		.syntax unified
 1240 015c 26A4     		adr	r4, .L101
 1241 015e D4E90034 		ldrd	r3, [r4]
 1242 0162 C7E90C34 		strd	r3, [r7, #48]
 306:main.c        **** 
 307:main.c        ****     sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[1],err[1]);
 1243              		.loc 1 307 0
 1244 0166 2E4B     		ldr	r3, .L101+40
 1245 0168 1B88     		ldrh	r3, [r3]
 1246 016a 1D46     		mov	r5, r3
 1247 016c 2B4B     		ldr	r3, .L101+36
 1248 016e 18CB     		ldmia	r3, {r3-r4}
 1249 0170 2B4A     		ldr	r2, .L101+40
 1250 0172 5288     		ldrh	r2, [r2, #2]
 1251 0174 1046     		mov	r0, r2
 1252 0176 294A     		ldr	r2, .L101+36
 1253 0178 D2E90212 		ldrd	r1, [r2, #8]
 1254 017c CDE90412 		strd	r1, [sp, #16]
 1255 0180 0290     		str	r0, [sp, #8]
 1256 0182 CDE90034 		strd	r3, [sp]
 1257 0186 2A46     		mov	r2, r5
 1258 0188 2B49     		ldr	r1, .L101+64
 1259 018a 2C48     		ldr	r0, .L101+68
 1260 018c FFF7FEFF 		bl	sprintf
 308:main.c        ****     UART_PutString(sendValue);
 1261              		.loc 1 308 0
 1262 0190 2A48     		ldr	r0, .L101+68
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 30


 1263 0192 FFF7FEFF 		bl	UART_PutString
 309:main.c        ****     
 310:main.c        ****     median_timer_Start();
 1264              		.loc 1 310 0
 1265 0196 FFF7FEFF 		bl	median_timer_Start
 311:main.c        ****     Timer_1_Start();
 1266              		.loc 1 311 0
 1267 019a FFF7FEFF 		bl	Timer_1_Start
 1268              	.L97:
 312:main.c        ****     
 313:main.c        ****     for(;;)
 314:main.c        ****     {
 315:main.c        ****         /*for(;;){
 316:main.c        ****             for(int i = 0;i<4;i++){
 317:main.c        ****                 writePWM(i,499);
 318:main.c        ****             }
 319:main.c        ****                 CyDelay(500);
 320:main.c        ****                 for(int i = 0;i<4;i++){
 321:main.c        ****                 writePWM(i,-499);
 322:main.c        ****             }
 323:main.c        ****                 CyDelay(500);
 324:main.c        ****                 for(int i = 0;i<4;i++){
 325:main.c        ****                 writePWM(i,0);
 326:main.c        ****             }
 327:main.c        ****                 CyDelay(1000);
 328:main.c        ****         }*/
 329:main.c        ****         
 330:main.c        ****         Timer_1_WriteCounter(65535);
 1269              		.loc 1 330 0
 1270 019e 4FF6FF70 		movw	r0, #65535
 1271 01a2 FFF7FEFF 		bl	Timer_1_WriteCounter
 331:main.c        ****         //sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[1],err[1]);
 332:main.c        ****         sprintf(sendValue,"%05d\t%05d\t%05d\t%05d\t%05d\t%05d\t%05d\t%05d\t",adcValue[0],adcValue[1
 1272              		.loc 1 332 0
 1273 01a6 1E4B     		ldr	r3, .L101+40
 1274 01a8 1B88     		ldrh	r3, [r3]
 1275 01aa 1E46     		mov	r6, r3
 1276 01ac 1C4B     		ldr	r3, .L101+40
 1277 01ae 5B88     		ldrh	r3, [r3, #2]
 1278 01b0 9E46     		mov	lr, r3
 1279 01b2 1B4B     		ldr	r3, .L101+40
 1280 01b4 9B88     		ldrh	r3, [r3, #4]
 1281 01b6 1C46     		mov	r4, r3
 1282 01b8 194B     		ldr	r3, .L101+40
 1283 01ba DB88     		ldrh	r3, [r3, #6]
 1284 01bc 1D46     		mov	r5, r3
 1285 01be 144B     		ldr	r3, .L101+24
 1286 01c0 1B68     		ldr	r3, [r3]
 1287 01c2 134A     		ldr	r2, .L101+24
 1288 01c4 5268     		ldr	r2, [r2, #4]
 1289 01c6 1249     		ldr	r1, .L101+24
 1290 01c8 8968     		ldr	r1, [r1, #8]
 1291 01ca 1148     		ldr	r0, .L101+24
 1292 01cc C068     		ldr	r0, [r0, #12]
 1293 01ce 0590     		str	r0, [sp, #20]
 1294 01d0 0491     		str	r1, [sp, #16]
 1295 01d2 0392     		str	r2, [sp, #12]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 31


 1296 01d4 0293     		str	r3, [sp, #8]
 1297 01d6 0195     		str	r5, [sp, #4]
 1298 01d8 0094     		str	r4, [sp]
 1299 01da 7346     		mov	r3, lr
 1300 01dc 3246     		mov	r2, r6
 1301 01de 1849     		ldr	r1, .L101+72
 1302 01e0 1648     		ldr	r0, .L101+68
 1303 01e2 FFF7FEFF 		bl	sprintf
 333:main.c        ****         
 334:main.c        ****         UART_PutString(sendValue);
 1304              		.loc 1 334 0
 1305 01e6 1548     		ldr	r0, .L101+68
 1306 01e8 FFF7FEFF 		bl	UART_PutString
 1307              	.LBB9:
 335:main.c        ****         //sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[1],err[1]);
 336:main.c        ****         //UART_PutString(sendValue);
 337:main.c        ****         /* START PID CODE */
 338:main.c        ****         for(int cyl = 0;cyl<CYL_NO;cyl++){
 1308              		.loc 1 338 0
 1309 01ec 0023     		movs	r3, #0
 1310 01ee FB62     		str	r3, [r7, #44]
 1311 01f0 2FE1     		b	.L77
 1312              	.L102:
 1313 01f2 00BFAFF3 		.align	3
 1313      0080
 1314              	.L101:
 1315 01f8 9A999999 		.word	-1717986918
 1316 01fc 9999993F 		.word	1067030937
 1317 0200 00000000 		.word	psoc_id
 1318 0204 00000000 		.word	offsets
 1319 0208 00000000 		.word	new_pos_set
 1320 020c 00000000 		.word	new_pos
 1321 0210 00000000 		.word	pos
 1322 0214 00000000 		.word	pulse
 1323 0218 00000000 		.word	pulse_temp
 1324 021c 00000000 		.word	err
 1325 0220 00000000 		.word	adcValue
 1326 0224 00000000 		.word	der
 1327 0228 00000000 		.word	prev_err
 1328 022c 00000000 		.word	pid_integral
 1329 0230 00000000 		.word	RxIsr
 1330 0234 00000000 		.word	adc_update
 1331 0238 00000000 		.word	.LC0
 1332 023c 00000000 		.word	sendValue
 1333 0240 18000000 		.word	.LC1
 1334              	.L83:
 339:main.c        ****             if(new_pos_set[cyl]){
 1335              		.loc 1 339 0
 1336 0244 9E4A     		ldr	r2, .L103+16
 1337 0246 FB6A     		ldr	r3, [r7, #44]
 1338 0248 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1339 024c 002B     		cmp	r3, #0
 1340 024e 0CD0     		beq	.L78
 340:main.c        ****                 pos[cyl] = new_pos[cyl];
 1341              		.loc 1 340 0
 1342 0250 9C4A     		ldr	r2, .L103+20
 1343 0252 FB6A     		ldr	r3, [r7, #44]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 32


 1344 0254 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1345 0258 9B49     		ldr	r1, .L103+24
 1346 025a FB6A     		ldr	r3, [r7, #44]
 1347 025c 41F82320 		str	r2, [r1, r3, lsl #2]
 341:main.c        ****                 new_pos_set[cyl] = 0;
 1348              		.loc 1 341 0
 1349 0260 974A     		ldr	r2, .L103+16
 1350 0262 FB6A     		ldr	r3, [r7, #44]
 1351 0264 0021     		movs	r1, #0
 1352 0266 42F82310 		str	r1, [r2, r3, lsl #2]
 1353              	.L78:
 342:main.c        ****             }
 343:main.c        ****             
 344:main.c        ****             err[cyl] = -pos[cyl] + adcValue[cyl];
 1354              		.loc 1 344 0
 1355 026a 984A     		ldr	r2, .L103+28
 1356 026c FB6A     		ldr	r3, [r7, #44]
 1357 026e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1358 0272 1946     		mov	r1, r3
 1359 0274 944A     		ldr	r2, .L103+24
 1360 0276 FB6A     		ldr	r3, [r7, #44]
 1361 0278 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1362 027c CB1A     		subs	r3, r1, r3
 1363 027e 1846     		mov	r0, r3
 1364 0280 FFF7FEFF 		bl	__aeabi_i2d
 1365 0284 0346     		mov	r3, r0
 1366 0286 0C46     		mov	r4, r1
 1367 0288 9149     		ldr	r1, .L103+32
 1368 028a FA6A     		ldr	r2, [r7, #44]
 1369 028c D200     		lsls	r2, r2, #3
 1370 028e 0A44     		add	r2, r2, r1
 1371 0290 C2E90034 		strd	r3, [r2]
 345:main.c        ****             der[cyl] = err[cyl] - prev_err[cyl];
 1372              		.loc 1 345 0
 1373 0294 8E4A     		ldr	r2, .L103+32
 1374 0296 FB6A     		ldr	r3, [r7, #44]
 1375 0298 DB00     		lsls	r3, r3, #3
 1376 029a 1344     		add	r3, r3, r2
 1377 029c D3E90001 		ldrd	r0, [r3]
 1378 02a0 8C4A     		ldr	r2, .L103+36
 1379 02a2 FB6A     		ldr	r3, [r7, #44]
 1380 02a4 DB00     		lsls	r3, r3, #3
 1381 02a6 1344     		add	r3, r3, r2
 1382 02a8 18CB     		ldmia	r3, {r3-r4}
 1383 02aa 1A46     		mov	r2, r3
 1384 02ac 2346     		mov	r3, r4
 1385 02ae FFF7FEFF 		bl	__aeabi_dsub
 1386 02b2 0346     		mov	r3, r0
 1387 02b4 0C46     		mov	r4, r1
 1388 02b6 8849     		ldr	r1, .L103+40
 1389 02b8 FA6A     		ldr	r2, [r7, #44]
 1390 02ba D200     		lsls	r2, r2, #3
 1391 02bc 0A44     		add	r2, r2, r1
 1392 02be C2E90034 		strd	r3, [r2]
 346:main.c        ****             pid_integral[cyl] = err[cyl]* dt + pid_integral[cyl];
 1393              		.loc 1 346 0
 1394 02c2 834A     		ldr	r2, .L103+32
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 33


 1395 02c4 FB6A     		ldr	r3, [r7, #44]
 1396 02c6 DB00     		lsls	r3, r3, #3
 1397 02c8 1344     		add	r3, r3, r2
 1398 02ca D3E90001 		ldrd	r0, [r3]
 1399 02ce D7E90C23 		ldrd	r2, [r7, #48]
 1400 02d2 FFF7FEFF 		bl	__aeabi_dmul
 1401 02d6 0346     		mov	r3, r0
 1402 02d8 0C46     		mov	r4, r1
 1403 02da 1846     		mov	r0, r3
 1404 02dc 2146     		mov	r1, r4
 1405 02de 7F4A     		ldr	r2, .L103+44
 1406 02e0 FB6A     		ldr	r3, [r7, #44]
 1407 02e2 DB00     		lsls	r3, r3, #3
 1408 02e4 1344     		add	r3, r3, r2
 1409 02e6 18CB     		ldmia	r3, {r3-r4}
 1410 02e8 1A46     		mov	r2, r3
 1411 02ea 2346     		mov	r3, r4
 1412 02ec FFF7FEFF 		bl	__aeabi_dadd
 1413 02f0 0346     		mov	r3, r0
 1414 02f2 0C46     		mov	r4, r1
 1415 02f4 7949     		ldr	r1, .L103+44
 1416 02f6 FA6A     		ldr	r2, [r7, #44]
 1417 02f8 D200     		lsls	r2, r2, #3
 1418 02fa 0A44     		add	r2, r2, r1
 1419 02fc C2E90034 		strd	r3, [r2]
 347:main.c        ****             if(pid_integral[cyl]>35000){
 1420              		.loc 1 347 0
 1421 0300 764A     		ldr	r2, .L103+44
 1422 0302 FB6A     		ldr	r3, [r7, #44]
 1423 0304 DB00     		lsls	r3, r3, #3
 1424 0306 1344     		add	r3, r3, r2
 1425 0308 D3E90001 		ldrd	r0, [r3]
 1426 030c 68A3     		adr	r3, .L103
 1427 030e D3E90023 		ldrd	r2, [r3]
 1428 0312 FFF7FEFF 		bl	__aeabi_dcmpgt
 1429 0316 0346     		mov	r3, r0
 1430 0318 002B     		cmp	r3, #0
 1431 031a 09D0     		beq	.L100
 348:main.c        ****                 pid_integral[cyl] = 35000;
 1432              		.loc 1 348 0
 1433 031c 6F4A     		ldr	r2, .L103+44
 1434 031e FB6A     		ldr	r3, [r7, #44]
 1435 0320 DB00     		lsls	r3, r3, #3
 1436 0322 1A44     		add	r2, r2, r3
 1437 0324 62A4     		adr	r4, .L103
 1438 0326 D4E90034 		ldrd	r3, [r4]
 1439 032a C2E90034 		strd	r3, [r2]
 1440 032e 16E0     		b	.L81
 1441              	.L100:
 349:main.c        ****             } else if(pid_integral[cyl]<-35000){
 1442              		.loc 1 349 0
 1443 0330 6A4A     		ldr	r2, .L103+44
 1444 0332 FB6A     		ldr	r3, [r7, #44]
 1445 0334 DB00     		lsls	r3, r3, #3
 1446 0336 1344     		add	r3, r3, r2
 1447 0338 D3E90001 		ldrd	r0, [r3]
 1448 033c 5EA3     		adr	r3, .L103+8
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 34


 1449 033e D3E90023 		ldrd	r2, [r3]
 1450 0342 FFF7FEFF 		bl	__aeabi_dcmplt
 1451 0346 0346     		mov	r3, r0
 1452 0348 002B     		cmp	r3, #0
 1453 034a 08D0     		beq	.L81
 350:main.c        ****                 pid_integral[cyl] = -35000;
 1454              		.loc 1 350 0
 1455 034c 634A     		ldr	r2, .L103+44
 1456 034e FB6A     		ldr	r3, [r7, #44]
 1457 0350 DB00     		lsls	r3, r3, #3
 1458 0352 1A44     		add	r2, r2, r3
 1459 0354 58A4     		adr	r4, .L103+8
 1460 0356 D4E90034 		ldrd	r3, [r4]
 1461 035a C2E90034 		strd	r3, [r2]
 1462              	.L81:
 351:main.c        ****             }
 352:main.c        ****             pulse_temp[cyl] = pid[0] * err[cyl] + ( pid[1] * pid_integral[cyl] ) + ( pid[2] * der[c
 1463              		.loc 1 352 0 discriminator 2
 1464 035e 604B     		ldr	r3, .L103+48
 1465 0360 D3E90001 		ldrd	r0, [r3]
 1466 0364 5A4A     		ldr	r2, .L103+32
 1467 0366 FB6A     		ldr	r3, [r7, #44]
 1468 0368 DB00     		lsls	r3, r3, #3
 1469 036a 1344     		add	r3, r3, r2
 1470 036c 18CB     		ldmia	r3, {r3-r4}
 1471 036e 1A46     		mov	r2, r3
 1472 0370 2346     		mov	r3, r4
 1473 0372 FFF7FEFF 		bl	__aeabi_dmul
 1474 0376 0346     		mov	r3, r0
 1475 0378 0C46     		mov	r4, r1
 1476 037a 1D46     		mov	r5, r3
 1477 037c 2646     		mov	r6, r4
 1478 037e 584B     		ldr	r3, .L103+48
 1479 0380 D3E90201 		ldrd	r0, [r3, #8]
 1480 0384 554A     		ldr	r2, .L103+44
 1481 0386 FB6A     		ldr	r3, [r7, #44]
 1482 0388 DB00     		lsls	r3, r3, #3
 1483 038a 1344     		add	r3, r3, r2
 1484 038c 18CB     		ldmia	r3, {r3-r4}
 1485 038e 1A46     		mov	r2, r3
 1486 0390 2346     		mov	r3, r4
 1487 0392 FFF7FEFF 		bl	__aeabi_dmul
 1488 0396 0346     		mov	r3, r0
 1489 0398 0C46     		mov	r4, r1
 1490 039a 1A46     		mov	r2, r3
 1491 039c 2346     		mov	r3, r4
 1492 039e 2846     		mov	r0, r5
 1493 03a0 3146     		mov	r1, r6
 1494 03a2 FFF7FEFF 		bl	__aeabi_dadd
 1495 03a6 0346     		mov	r3, r0
 1496 03a8 0C46     		mov	r4, r1
 1497 03aa 1D46     		mov	r5, r3
 1498 03ac 2646     		mov	r6, r4
 1499 03ae 4C4B     		ldr	r3, .L103+48
 1500 03b0 D3E90401 		ldrd	r0, [r3, #16]
 1501 03b4 484A     		ldr	r2, .L103+40
 1502 03b6 FB6A     		ldr	r3, [r7, #44]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 35


 1503 03b8 DB00     		lsls	r3, r3, #3
 1504 03ba 1344     		add	r3, r3, r2
 1505 03bc 18CB     		ldmia	r3, {r3-r4}
 1506 03be 1A46     		mov	r2, r3
 1507 03c0 2346     		mov	r3, r4
 1508 03c2 FFF7FEFF 		bl	__aeabi_dmul
 1509 03c6 0346     		mov	r3, r0
 1510 03c8 0C46     		mov	r4, r1
 1511 03ca 1846     		mov	r0, r3
 1512 03cc 2146     		mov	r1, r4
 1513 03ce D7E90C23 		ldrd	r2, [r7, #48]
 1514 03d2 FFF7FEFF 		bl	__aeabi_ddiv
 1515 03d6 0346     		mov	r3, r0
 1516 03d8 0C46     		mov	r4, r1
 1517 03da 1A46     		mov	r2, r3
 1518 03dc 2346     		mov	r3, r4
 1519 03de 2846     		mov	r0, r5
 1520 03e0 3146     		mov	r1, r6
 1521 03e2 FFF7FEFF 		bl	__aeabi_dadd
 1522 03e6 0346     		mov	r3, r0
 1523 03e8 0C46     		mov	r4, r1
 1524 03ea 1846     		mov	r0, r3
 1525 03ec 2146     		mov	r1, r4
 1526 03ee FFF7FEFF 		bl	__aeabi_d2iz
 1527 03f2 0146     		mov	r1, r0
 1528 03f4 3B4A     		ldr	r2, .L103+52
 1529 03f6 FB6A     		ldr	r3, [r7, #44]
 1530 03f8 42F82310 		str	r1, [r2, r3, lsl #2]
 353:main.c        ****             
 354:main.c        ****             pulse[cyl] = pulseCheck(pulse_temp[cyl],offsets[cyl][1],offsets[cyl][0]);
 1531              		.loc 1 354 0 discriminator 2
 1532 03fc 394A     		ldr	r2, .L103+52
 1533 03fe FB6A     		ldr	r3, [r7, #44]
 1534 0400 52F82300 		ldr	r0, [r2, r3, lsl #2]
 1535 0404 384A     		ldr	r2, .L103+56
 1536 0406 FB6A     		ldr	r3, [r7, #44]
 1537 0408 DB00     		lsls	r3, r3, #3
 1538 040a 1344     		add	r3, r3, r2
 1539 040c 5968     		ldr	r1, [r3, #4]
 1540 040e 364A     		ldr	r2, .L103+56
 1541 0410 FB6A     		ldr	r3, [r7, #44]
 1542 0412 52F83330 		ldr	r3, [r2, r3, lsl #3]
 1543 0416 1A46     		mov	r2, r3
 1544 0418 FFF7FEFF 		bl	pulseCheck
 1545 041c 0146     		mov	r1, r0
 1546 041e 334A     		ldr	r2, .L103+60
 1547 0420 FB6A     		ldr	r3, [r7, #44]
 1548 0422 42F82310 		str	r1, [r2, r3, lsl #2]
 355:main.c        ****             
 356:main.c        ****             writePWM(cyl,pulse[cyl]);
 1549              		.loc 1 356 0 discriminator 2
 1550 0426 314A     		ldr	r2, .L103+60
 1551 0428 FB6A     		ldr	r3, [r7, #44]
 1552 042a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1553 042e 1946     		mov	r1, r3
 1554 0430 F86A     		ldr	r0, [r7, #44]
 1555 0432 FFF7FEFF 		bl	writePWM
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 36


 357:main.c        ****             prev_err[cyl] = err[cyl];
 1556              		.loc 1 357 0 discriminator 2
 1557 0436 264A     		ldr	r2, .L103+32
 1558 0438 FB6A     		ldr	r3, [r7, #44]
 1559 043a DB00     		lsls	r3, r3, #3
 1560 043c 1344     		add	r3, r3, r2
 1561 043e 18CB     		ldmia	r3, {r3-r4}
 1562 0440 2449     		ldr	r1, .L103+36
 1563 0442 FA6A     		ldr	r2, [r7, #44]
 1564 0444 D200     		lsls	r2, r2, #3
 1565 0446 0A44     		add	r2, r2, r1
 1566 0448 C2E90034 		strd	r3, [r2]
 338:main.c        ****             if(new_pos_set[cyl]){
 1567              		.loc 1 338 0 discriminator 2
 1568 044c FB6A     		ldr	r3, [r7, #44]
 1569 044e 0133     		adds	r3, r3, #1
 1570 0450 FB62     		str	r3, [r7, #44]
 1571              	.L77:
 338:main.c        ****             if(new_pos_set[cyl]){
 1572              		.loc 1 338 0 is_stmt 0 discriminator 1
 1573 0452 FB6A     		ldr	r3, [r7, #44]
 1574 0454 032B     		cmp	r3, #3
 1575 0456 7FF7F5AE 		ble	.L83
 1576              	.LBE9:
 358:main.c        ****         }
 359:main.c        ****         
 360:main.c        ****         
 361:main.c        ****         /* END PID CODE */
 362:main.c        ****         if(start_calib){
 1577              		.loc 1 362 0 is_stmt 1
 1578 045a 254B     		ldr	r3, .L103+64
 1579 045c 1B68     		ldr	r3, [r3]
 1580 045e 002B     		cmp	r3, #0
 1581 0460 00F0D980 		beq	.L84
 1582              	.LBB10:
 363:main.c        ****                 
 364:main.c        ****             int calib_cyl = 0;
 1583              		.loc 1 364 0
 1584 0464 0023     		movs	r3, #0
 1585 0466 FB60     		str	r3, [r7, #12]
 365:main.c        ****             int upper_offset_set = 0;
 1586              		.loc 1 365 0
 1587 0468 0023     		movs	r3, #0
 1588 046a BB62     		str	r3, [r7, #40]
 366:main.c        ****             int lower_offset_set = 0;
 1589              		.loc 1 366 0
 1590 046c 0023     		movs	r3, #0
 1591 046e 7B62     		str	r3, [r7, #36]
 367:main.c        ****             int upper_offset = 160;
 1592              		.loc 1 367 0
 1593 0470 A023     		movs	r3, #160
 1594 0472 3B62     		str	r3, [r7, #32]
 368:main.c        ****             int lower_offset = -110;
 1595              		.loc 1 368 0
 1596 0474 6FF06D03 		mvn	r3, #109
 1597 0478 FB61     		str	r3, [r7, #28]
 369:main.c        ****             int lower_check_no = 0;
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 37


 1598              		.loc 1 369 0
 1599 047a 0023     		movs	r3, #0
 1600 047c BB61     		str	r3, [r7, #24]
 370:main.c        ****             int upper_check_no = 0;
 1601              		.loc 1 370 0
 1602 047e 0023     		movs	r3, #0
 1603 0480 7B61     		str	r3, [r7, #20]
 371:main.c        ****             uint16 prev_adcValue = adcValue[0];
 1604              		.loc 1 371 0
 1605 0482 124B     		ldr	r3, .L103+28
 1606 0484 1B88     		ldrh	r3, [r3]	@ movhi
 1607 0486 7B81     		strh	r3, [r7, #10]	@ movhi
 372:main.c        ****             uint16 diff = 0;
 1608              		.loc 1 372 0
 1609 0488 0023     		movs	r3, #0
 1610 048a 3B81     		strh	r3, [r7, #8]	@ movhi
 1611              	.LBB11:
 373:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1612              		.loc 1 373 0
 1613 048c 0023     		movs	r3, #0
 1614 048e 3B61     		str	r3, [r7, #16]
 1615 0490 06E0     		b	.L85
 1616              	.L86:
 374:main.c        ****                 writePWM(g,0);
 1617              		.loc 1 374 0 discriminator 3
 1618 0492 0021     		movs	r1, #0
 1619 0494 3869     		ldr	r0, [r7, #16]
 1620 0496 FFF7FEFF 		bl	writePWM
 373:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1621              		.loc 1 373 0 discriminator 3
 1622 049a 3B69     		ldr	r3, [r7, #16]
 1623 049c 0133     		adds	r3, r3, #1
 1624 049e 3B61     		str	r3, [r7, #16]
 1625              	.L85:
 373:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1626              		.loc 1 373 0 is_stmt 0 discriminator 1
 1627 04a0 3B69     		ldr	r3, [r7, #16]
 1628 04a2 032B     		cmp	r3, #3
 1629 04a4 F5DD     		ble	.L86
 1630              	.LBE11:
 375:main.c        ****                 
 376:main.c        ****             CyDelay(1000);
 1631              		.loc 1 376 0 is_stmt 1
 1632 04a6 4FF47A70 		mov	r0, #1000
 1633 04aa FFF7FEFF 		bl	CyDelay
 377:main.c        ****         
 378:main.c        ****             while(upper_offset_set==0 || lower_offset_set==0){
 1634              		.loc 1 378 0
 1635 04ae 9BE0     		b	.L87
 1636              	.L104:
 1637              		.align	3
 1638              	.L103:
 1639 04b0 00000000 		.word	0
 1640 04b4 0017E140 		.word	1088493312
 1641 04b8 00000000 		.word	0
 1642 04bc 0017E1C0 		.word	-1058990336
 1643 04c0 00000000 		.word	new_pos_set
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 38


 1644 04c4 00000000 		.word	new_pos
 1645 04c8 00000000 		.word	pos
 1646 04cc 00000000 		.word	adcValue
 1647 04d0 00000000 		.word	err
 1648 04d4 00000000 		.word	prev_err
 1649 04d8 00000000 		.word	der
 1650 04dc 00000000 		.word	pid_integral
 1651 04e0 00000000 		.word	pid
 1652 04e4 00000000 		.word	pulse_temp
 1653 04e8 00000000 		.word	offsets
 1654 04ec 00000000 		.word	pulse
 1655 04f0 00000000 		.word	start_calib
 1656              	.L95:
 379:main.c        ****                 
 380:main.c        ****                 prev_adcValue = adcValue[calib_cyl];
 1657              		.loc 1 380 0
 1658 04f4 684A     		ldr	r2, .L105+16
 1659 04f6 FB68     		ldr	r3, [r7, #12]
 1660 04f8 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 1661 04fc 7B81     		strh	r3, [r7, #10]	@ movhi
 381:main.c        ****                 if(upper_offset_set==0){
 1662              		.loc 1 381 0
 1663 04fe BB6A     		ldr	r3, [r7, #40]
 1664 0500 002B     		cmp	r3, #0
 1665 0502 2FD1     		bne	.L88
 382:main.c        ****                     writePWM(calib_cyl,upper_offset);
 1666              		.loc 1 382 0
 1667 0504 396A     		ldr	r1, [r7, #32]
 1668 0506 F868     		ldr	r0, [r7, #12]
 1669 0508 FFF7FEFF 		bl	writePWM
 383:main.c        ****                     CyDelay(200);
 1670              		.loc 1 383 0
 1671 050c C820     		movs	r0, #200
 1672 050e FFF7FEFF 		bl	CyDelay
 384:main.c        ****                     diff = abs(prev_adcValue-adcValue[calib_cyl]);
 1673              		.loc 1 384 0
 1674 0512 7B89     		ldrh	r3, [r7, #10]
 1675 0514 6049     		ldr	r1, .L105+16
 1676 0516 FA68     		ldr	r2, [r7, #12]
 1677 0518 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1678 051c 9B1A     		subs	r3, r3, r2
 1679 051e 002B     		cmp	r3, #0
 1680 0520 B8BF     		it	lt
 1681 0522 5B42     		rsblt	r3, r3, #0
 1682 0524 3B81     		strh	r3, [r7, #8]	@ movhi
 385:main.c        ****                     if(diff>10){
 1683              		.loc 1 385 0
 1684 0526 3B89     		ldrh	r3, [r7, #8]
 1685 0528 0A2B     		cmp	r3, #10
 1686 052a 03D9     		bls	.L89
 386:main.c        ****                         upper_check_no ++;;
 1687              		.loc 1 386 0
 1688 052c 7B69     		ldr	r3, [r7, #20]
 1689 052e 0133     		adds	r3, r3, #1
 1690 0530 7B61     		str	r3, [r7, #20]
 1691 0532 04E0     		b	.L90
 1692              	.L89:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 39


 387:main.c        ****                     }else{
 388:main.c        ****                         upper_offset = upper_offset + 1;
 1693              		.loc 1 388 0
 1694 0534 3B6A     		ldr	r3, [r7, #32]
 1695 0536 0133     		adds	r3, r3, #1
 1696 0538 3B62     		str	r3, [r7, #32]
 389:main.c        ****                         upper_check_no=0;
 1697              		.loc 1 389 0
 1698 053a 0023     		movs	r3, #0
 1699 053c 7B61     		str	r3, [r7, #20]
 1700              	.L90:
 390:main.c        ****                     }
 391:main.c        ****                     sprintf(sendValue,"UPPER:\tLower Offset: %d \tUpper Offset: %d \t ADC Diff: %d\
 1701              		.loc 1 391 0
 1702 053e 3B89     		ldrh	r3, [r7, #8]
 1703 0540 0093     		str	r3, [sp]
 1704 0542 3B6A     		ldr	r3, [r7, #32]
 1705 0544 FA69     		ldr	r2, [r7, #28]
 1706 0546 5549     		ldr	r1, .L105+20
 1707 0548 5548     		ldr	r0, .L105+24
 1708 054a FFF7FEFF 		bl	sprintf
 392:main.c        ****                     UART_PutString(sendValue);
 1709              		.loc 1 392 0
 1710 054e 5448     		ldr	r0, .L105+24
 1711 0550 FFF7FEFF 		bl	UART_PutString
 393:main.c        ****                     writePWM(calib_cyl,0);
 1712              		.loc 1 393 0
 1713 0554 0021     		movs	r1, #0
 1714 0556 F868     		ldr	r0, [r7, #12]
 1715 0558 FFF7FEFF 		bl	writePWM
 394:main.c        ****                     CyDelay(500);
 1716              		.loc 1 394 0
 1717 055c 4FF4FA70 		mov	r0, #500
 1718 0560 FFF7FEFF 		bl	CyDelay
 1719              	.L88:
 395:main.c        ****                 }
 396:main.c        ****                 
 397:main.c        ****                 prev_adcValue = adcValue[calib_cyl];
 1720              		.loc 1 397 0
 1721 0564 4C4A     		ldr	r2, .L105+16
 1722 0566 FB68     		ldr	r3, [r7, #12]
 1723 0568 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 1724 056c 7B81     		strh	r3, [r7, #10]	@ movhi
 398:main.c        ****                 if(lower_offset_set==0){
 1725              		.loc 1 398 0
 1726 056e 7B6A     		ldr	r3, [r7, #36]
 1727 0570 002B     		cmp	r3, #0
 1728 0572 2FD1     		bne	.L91
 399:main.c        ****                     writePWM(calib_cyl,lower_offset);
 1729              		.loc 1 399 0
 1730 0574 F969     		ldr	r1, [r7, #28]
 1731 0576 F868     		ldr	r0, [r7, #12]
 1732 0578 FFF7FEFF 		bl	writePWM
 400:main.c        ****                     CyDelay(200);
 1733              		.loc 1 400 0
 1734 057c C820     		movs	r0, #200
 1735 057e FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 40


 401:main.c        ****                     diff = abs(prev_adcValue-adcValue[calib_cyl]);
 1736              		.loc 1 401 0
 1737 0582 7B89     		ldrh	r3, [r7, #10]
 1738 0584 4449     		ldr	r1, .L105+16
 1739 0586 FA68     		ldr	r2, [r7, #12]
 1740 0588 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1741 058c 9B1A     		subs	r3, r3, r2
 1742 058e 002B     		cmp	r3, #0
 1743 0590 B8BF     		it	lt
 1744 0592 5B42     		rsblt	r3, r3, #0
 1745 0594 3B81     		strh	r3, [r7, #8]	@ movhi
 402:main.c        ****                     if(diff>10){
 1746              		.loc 1 402 0
 1747 0596 3B89     		ldrh	r3, [r7, #8]
 1748 0598 0A2B     		cmp	r3, #10
 1749 059a 03D9     		bls	.L92
 403:main.c        ****                         lower_check_no++;
 1750              		.loc 1 403 0
 1751 059c BB69     		ldr	r3, [r7, #24]
 1752 059e 0133     		adds	r3, r3, #1
 1753 05a0 BB61     		str	r3, [r7, #24]
 1754 05a2 04E0     		b	.L93
 1755              	.L92:
 404:main.c        ****                     }else{
 405:main.c        ****                         lower_offset = lower_offset - 1;
 1756              		.loc 1 405 0
 1757 05a4 FB69     		ldr	r3, [r7, #28]
 1758 05a6 013B     		subs	r3, r3, #1
 1759 05a8 FB61     		str	r3, [r7, #28]
 406:main.c        ****                         lower_check_no = 0;
 1760              		.loc 1 406 0
 1761 05aa 0023     		movs	r3, #0
 1762 05ac BB61     		str	r3, [r7, #24]
 1763              	.L93:
 407:main.c        ****                     }
 408:main.c        ****                     sprintf(sendValue,"LOWER:\tLower Offset: %d \tUpper Offset: %d \t ADC Diff: %d\
 1764              		.loc 1 408 0
 1765 05ae 3B89     		ldrh	r3, [r7, #8]
 1766 05b0 0093     		str	r3, [sp]
 1767 05b2 3B6A     		ldr	r3, [r7, #32]
 1768 05b4 FA69     		ldr	r2, [r7, #28]
 1769 05b6 3B49     		ldr	r1, .L105+28
 1770 05b8 3948     		ldr	r0, .L105+24
 1771 05ba FFF7FEFF 		bl	sprintf
 409:main.c        ****                     UART_PutString(sendValue);
 1772              		.loc 1 409 0
 1773 05be 3848     		ldr	r0, .L105+24
 1774 05c0 FFF7FEFF 		bl	UART_PutString
 410:main.c        ****                     writePWM(calib_cyl,0);
 1775              		.loc 1 410 0
 1776 05c4 0021     		movs	r1, #0
 1777 05c6 F868     		ldr	r0, [r7, #12]
 1778 05c8 FFF7FEFF 		bl	writePWM
 411:main.c        ****                     CyDelay(500);
 1779              		.loc 1 411 0
 1780 05cc 4FF4FA70 		mov	r0, #500
 1781 05d0 FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 41


 1782              	.L91:
 412:main.c        ****                 }
 413:main.c        ****                 
 414:main.c        ****                 if(upper_check_no>2){
 1783              		.loc 1 414 0
 1784 05d4 7B69     		ldr	r3, [r7, #20]
 1785 05d6 022B     		cmp	r3, #2
 1786 05d8 01DD     		ble	.L94
 415:main.c        ****                     upper_offset_set=1;}
 1787              		.loc 1 415 0
 1788 05da 0123     		movs	r3, #1
 1789 05dc BB62     		str	r3, [r7, #40]
 1790              	.L94:
 416:main.c        ****                 if(lower_check_no>2){
 1791              		.loc 1 416 0
 1792 05de BB69     		ldr	r3, [r7, #24]
 1793 05e0 022B     		cmp	r3, #2
 1794 05e2 01DD     		ble	.L87
 417:main.c        ****                     lower_offset_set=1;}
 1795              		.loc 1 417 0
 1796 05e4 0123     		movs	r3, #1
 1797 05e6 7B62     		str	r3, [r7, #36]
 1798              	.L87:
 378:main.c        ****                 
 1799              		.loc 1 378 0
 1800 05e8 BB6A     		ldr	r3, [r7, #40]
 1801 05ea 002B     		cmp	r3, #0
 1802 05ec 82D0     		beq	.L95
 378:main.c        ****                 
 1803              		.loc 1 378 0 is_stmt 0 discriminator 1
 1804 05ee 7B6A     		ldr	r3, [r7, #36]
 1805 05f0 002B     		cmp	r3, #0
 1806 05f2 3FF47FAF 		beq	.L95
 418:main.c        ****         
 419:main.c        ****             }
 420:main.c        ****             
 421:main.c        ****             sprintf(sendValue,"Lower Offset: %d \t Upper Offset: %d \n",lower_offset,upper_offset);
 1807              		.loc 1 421 0 is_stmt 1
 1808 05f6 3B6A     		ldr	r3, [r7, #32]
 1809 05f8 FA69     		ldr	r2, [r7, #28]
 1810 05fa 2B49     		ldr	r1, .L105+32
 1811 05fc 2848     		ldr	r0, .L105+24
 1812 05fe FFF7FEFF 		bl	sprintf
 422:main.c        ****             UART_PutString(sendValue);
 1813              		.loc 1 422 0
 1814 0602 2748     		ldr	r0, .L105+24
 1815 0604 FFF7FEFF 		bl	UART_PutString
 423:main.c        ****             
 424:main.c        ****             //while(1){CyDelay(100);};
 425:main.c        ****             start_calib = 0;
 1816              		.loc 1 425 0
 1817 0608 284B     		ldr	r3, .L105+36
 1818 060a 0022     		movs	r2, #0
 1819 060c 1A60     		str	r2, [r3]
 426:main.c        ****             CyDelay(15000);
 1820              		.loc 1 426 0
 1821 060e 43F69820 		movw	r0, #15000
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 42


 1822 0612 FFF7FEFF 		bl	CyDelay
 1823              	.L84:
 1824              	.LBE10:
 427:main.c        ****         }
 428:main.c        ****         CyDelay(1);
 1825              		.loc 1 428 0
 1826 0616 0120     		movs	r0, #1
 1827 0618 FFF7FEFF 		bl	CyDelay
 429:main.c        ****         
 430:main.c        ****         time = Timer_1_ReadCounter();
 1828              		.loc 1 430 0
 1829 061c FFF7FEFF 		bl	Timer_1_ReadCounter
 1830 0620 0346     		mov	r3, r0
 1831 0622 1846     		mov	r0, r3
 1832 0624 FFF7FEFF 		bl	__aeabi_ui2d
 1833 0628 0346     		mov	r3, r0
 1834 062a 0C46     		mov	r4, r1
 1835 062c C7E90034 		strd	r3, [r7]
 431:main.c        ****         dt=(double)(65535-time)/1000000;
 1836              		.loc 1 431 0
 1837 0630 D7E90023 		ldrd	r2, [r7]
 1838 0634 14A1     		adr	r1, .L105
 1839 0636 D1E90001 		ldrd	r0, [r1]
 1840 063a FFF7FEFF 		bl	__aeabi_dsub
 1841 063e 0346     		mov	r3, r0
 1842 0640 0C46     		mov	r4, r1
 1843 0642 1846     		mov	r0, r3
 1844 0644 2146     		mov	r1, r4
 1845 0646 12A3     		adr	r3, .L105+8
 1846 0648 D3E90023 		ldrd	r2, [r3]
 1847 064c FFF7FEFF 		bl	__aeabi_ddiv
 1848 0650 0346     		mov	r3, r0
 1849 0652 0C46     		mov	r4, r1
 1850 0654 C7E90C34 		strd	r3, [r7, #48]
 432:main.c        ****         dts[dts_ct] = dt;
 1851              		.loc 1 432 0
 1852 0658 154B     		ldr	r3, .L105+40
 1853 065a 1B68     		ldr	r3, [r3]
 1854 065c 154A     		ldr	r2, .L105+44
 1855 065e DB00     		lsls	r3, r3, #3
 1856 0660 1A44     		add	r2, r2, r3
 1857 0662 D7E90C34 		ldrd	r3, [r7, #48]
 1858 0666 C2E90034 		strd	r3, [r2]
 433:main.c        ****         dts_ct++;
 1859              		.loc 1 433 0
 1860 066a 114B     		ldr	r3, .L105+40
 1861 066c 1B68     		ldr	r3, [r3]
 1862 066e 0133     		adds	r3, r3, #1
 1863 0670 0F4A     		ldr	r2, .L105+40
 1864 0672 1360     		str	r3, [r2]
 434:main.c        ****         if(dts_ct>29){
 1865              		.loc 1 434 0
 1866 0674 0E4B     		ldr	r3, .L105+40
 1867 0676 1B68     		ldr	r3, [r3]
 1868 0678 1D2B     		cmp	r3, #29
 1869 067a 7FF790AD 		ble	.L97
 435:main.c        ****             dts_ct=0;
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 43


 1870              		.loc 1 435 0
 1871 067e 0C4B     		ldr	r3, .L105+40
 1872 0680 0022     		movs	r2, #0
 1873 0682 1A60     		str	r2, [r3]
 436:main.c        ****         }
 437:main.c        ****         
 438:main.c        ****     }
 1874              		.loc 1 438 0
 1875 0684 8BE5     		b	.L97
 1876              	.L106:
 1877 0686 00BF     		.align	3
 1878              	.L105:
 1879 0688 00000000 		.word	0
 1880 068c E0FFEF40 		.word	1089470432
 1881 0690 00000000 		.word	0
 1882 0694 80842E41 		.word	1093567616
 1883 0698 00000000 		.word	adcValue
 1884 069c 44000000 		.word	.LC2
 1885 06a0 00000000 		.word	sendValue
 1886 06a4 80000000 		.word	.LC3
 1887 06a8 BC000000 		.word	.LC4
 1888 06ac 00000000 		.word	start_calib
 1889 06b0 00000000 		.word	dts_ct
 1890 06b4 00000000 		.word	dts
 1891              		.cfi_endproc
 1892              	.LFE68:
 1893              		.size	main, .-main
 1894              		.text
 1895              	.Letext0:
 1896              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1897              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1898              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1899              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 1900              		.section	.debug_info,"",%progbits
 1901              	.Ldebug_info0:
 1902 0000 04060000 		.4byte	0x604
 1903 0004 0400     		.2byte	0x4
 1904 0006 00000000 		.4byte	.Ldebug_abbrev0
 1905 000a 04       		.byte	0x4
 1906 000b 01       		.uleb128 0x1
 1907 000c 77000000 		.4byte	.LASF60
 1908 0010 0C       		.byte	0xc
 1909 0011 94020000 		.4byte	.LASF61
 1910 0015 22020000 		.4byte	.LASF62
 1911 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1912 001d 00000000 		.4byte	0
 1913 0021 00000000 		.4byte	.Ldebug_line0
 1914 0025 02       		.uleb128 0x2
 1915 0026 01       		.byte	0x1
 1916 0027 06       		.byte	0x6
 1917 0028 4F010000 		.4byte	.LASF0
 1918 002c 02       		.uleb128 0x2
 1919 002d 01       		.byte	0x1
 1920 002e 08       		.byte	0x8
 1921 002f A0010000 		.4byte	.LASF1
 1922 0033 02       		.uleb128 0x2
 1923 0034 02       		.byte	0x2
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 44


 1924 0035 05       		.byte	0x5
 1925 0036 52000000 		.4byte	.LASF2
 1926 003a 02       		.uleb128 0x2
 1927 003b 02       		.byte	0x2
 1928 003c 07       		.byte	0x7
 1929 003d 0F020000 		.4byte	.LASF3
 1930 0041 03       		.uleb128 0x3
 1931 0042 CD020000 		.4byte	.LASF9
 1932 0046 02       		.byte	0x2
 1933 0047 3F       		.byte	0x3f
 1934 0048 4C000000 		.4byte	0x4c
 1935 004c 02       		.uleb128 0x2
 1936 004d 04       		.byte	0x4
 1937 004e 05       		.byte	0x5
 1938 004f 7F010000 		.4byte	.LASF4
 1939 0053 02       		.uleb128 0x2
 1940 0054 04       		.byte	0x4
 1941 0055 07       		.byte	0x7
 1942 0056 A0020000 		.4byte	.LASF5
 1943 005a 02       		.uleb128 0x2
 1944 005b 08       		.byte	0x8
 1945 005c 05       		.byte	0x5
 1946 005d 05010000 		.4byte	.LASF6
 1947 0061 02       		.uleb128 0x2
 1948 0062 08       		.byte	0x8
 1949 0063 07       		.byte	0x7
 1950 0064 E0010000 		.4byte	.LASF7
 1951 0068 04       		.uleb128 0x4
 1952 0069 04       		.byte	0x4
 1953 006a 05       		.byte	0x5
 1954 006b 696E7400 		.ascii	"int\000"
 1955 006f 02       		.uleb128 0x2
 1956 0070 04       		.byte	0x4
 1957 0071 07       		.byte	0x7
 1958 0072 F7010000 		.4byte	.LASF8
 1959 0076 03       		.uleb128 0x3
 1960 0077 7D020000 		.4byte	.LASF10
 1961 007b 03       		.byte	0x3
 1962 007c 2C       		.byte	0x2c
 1963 007d 41000000 		.4byte	0x41
 1964 0081 05       		.uleb128 0x5
 1965 0082 34010000 		.4byte	.LASF11
 1966 0086 04       		.byte	0x4
 1967 0087 9201     		.2byte	0x192
 1968 0089 2C000000 		.4byte	0x2c
 1969 008d 05       		.uleb128 0x5
 1970 008e 18010000 		.4byte	.LASF12
 1971 0092 04       		.byte	0x4
 1972 0093 9301     		.2byte	0x193
 1973 0095 3A000000 		.4byte	0x3a
 1974 0099 02       		.uleb128 0x2
 1975 009a 04       		.byte	0x4
 1976 009b 04       		.byte	0x4
 1977 009c 5B010000 		.4byte	.LASF13
 1978 00a0 02       		.uleb128 0x2
 1979 00a1 08       		.byte	0x8
 1980 00a2 04       		.byte	0x4
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 45


 1981 00a3 2F030000 		.4byte	.LASF14
 1982 00a7 02       		.uleb128 0x2
 1983 00a8 01       		.byte	0x1
 1984 00a9 08       		.byte	0x8
 1985 00aa 6E020000 		.4byte	.LASF15
 1986 00ae 05       		.uleb128 0x5
 1987 00af 9B020000 		.4byte	.LASF16
 1988 00b3 04       		.byte	0x4
 1989 00b4 3C02     		.2byte	0x23c
 1990 00b6 BA000000 		.4byte	0xba
 1991 00ba 06       		.uleb128 0x6
 1992 00bb 81000000 		.4byte	0x81
 1993 00bf 02       		.uleb128 0x2
 1994 00c0 08       		.byte	0x8
 1995 00c1 04       		.byte	0x4
 1996 00c2 00000000 		.4byte	.LASF17
 1997 00c6 02       		.uleb128 0x2
 1998 00c7 04       		.byte	0x4
 1999 00c8 07       		.byte	0x7
 2000 00c9 69000000 		.4byte	.LASF18
 2001 00cd 07       		.uleb128 0x7
 2002 00ce 61010000 		.4byte	.LASF23
 2003 00d2 01       		.byte	0x1
 2004 00d3 19       		.byte	0x19
 2005 00d4 00000000 		.4byte	.LFB64
 2006 00d8 78000000 		.4byte	.LFE64-.LFB64
 2007 00dc 01       		.uleb128 0x1
 2008 00dd 9C       		.byte	0x9c
 2009 00de FF000000 		.4byte	0xff
 2010 00e2 08       		.uleb128 0x8
 2011 00e3 3A010000 		.4byte	.LASF19
 2012 00e7 01       		.byte	0x1
 2013 00e8 19       		.byte	0x19
 2014 00e9 68000000 		.4byte	0x68
 2015 00ed 02       		.uleb128 0x2
 2016 00ee 91       		.byte	0x91
 2017 00ef 74       		.sleb128 -12
 2018 00f0 08       		.uleb128 0x8
 2019 00f1 2E010000 		.4byte	.LASF20
 2020 00f5 01       		.byte	0x1
 2021 00f6 19       		.byte	0x19
 2022 00f7 68000000 		.4byte	0x68
 2023 00fb 02       		.uleb128 0x2
 2024 00fc 91       		.byte	0x91
 2025 00fd 70       		.sleb128 -16
 2026 00fe 00       		.byte	0
 2027 00ff 09       		.uleb128 0x9
 2028 0100 E4020000 		.4byte	.LASF63
 2029 0104 01       		.byte	0x1
 2030 0105 2A       		.byte	0x2a
 2031 0106 68000000 		.4byte	0x68
 2032 010a 00000000 		.4byte	.LFB65
 2033 010e 54000000 		.4byte	.LFE65-.LFB65
 2034 0112 01       		.uleb128 0x1
 2035 0113 9C       		.byte	0x9c
 2036 0114 43010000 		.4byte	0x143
 2037 0118 08       		.uleb128 0x8
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 46


 2038 0119 2E010000 		.4byte	.LASF20
 2039 011d 01       		.byte	0x1
 2040 011e 2A       		.byte	0x2a
 2041 011f 68000000 		.4byte	0x68
 2042 0123 02       		.uleb128 0x2
 2043 0124 91       		.byte	0x91
 2044 0125 74       		.sleb128 -12
 2045 0126 08       		.uleb128 0x8
 2046 0127 D7020000 		.4byte	.LASF21
 2047 012b 01       		.byte	0x1
 2048 012c 2A       		.byte	0x2a
 2049 012d 68000000 		.4byte	0x68
 2050 0131 02       		.uleb128 0x2
 2051 0132 91       		.byte	0x91
 2052 0133 70       		.sleb128 -16
 2053 0134 08       		.uleb128 0x8
 2054 0135 5C000000 		.4byte	.LASF22
 2055 0139 01       		.byte	0x1
 2056 013a 2A       		.byte	0x2a
 2057 013b 68000000 		.4byte	0x68
 2058 013f 02       		.uleb128 0x2
 2059 0140 91       		.byte	0x91
 2060 0141 6C       		.sleb128 -20
 2061 0142 00       		.byte	0
 2062 0143 07       		.uleb128 0x7
 2063 0144 FB020000 		.4byte	.LASF24
 2064 0148 01       		.byte	0x1
 2065 0149 56       		.byte	0x56
 2066 014a 00000000 		.4byte	.LFB66
 2067 014e 6C010000 		.4byte	.LFE66-.LFB66
 2068 0152 01       		.uleb128 0x1
 2069 0153 9C       		.byte	0x9c
 2070 0154 CF010000 		.4byte	0x1cf
 2071 0158 0A       		.uleb128 0xa
 2072 0159 06000000 		.4byte	.LBB2
 2073 015d 4A010000 		.4byte	.LBE2-.LBB2
 2074 0161 0B       		.uleb128 0xb
 2075 0162 6300     		.ascii	"c\000"
 2076 0164 01       		.byte	0x1
 2077 0165 57       		.byte	0x57
 2078 0166 68000000 		.4byte	0x68
 2079 016a 02       		.uleb128 0x2
 2080 016b 91       		.byte	0x91
 2081 016c 74       		.sleb128 -12
 2082 016d 0C       		.uleb128 0xc
 2083 016e 16000000 		.4byte	.LBB3
 2084 0172 3A000000 		.4byte	.LBE3-.LBB3
 2085 0176 87010000 		.4byte	0x187
 2086 017a 0B       		.uleb128 0xb
 2087 017b 6A00     		.ascii	"j\000"
 2088 017d 01       		.byte	0x1
 2089 017e 5A       		.byte	0x5a
 2090 017f 68000000 		.4byte	0x68
 2091 0183 02       		.uleb128 0x2
 2092 0184 91       		.byte	0x91
 2093 0185 70       		.sleb128 -16
 2094 0186 00       		.byte	0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 47


 2095 0187 0C       		.uleb128 0xc
 2096 0188 AA000000 		.4byte	.LBB4
 2097 018c 2C000000 		.4byte	.LBE4-.LBB4
 2098 0190 A1010000 		.4byte	0x1a1
 2099 0194 0B       		.uleb128 0xb
 2100 0195 6A00     		.ascii	"j\000"
 2101 0197 01       		.byte	0x1
 2102 0198 63       		.byte	0x63
 2103 0199 68000000 		.4byte	0x68
 2104 019d 02       		.uleb128 0x2
 2105 019e 91       		.byte	0x91
 2106 019f 6C       		.sleb128 -20
 2107 01a0 00       		.byte	0
 2108 01a1 0A       		.uleb128 0xa
 2109 01a2 D6000000 		.4byte	.LBB5
 2110 01a6 60000000 		.4byte	.LBE5-.LBB5
 2111 01aa 0B       		.uleb128 0xb
 2112 01ab 6900     		.ascii	"i\000"
 2113 01ad 01       		.byte	0x1
 2114 01ae 66       		.byte	0x66
 2115 01af 68000000 		.4byte	0x68
 2116 01b3 02       		.uleb128 0x2
 2117 01b4 91       		.byte	0x91
 2118 01b5 68       		.sleb128 -24
 2119 01b6 0A       		.uleb128 0xa
 2120 01b7 DC000000 		.4byte	.LBB6
 2121 01bb 4E000000 		.4byte	.LBE6-.LBB6
 2122 01bf 0B       		.uleb128 0xb
 2123 01c0 6A00     		.ascii	"j\000"
 2124 01c2 01       		.byte	0x1
 2125 01c3 67       		.byte	0x67
 2126 01c4 68000000 		.4byte	0x68
 2127 01c8 02       		.uleb128 0x2
 2128 01c9 91       		.byte	0x91
 2129 01ca 64       		.sleb128 -28
 2130 01cb 00       		.byte	0
 2131 01cc 00       		.byte	0
 2132 01cd 00       		.byte	0
 2133 01ce 00       		.byte	0
 2134 01cf 07       		.uleb128 0x7
 2135 01d0 09020000 		.4byte	.LASF25
 2136 01d4 01       		.byte	0x1
 2137 01d5 78       		.byte	0x78
 2138 01d6 00000000 		.4byte	.LFB67
 2139 01da F8020000 		.4byte	.LFE67-.LFB67
 2140 01de 01       		.uleb128 0x1
 2141 01df 9C       		.byte	0x9c
 2142 01e0 18020000 		.4byte	0x218
 2143 01e4 0D       		.uleb128 0xd
 2144 01e5 C6010000 		.4byte	.LASF26
 2145 01e9 01       		.byte	0x1
 2146 01ea 7A       		.byte	0x7a
 2147 01eb 81000000 		.4byte	0x81
 2148 01ef 02       		.uleb128 0x2
 2149 01f0 91       		.byte	0x91
 2150 01f1 6B       		.sleb128 -21
 2151 01f2 0D       		.uleb128 0xd
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 48


 2152 01f3 06030000 		.4byte	.LASF27
 2153 01f7 01       		.byte	0x1
 2154 01f8 7B       		.byte	0x7b
 2155 01f9 81000000 		.4byte	0x81
 2156 01fd 02       		.uleb128 0x2
 2157 01fe 91       		.byte	0x91
 2158 01ff 6A       		.sleb128 -22
 2159 0200 0A       		.uleb128 0xa
 2160 0201 A4000000 		.4byte	.LBB7
 2161 0205 1C000000 		.4byte	.LBE7-.LBB7
 2162 0209 0B       		.uleb128 0xb
 2163 020a 707000   		.ascii	"pp\000"
 2164 020d 01       		.byte	0x1
 2165 020e 98       		.byte	0x98
 2166 020f 68000000 		.4byte	0x68
 2167 0213 02       		.uleb128 0x2
 2168 0214 91       		.byte	0x91
 2169 0215 6C       		.sleb128 -20
 2170 0216 00       		.byte	0
 2171 0217 00       		.byte	0
 2172 0218 0E       		.uleb128 0xe
 2173 0219 72000000 		.4byte	.LASF28
 2174 021d 01       		.byte	0x1
 2175 021e FA       		.byte	0xfa
 2176 021f 68000000 		.4byte	0x68
 2177 0223 00000000 		.4byte	.LFB68
 2178 0227 B8060000 		.4byte	.LFE68-.LFB68
 2179 022b 01       		.uleb128 0x1
 2180 022c 9C       		.byte	0x9c
 2181 022d 35030000 		.4byte	0x335
 2182 0231 0F       		.uleb128 0xf
 2183 0232 647400   		.ascii	"dt\000"
 2184 0235 01       		.byte	0x1
 2185 0236 2E01     		.2byte	0x12e
 2186 0238 A0000000 		.4byte	0xa0
 2187 023c 02       		.uleb128 0x2
 2188 023d 91       		.byte	0x91
 2189 023e 58       		.sleb128 -40
 2190 023f 10       		.uleb128 0x10
 2191 0240 04020000 		.4byte	.LASF29
 2192 0244 01       		.byte	0x1
 2193 0245 2F01     		.2byte	0x12f
 2194 0247 A0000000 		.4byte	0xa0
 2195 024b 03       		.uleb128 0x3
 2196 024c 91       		.byte	0x91
 2197 024d A87F     		.sleb128 -88
 2198 024f 0C       		.uleb128 0xc
 2199 0250 8E000000 		.4byte	.LBB8
 2200 0254 A0000000 		.4byte	.LBE8-.LBB8
 2201 0258 6A020000 		.4byte	0x26a
 2202 025c 0F       		.uleb128 0xf
 2203 025d 6700     		.ascii	"g\000"
 2204 025f 01       		.byte	0x1
 2205 0260 1001     		.2byte	0x110
 2206 0262 68000000 		.4byte	0x68
 2207 0266 02       		.uleb128 0x2
 2208 0267 91       		.byte	0x91
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 49


 2209 0268 64       		.sleb128 -28
 2210 0269 00       		.byte	0
 2211 026a 0C       		.uleb128 0xc
 2212 026b EC010000 		.4byte	.LBB9
 2213 026f 6E020000 		.4byte	.LBE9-.LBB9
 2214 0273 87020000 		.4byte	0x287
 2215 0277 0F       		.uleb128 0xf
 2216 0278 63796C00 		.ascii	"cyl\000"
 2217 027c 01       		.byte	0x1
 2218 027d 5201     		.2byte	0x152
 2219 027f 68000000 		.4byte	0x68
 2220 0283 02       		.uleb128 0x2
 2221 0284 91       		.byte	0x91
 2222 0285 54       		.sleb128 -44
 2223 0286 00       		.byte	0
 2224 0287 0A       		.uleb128 0xa
 2225 0288 64040000 		.4byte	.LBB10
 2226 028c B2010000 		.4byte	.LBE10-.LBB10
 2227 0290 10       		.uleb128 0x10
 2228 0291 73020000 		.4byte	.LASF30
 2229 0295 01       		.byte	0x1
 2230 0296 6C01     		.2byte	0x16c
 2231 0298 68000000 		.4byte	0x68
 2232 029c 03       		.uleb128 0x3
 2233 029d 91       		.byte	0x91
 2234 029e B47F     		.sleb128 -76
 2235 02a0 10       		.uleb128 0x10
 2236 02a1 4A030000 		.4byte	.LASF31
 2237 02a5 01       		.byte	0x1
 2238 02a6 6D01     		.2byte	0x16d
 2239 02a8 68000000 		.4byte	0x68
 2240 02ac 02       		.uleb128 0x2
 2241 02ad 91       		.byte	0x91
 2242 02ae 50       		.sleb128 -48
 2243 02af 10       		.uleb128 0x10
 2244 02b0 8F010000 		.4byte	.LASF32
 2245 02b4 01       		.byte	0x1
 2246 02b5 6E01     		.2byte	0x16e
 2247 02b7 68000000 		.4byte	0x68
 2248 02bb 02       		.uleb128 0x2
 2249 02bc 91       		.byte	0x91
 2250 02bd 4C       		.sleb128 -52
 2251 02be 10       		.uleb128 0x10
 2252 02bf 72010000 		.4byte	.LASF33
 2253 02c3 01       		.byte	0x1
 2254 02c4 6F01     		.2byte	0x16f
 2255 02c6 68000000 		.4byte	0x68
 2256 02ca 02       		.uleb128 0x2
 2257 02cb 91       		.byte	0x91
 2258 02cc 48       		.sleb128 -56
 2259 02cd 10       		.uleb128 0x10
 2260 02ce B9010000 		.4byte	.LASF34
 2261 02d2 01       		.byte	0x1
 2262 02d3 7001     		.2byte	0x170
 2263 02d5 68000000 		.4byte	0x68
 2264 02d9 02       		.uleb128 0x2
 2265 02da 91       		.byte	0x91
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 50


 2266 02db 44       		.sleb128 -60
 2267 02dc 10       		.uleb128 0x10
 2268 02dd 0C000000 		.4byte	.LASF35
 2269 02e1 01       		.byte	0x1
 2270 02e2 7101     		.2byte	0x171
 2271 02e4 68000000 		.4byte	0x68
 2272 02e8 02       		.uleb128 0x2
 2273 02e9 91       		.byte	0x91
 2274 02ea 40       		.sleb128 -64
 2275 02eb 10       		.uleb128 0x10
 2276 02ec 85020000 		.4byte	.LASF36
 2277 02f0 01       		.byte	0x1
 2278 02f1 7201     		.2byte	0x172
 2279 02f3 68000000 		.4byte	0x68
 2280 02f7 03       		.uleb128 0x3
 2281 02f8 91       		.byte	0x91
 2282 02f9 BC7F     		.sleb128 -68
 2283 02fb 10       		.uleb128 0x10
 2284 02fc BF020000 		.4byte	.LASF37
 2285 0300 01       		.byte	0x1
 2286 0301 7301     		.2byte	0x173
 2287 0303 8D000000 		.4byte	0x8d
 2288 0307 03       		.uleb128 0x3
 2289 0308 91       		.byte	0x91
 2290 0309 B27F     		.sleb128 -78
 2291 030b 10       		.uleb128 0x10
 2292 030c 3C000000 		.4byte	.LASF38
 2293 0310 01       		.byte	0x1
 2294 0311 7401     		.2byte	0x174
 2295 0313 8D000000 		.4byte	0x8d
 2296 0317 03       		.uleb128 0x3
 2297 0318 91       		.byte	0x91
 2298 0319 B07F     		.sleb128 -80
 2299 031b 0A       		.uleb128 0xa
 2300 031c 8C040000 		.4byte	.LBB11
 2301 0320 1A000000 		.4byte	.LBE11-.LBB11
 2302 0324 0F       		.uleb128 0xf
 2303 0325 6700     		.ascii	"g\000"
 2304 0327 01       		.byte	0x1
 2305 0328 7501     		.2byte	0x175
 2306 032a 68000000 		.4byte	0x68
 2307 032e 03       		.uleb128 0x3
 2308 032f 91       		.byte	0x91
 2309 0330 B87F     		.sleb128 -72
 2310 0332 00       		.byte	0
 2311 0333 00       		.byte	0
 2312 0334 00       		.byte	0
 2313 0335 11       		.uleb128 0x11
 2314 0336 3D030000 		.4byte	.LASF39
 2315 033a 05       		.byte	0x5
 2316 033b 1207     		.2byte	0x712
 2317 033d 41030000 		.4byte	0x341
 2318 0341 06       		.uleb128 0x6
 2319 0342 76000000 		.4byte	0x76
 2320 0346 12       		.uleb128 0x12
 2321 0347 2B000000 		.4byte	.LASF40
 2322 034b 01       		.byte	0x1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 51


 2323 034c 0E       		.byte	0xe
 2324 034d 68000000 		.4byte	0x68
 2325 0351 05       		.uleb128 0x5
 2326 0352 03       		.byte	0x3
 2327 0353 00000000 		.4byte	psoc_id
 2328 0357 12       		.uleb128 0x12
 2329 0358 43010000 		.4byte	.LASF41
 2330 035c 01       		.byte	0x1
 2331 035d 17       		.byte	0x17
 2332 035e 81000000 		.4byte	0x81
 2333 0362 05       		.uleb128 0x5
 2334 0363 03       		.byte	0x3
 2335 0364 00000000 		.4byte	errorStatus
 2336 0368 12       		.uleb128 0x12
 2337 0369 1F010000 		.4byte	.LASF42
 2338 036d 01       		.byte	0x1
 2339 036e 33       		.byte	0x33
 2340 036f 68000000 		.4byte	0x68
 2341 0373 05       		.uleb128 0x5
 2342 0374 03       		.byte	0x3
 2343 0375 00000000 		.4byte	data_read_mode
 2344 0379 13       		.uleb128 0x13
 2345 037a 89030000 		.4byte	0x389
 2346 037e 89030000 		.4byte	0x389
 2347 0382 14       		.uleb128 0x14
 2348 0383 C6000000 		.4byte	0xc6
 2349 0387 03       		.byte	0x3
 2350 0388 00       		.byte	0
 2351 0389 06       		.uleb128 0x6
 2352 038a 68000000 		.4byte	0x68
 2353 038e 12       		.uleb128 0x12
 2354 038f 41000000 		.4byte	.LASF43
 2355 0393 01       		.byte	0x1
 2356 0394 35       		.byte	0x35
 2357 0395 9F030000 		.4byte	0x39f
 2358 0399 05       		.uleb128 0x5
 2359 039a 03       		.byte	0x3
 2360 039b 00000000 		.4byte	new_pos_set
 2361 039f 06       		.uleb128 0x6
 2362 03a0 79030000 		.4byte	0x379
 2363 03a4 13       		.uleb128 0x13
 2364 03a5 68000000 		.4byte	0x68
 2365 03a9 B4030000 		.4byte	0x3b4
 2366 03ad 14       		.uleb128 0x14
 2367 03ae C6000000 		.4byte	0xc6
 2368 03b2 03       		.byte	0x3
 2369 03b3 00       		.byte	0
 2370 03b4 12       		.uleb128 0x12
 2371 03b5 CF010000 		.4byte	.LASF44
 2372 03b9 01       		.byte	0x1
 2373 03ba 36       		.byte	0x36
 2374 03bb A4030000 		.4byte	0x3a4
 2375 03bf 05       		.uleb128 0x5
 2376 03c0 03       		.byte	0x3
 2377 03c1 00000000 		.4byte	new_pos
 2378 03c5 15       		.uleb128 0x15
 2379 03c6 706F7300 		.ascii	"pos\000"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 52


 2380 03ca 01       		.byte	0x1
 2381 03cb 37       		.byte	0x37
 2382 03cc A4030000 		.4byte	0x3a4
 2383 03d0 05       		.uleb128 0x5
 2384 03d1 03       		.byte	0x3
 2385 03d2 00000000 		.4byte	pos
 2386 03d6 12       		.uleb128 0x12
 2387 03d7 2E010000 		.4byte	.LASF20
 2388 03db 01       		.byte	0x1
 2389 03dc 38       		.byte	0x38
 2390 03dd A4030000 		.4byte	0x3a4
 2391 03e1 05       		.uleb128 0x5
 2392 03e2 03       		.byte	0x3
 2393 03e3 00000000 		.4byte	pulse
 2394 03e7 12       		.uleb128 0x12
 2395 03e8 AE010000 		.4byte	.LASF45
 2396 03ec 01       		.byte	0x1
 2397 03ed 39       		.byte	0x39
 2398 03ee A4030000 		.4byte	0x3a4
 2399 03f2 05       		.uleb128 0x5
 2400 03f3 03       		.byte	0x3
 2401 03f4 00000000 		.4byte	pulse_temp
 2402 03f8 13       		.uleb128 0x13
 2403 03f9 A0000000 		.4byte	0xa0
 2404 03fd 08040000 		.4byte	0x408
 2405 0401 14       		.uleb128 0x14
 2406 0402 C6000000 		.4byte	0xc6
 2407 0406 03       		.byte	0x3
 2408 0407 00       		.byte	0
 2409 0408 15       		.uleb128 0x15
 2410 0409 65727200 		.ascii	"err\000"
 2411 040d 01       		.byte	0x1
 2412 040e 3A       		.byte	0x3a
 2413 040f F8030000 		.4byte	0x3f8
 2414 0413 05       		.uleb128 0x5
 2415 0414 03       		.byte	0x3
 2416 0415 00000000 		.4byte	err
 2417 0419 13       		.uleb128 0x13
 2418 041a 8D000000 		.4byte	0x8d
 2419 041e 29040000 		.4byte	0x429
 2420 0422 14       		.uleb128 0x14
 2421 0423 C6000000 		.4byte	0xc6
 2422 0427 03       		.byte	0x3
 2423 0428 00       		.byte	0
 2424 0429 12       		.uleb128 0x12
 2425 042a D7010000 		.4byte	.LASF46
 2426 042e 01       		.byte	0x1
 2427 042f 3B       		.byte	0x3b
 2428 0430 19040000 		.4byte	0x419
 2429 0434 05       		.uleb128 0x5
 2430 0435 03       		.byte	0x3
 2431 0436 00000000 		.4byte	adcValue
 2432 043a 15       		.uleb128 0x15
 2433 043b 64657200 		.ascii	"der\000"
 2434 043f 01       		.byte	0x1
 2435 0440 3C       		.byte	0x3c
 2436 0441 F8030000 		.4byte	0x3f8
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 53


 2437 0445 05       		.uleb128 0x5
 2438 0446 03       		.byte	0x3
 2439 0447 00000000 		.4byte	der
 2440 044b 12       		.uleb128 0x12
 2441 044c 33000000 		.4byte	.LASF47
 2442 0450 01       		.byte	0x1
 2443 0451 3D       		.byte	0x3d
 2444 0452 F8030000 		.4byte	0x3f8
 2445 0456 05       		.uleb128 0x5
 2446 0457 03       		.byte	0x3
 2447 0458 00000000 		.4byte	prev_err
 2448 045c 12       		.uleb128 0x12
 2449 045d B2020000 		.4byte	.LASF48
 2450 0461 01       		.byte	0x1
 2451 0462 3E       		.byte	0x3e
 2452 0463 F8030000 		.4byte	0x3f8
 2453 0467 05       		.uleb128 0x5
 2454 0468 03       		.byte	0x3
 2455 0469 00000000 		.4byte	pid_integral
 2456 046d 12       		.uleb128 0x12
 2457 046e 1B000000 		.4byte	.LASF49
 2458 0472 01       		.byte	0x1
 2459 0473 40       		.byte	0x40
 2460 0474 68000000 		.4byte	0x68
 2461 0478 05       		.uleb128 0x5
 2462 0479 03       		.byte	0x3
 2463 047a 00000000 		.4byte	cyl_set
 2464 047e 13       		.uleb128 0x13
 2465 047f A7000000 		.4byte	0xa7
 2466 0483 8E040000 		.4byte	0x48e
 2467 0487 14       		.uleb128 0x14
 2468 0488 C6000000 		.4byte	0xc6
 2469 048c 00       		.byte	0
 2470 048d 00       		.byte	0
 2471 048e 12       		.uleb128 0x12
 2472 048f 23000000 		.4byte	.LASF50
 2473 0493 01       		.byte	0x1
 2474 0494 41       		.byte	0x41
 2475 0495 7E040000 		.4byte	0x47e
 2476 0499 05       		.uleb128 0x5
 2477 049a 03       		.byte	0x3
 2478 049b 00000000 		.4byte	cyl_tmp
 2479 049f 13       		.uleb128 0x13
 2480 04a0 A0000000 		.4byte	0xa0
 2481 04a4 AF040000 		.4byte	0x4af
 2482 04a8 14       		.uleb128 0x14
 2483 04a9 C6000000 		.4byte	0xc6
 2484 04ad 1D       		.byte	0x1d
 2485 04ae 00       		.byte	0
 2486 04af 15       		.uleb128 0x15
 2487 04b0 64747300 		.ascii	"dts\000"
 2488 04b4 01       		.byte	0x1
 2489 04b5 42       		.byte	0x42
 2490 04b6 9F040000 		.4byte	0x49f
 2491 04ba 05       		.uleb128 0x5
 2492 04bb 03       		.byte	0x3
 2493 04bc 00000000 		.4byte	dts
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 54


 2494 04c0 12       		.uleb128 0x12
 2495 04c1 36030000 		.4byte	.LASF51
 2496 04c5 01       		.byte	0x1
 2497 04c6 43       		.byte	0x43
 2498 04c7 68000000 		.4byte	0x68
 2499 04cb 05       		.uleb128 0x5
 2500 04cc 03       		.byte	0x3
 2501 04cd 00000000 		.4byte	dts_ct
 2502 04d1 13       		.uleb128 0x13
 2503 04d2 68000000 		.4byte	0x68
 2504 04d6 E7040000 		.4byte	0x4e7
 2505 04da 14       		.uleb128 0x14
 2506 04db C6000000 		.4byte	0xc6
 2507 04df 03       		.byte	0x3
 2508 04e0 14       		.uleb128 0x14
 2509 04e1 C6000000 		.4byte	0xc6
 2510 04e5 01       		.byte	0x1
 2511 04e6 00       		.byte	0
 2512 04e7 12       		.uleb128 0x12
 2513 04e8 6A010000 		.4byte	.LASF52
 2514 04ec 01       		.byte	0x1
 2515 04ed 45       		.byte	0x45
 2516 04ee D1040000 		.4byte	0x4d1
 2517 04f2 05       		.uleb128 0x5
 2518 04f3 03       		.byte	0x3
 2519 04f4 00000000 		.4byte	offsets
 2520 04f8 13       		.uleb128 0x13
 2521 04f9 A7000000 		.4byte	0xa7
 2522 04fd 08050000 		.4byte	0x508
 2523 0501 14       		.uleb128 0x14
 2524 0502 C6000000 		.4byte	0xc6
 2525 0506 63       		.byte	0x63
 2526 0507 00       		.byte	0
 2527 0508 12       		.uleb128 0x12
 2528 0509 25030000 		.4byte	.LASF53
 2529 050d 01       		.byte	0x1
 2530 050e 47       		.byte	0x47
 2531 050f F8040000 		.4byte	0x4f8
 2532 0513 05       		.uleb128 0x5
 2533 0514 03       		.byte	0x3
 2534 0515 00000000 		.4byte	sendValue
 2535 0519 13       		.uleb128 0x13
 2536 051a A7000000 		.4byte	0xa7
 2537 051e 29050000 		.4byte	0x529
 2538 0522 14       		.uleb128 0x14
 2539 0523 C6000000 		.4byte	0xc6
 2540 0527 13       		.byte	0x13
 2541 0528 00       		.byte	0
 2542 0529 12       		.uleb128 0x12
 2543 052a 4D000000 		.4byte	.LASF54
 2544 052e 01       		.byte	0x1
 2545 052f 48       		.byte	0x48
 2546 0530 19050000 		.4byte	0x519
 2547 0534 05       		.uleb128 0x5
 2548 0535 03       		.byte	0x3
 2549 0536 00000000 		.4byte	temp
 2550 053a 15       		.uleb128 0x15
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 55


 2551 053b 6E6E00   		.ascii	"nn\000"
 2552 053e 01       		.byte	0x1
 2553 053f 49       		.byte	0x49
 2554 0540 68000000 		.4byte	0x68
 2555 0544 05       		.uleb128 0x5
 2556 0545 03       		.byte	0x3
 2557 0546 00000000 		.4byte	nn
 2558 054a 13       		.uleb128 0x13
 2559 054b A0000000 		.4byte	0xa0
 2560 054f 5A050000 		.4byte	0x55a
 2561 0553 14       		.uleb128 0x14
 2562 0554 C6000000 		.4byte	0xc6
 2563 0558 02       		.byte	0x2
 2564 0559 00       		.byte	0
 2565 055a 15       		.uleb128 0x15
 2566 055b 70696400 		.ascii	"pid\000"
 2567 055f 01       		.byte	0x1
 2568 0560 4A       		.byte	0x4a
 2569 0561 4A050000 		.4byte	0x54a
 2570 0565 05       		.uleb128 0x5
 2571 0566 03       		.byte	0x3
 2572 0567 00000000 		.4byte	pid
 2573 056b 12       		.uleb128 0x12
 2574 056c 13010000 		.4byte	.LASF55
 2575 0570 01       		.byte	0x1
 2576 0571 4C       		.byte	0x4c
 2577 0572 F8040000 		.4byte	0x4f8
 2578 0576 05       		.uleb128 0x5
 2579 0577 03       		.byte	0x3
 2580 0578 00000000 		.4byte	help
 2581 057c 15       		.uleb128 0x15
 2582 057d 747400   		.ascii	"tt\000"
 2583 0580 01       		.byte	0x1
 2584 0581 4D       		.byte	0x4d
 2585 0582 68000000 		.4byte	0x68
 2586 0586 05       		.uleb128 0x5
 2587 0587 03       		.byte	0x3
 2588 0588 00000000 		.4byte	tt
 2589 058c 12       		.uleb128 0x12
 2590 058d EF020000 		.4byte	.LASF56
 2591 0591 01       		.byte	0x1
 2592 0592 4F       		.byte	0x4f
 2593 0593 68000000 		.4byte	0x68
 2594 0597 05       		.uleb128 0x5
 2595 0598 03       		.byte	0x3
 2596 0599 00000000 		.4byte	start_calib
 2597 059d 12       		.uleb128 0x12
 2598 059e 88010000 		.4byte	.LASF57
 2599 05a2 01       		.byte	0x1
 2600 05a3 50       		.byte	0x50
 2601 05a4 68000000 		.4byte	0x68
 2602 05a8 05       		.uleb128 0x5
 2603 05a9 03       		.byte	0x3
 2604 05aa 00000000 		.4byte	cyl_no
 2605 05ae 13       		.uleb128 0x13
 2606 05af 8D000000 		.4byte	0x8d
 2607 05b3 C4050000 		.4byte	0x5c4
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 56


 2608 05b7 14       		.uleb128 0x14
 2609 05b8 C6000000 		.4byte	0xc6
 2610 05bc 03       		.byte	0x3
 2611 05bd 14       		.uleb128 0x14
 2612 05be C6000000 		.4byte	0xc6
 2613 05c2 06       		.byte	0x6
 2614 05c3 00       		.byte	0
 2615 05c4 12       		.uleb128 0x12
 2616 05c5 0D030000 		.4byte	.LASF58
 2617 05c9 01       		.byte	0x1
 2618 05ca 52       		.byte	0x52
 2619 05cb AE050000 		.4byte	0x5ae
 2620 05cf 05       		.uleb128 0x5
 2621 05d0 03       		.byte	0x3
 2622 05d1 00000000 		.4byte	moving_median
 2623 05d5 13       		.uleb128 0x13
 2624 05d6 8D000000 		.4byte	0x8d
 2625 05da E5050000 		.4byte	0x5e5
 2626 05de 14       		.uleb128 0x14
 2627 05df C6000000 		.4byte	0xc6
 2628 05e3 06       		.byte	0x6
 2629 05e4 00       		.byte	0
 2630 05e5 12       		.uleb128 0x12
 2631 05e6 1B030000 		.4byte	.LASF59
 2632 05ea 01       		.byte	0x1
 2633 05eb 53       		.byte	0x53
 2634 05ec D5050000 		.4byte	0x5d5
 2635 05f0 05       		.uleb128 0x5
 2636 05f1 03       		.byte	0x3
 2637 05f2 00000000 		.4byte	tempArray
 2638 05f6 15       		.uleb128 0x15
 2639 05f7 746D7000 		.ascii	"tmp\000"
 2640 05fb 01       		.byte	0x1
 2641 05fc 54       		.byte	0x54
 2642 05fd 8D000000 		.4byte	0x8d
 2643 0601 05       		.uleb128 0x5
 2644 0602 03       		.byte	0x3
 2645 0603 00000000 		.4byte	tmp
 2646 0607 00       		.byte	0
 2647              		.section	.debug_abbrev,"",%progbits
 2648              	.Ldebug_abbrev0:
 2649 0000 01       		.uleb128 0x1
 2650 0001 11       		.uleb128 0x11
 2651 0002 01       		.byte	0x1
 2652 0003 25       		.uleb128 0x25
 2653 0004 0E       		.uleb128 0xe
 2654 0005 13       		.uleb128 0x13
 2655 0006 0B       		.uleb128 0xb
 2656 0007 03       		.uleb128 0x3
 2657 0008 0E       		.uleb128 0xe
 2658 0009 1B       		.uleb128 0x1b
 2659 000a 0E       		.uleb128 0xe
 2660 000b 55       		.uleb128 0x55
 2661 000c 17       		.uleb128 0x17
 2662 000d 11       		.uleb128 0x11
 2663 000e 01       		.uleb128 0x1
 2664 000f 10       		.uleb128 0x10
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 57


 2665 0010 17       		.uleb128 0x17
 2666 0011 00       		.byte	0
 2667 0012 00       		.byte	0
 2668 0013 02       		.uleb128 0x2
 2669 0014 24       		.uleb128 0x24
 2670 0015 00       		.byte	0
 2671 0016 0B       		.uleb128 0xb
 2672 0017 0B       		.uleb128 0xb
 2673 0018 3E       		.uleb128 0x3e
 2674 0019 0B       		.uleb128 0xb
 2675 001a 03       		.uleb128 0x3
 2676 001b 0E       		.uleb128 0xe
 2677 001c 00       		.byte	0
 2678 001d 00       		.byte	0
 2679 001e 03       		.uleb128 0x3
 2680 001f 16       		.uleb128 0x16
 2681 0020 00       		.byte	0
 2682 0021 03       		.uleb128 0x3
 2683 0022 0E       		.uleb128 0xe
 2684 0023 3A       		.uleb128 0x3a
 2685 0024 0B       		.uleb128 0xb
 2686 0025 3B       		.uleb128 0x3b
 2687 0026 0B       		.uleb128 0xb
 2688 0027 49       		.uleb128 0x49
 2689 0028 13       		.uleb128 0x13
 2690 0029 00       		.byte	0
 2691 002a 00       		.byte	0
 2692 002b 04       		.uleb128 0x4
 2693 002c 24       		.uleb128 0x24
 2694 002d 00       		.byte	0
 2695 002e 0B       		.uleb128 0xb
 2696 002f 0B       		.uleb128 0xb
 2697 0030 3E       		.uleb128 0x3e
 2698 0031 0B       		.uleb128 0xb
 2699 0032 03       		.uleb128 0x3
 2700 0033 08       		.uleb128 0x8
 2701 0034 00       		.byte	0
 2702 0035 00       		.byte	0
 2703 0036 05       		.uleb128 0x5
 2704 0037 16       		.uleb128 0x16
 2705 0038 00       		.byte	0
 2706 0039 03       		.uleb128 0x3
 2707 003a 0E       		.uleb128 0xe
 2708 003b 3A       		.uleb128 0x3a
 2709 003c 0B       		.uleb128 0xb
 2710 003d 3B       		.uleb128 0x3b
 2711 003e 05       		.uleb128 0x5
 2712 003f 49       		.uleb128 0x49
 2713 0040 13       		.uleb128 0x13
 2714 0041 00       		.byte	0
 2715 0042 00       		.byte	0
 2716 0043 06       		.uleb128 0x6
 2717 0044 35       		.uleb128 0x35
 2718 0045 00       		.byte	0
 2719 0046 49       		.uleb128 0x49
 2720 0047 13       		.uleb128 0x13
 2721 0048 00       		.byte	0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 58


 2722 0049 00       		.byte	0
 2723 004a 07       		.uleb128 0x7
 2724 004b 2E       		.uleb128 0x2e
 2725 004c 01       		.byte	0x1
 2726 004d 3F       		.uleb128 0x3f
 2727 004e 19       		.uleb128 0x19
 2728 004f 03       		.uleb128 0x3
 2729 0050 0E       		.uleb128 0xe
 2730 0051 3A       		.uleb128 0x3a
 2731 0052 0B       		.uleb128 0xb
 2732 0053 3B       		.uleb128 0x3b
 2733 0054 0B       		.uleb128 0xb
 2734 0055 27       		.uleb128 0x27
 2735 0056 19       		.uleb128 0x19
 2736 0057 11       		.uleb128 0x11
 2737 0058 01       		.uleb128 0x1
 2738 0059 12       		.uleb128 0x12
 2739 005a 06       		.uleb128 0x6
 2740 005b 40       		.uleb128 0x40
 2741 005c 18       		.uleb128 0x18
 2742 005d 9642     		.uleb128 0x2116
 2743 005f 19       		.uleb128 0x19
 2744 0060 01       		.uleb128 0x1
 2745 0061 13       		.uleb128 0x13
 2746 0062 00       		.byte	0
 2747 0063 00       		.byte	0
 2748 0064 08       		.uleb128 0x8
 2749 0065 05       		.uleb128 0x5
 2750 0066 00       		.byte	0
 2751 0067 03       		.uleb128 0x3
 2752 0068 0E       		.uleb128 0xe
 2753 0069 3A       		.uleb128 0x3a
 2754 006a 0B       		.uleb128 0xb
 2755 006b 3B       		.uleb128 0x3b
 2756 006c 0B       		.uleb128 0xb
 2757 006d 49       		.uleb128 0x49
 2758 006e 13       		.uleb128 0x13
 2759 006f 02       		.uleb128 0x2
 2760 0070 18       		.uleb128 0x18
 2761 0071 00       		.byte	0
 2762 0072 00       		.byte	0
 2763 0073 09       		.uleb128 0x9
 2764 0074 2E       		.uleb128 0x2e
 2765 0075 01       		.byte	0x1
 2766 0076 3F       		.uleb128 0x3f
 2767 0077 19       		.uleb128 0x19
 2768 0078 03       		.uleb128 0x3
 2769 0079 0E       		.uleb128 0xe
 2770 007a 3A       		.uleb128 0x3a
 2771 007b 0B       		.uleb128 0xb
 2772 007c 3B       		.uleb128 0x3b
 2773 007d 0B       		.uleb128 0xb
 2774 007e 27       		.uleb128 0x27
 2775 007f 19       		.uleb128 0x19
 2776 0080 49       		.uleb128 0x49
 2777 0081 13       		.uleb128 0x13
 2778 0082 11       		.uleb128 0x11
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 59


 2779 0083 01       		.uleb128 0x1
 2780 0084 12       		.uleb128 0x12
 2781 0085 06       		.uleb128 0x6
 2782 0086 40       		.uleb128 0x40
 2783 0087 18       		.uleb128 0x18
 2784 0088 9742     		.uleb128 0x2117
 2785 008a 19       		.uleb128 0x19
 2786 008b 01       		.uleb128 0x1
 2787 008c 13       		.uleb128 0x13
 2788 008d 00       		.byte	0
 2789 008e 00       		.byte	0
 2790 008f 0A       		.uleb128 0xa
 2791 0090 0B       		.uleb128 0xb
 2792 0091 01       		.byte	0x1
 2793 0092 11       		.uleb128 0x11
 2794 0093 01       		.uleb128 0x1
 2795 0094 12       		.uleb128 0x12
 2796 0095 06       		.uleb128 0x6
 2797 0096 00       		.byte	0
 2798 0097 00       		.byte	0
 2799 0098 0B       		.uleb128 0xb
 2800 0099 34       		.uleb128 0x34
 2801 009a 00       		.byte	0
 2802 009b 03       		.uleb128 0x3
 2803 009c 08       		.uleb128 0x8
 2804 009d 3A       		.uleb128 0x3a
 2805 009e 0B       		.uleb128 0xb
 2806 009f 3B       		.uleb128 0x3b
 2807 00a0 0B       		.uleb128 0xb
 2808 00a1 49       		.uleb128 0x49
 2809 00a2 13       		.uleb128 0x13
 2810 00a3 02       		.uleb128 0x2
 2811 00a4 18       		.uleb128 0x18
 2812 00a5 00       		.byte	0
 2813 00a6 00       		.byte	0
 2814 00a7 0C       		.uleb128 0xc
 2815 00a8 0B       		.uleb128 0xb
 2816 00a9 01       		.byte	0x1
 2817 00aa 11       		.uleb128 0x11
 2818 00ab 01       		.uleb128 0x1
 2819 00ac 12       		.uleb128 0x12
 2820 00ad 06       		.uleb128 0x6
 2821 00ae 01       		.uleb128 0x1
 2822 00af 13       		.uleb128 0x13
 2823 00b0 00       		.byte	0
 2824 00b1 00       		.byte	0
 2825 00b2 0D       		.uleb128 0xd
 2826 00b3 34       		.uleb128 0x34
 2827 00b4 00       		.byte	0
 2828 00b5 03       		.uleb128 0x3
 2829 00b6 0E       		.uleb128 0xe
 2830 00b7 3A       		.uleb128 0x3a
 2831 00b8 0B       		.uleb128 0xb
 2832 00b9 3B       		.uleb128 0x3b
 2833 00ba 0B       		.uleb128 0xb
 2834 00bb 49       		.uleb128 0x49
 2835 00bc 13       		.uleb128 0x13
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 60


 2836 00bd 02       		.uleb128 0x2
 2837 00be 18       		.uleb128 0x18
 2838 00bf 00       		.byte	0
 2839 00c0 00       		.byte	0
 2840 00c1 0E       		.uleb128 0xe
 2841 00c2 2E       		.uleb128 0x2e
 2842 00c3 01       		.byte	0x1
 2843 00c4 3F       		.uleb128 0x3f
 2844 00c5 19       		.uleb128 0x19
 2845 00c6 03       		.uleb128 0x3
 2846 00c7 0E       		.uleb128 0xe
 2847 00c8 3A       		.uleb128 0x3a
 2848 00c9 0B       		.uleb128 0xb
 2849 00ca 3B       		.uleb128 0x3b
 2850 00cb 0B       		.uleb128 0xb
 2851 00cc 49       		.uleb128 0x49
 2852 00cd 13       		.uleb128 0x13
 2853 00ce 11       		.uleb128 0x11
 2854 00cf 01       		.uleb128 0x1
 2855 00d0 12       		.uleb128 0x12
 2856 00d1 06       		.uleb128 0x6
 2857 00d2 40       		.uleb128 0x40
 2858 00d3 18       		.uleb128 0x18
 2859 00d4 9642     		.uleb128 0x2116
 2860 00d6 19       		.uleb128 0x19
 2861 00d7 01       		.uleb128 0x1
 2862 00d8 13       		.uleb128 0x13
 2863 00d9 00       		.byte	0
 2864 00da 00       		.byte	0
 2865 00db 0F       		.uleb128 0xf
 2866 00dc 34       		.uleb128 0x34
 2867 00dd 00       		.byte	0
 2868 00de 03       		.uleb128 0x3
 2869 00df 08       		.uleb128 0x8
 2870 00e0 3A       		.uleb128 0x3a
 2871 00e1 0B       		.uleb128 0xb
 2872 00e2 3B       		.uleb128 0x3b
 2873 00e3 05       		.uleb128 0x5
 2874 00e4 49       		.uleb128 0x49
 2875 00e5 13       		.uleb128 0x13
 2876 00e6 02       		.uleb128 0x2
 2877 00e7 18       		.uleb128 0x18
 2878 00e8 00       		.byte	0
 2879 00e9 00       		.byte	0
 2880 00ea 10       		.uleb128 0x10
 2881 00eb 34       		.uleb128 0x34
 2882 00ec 00       		.byte	0
 2883 00ed 03       		.uleb128 0x3
 2884 00ee 0E       		.uleb128 0xe
 2885 00ef 3A       		.uleb128 0x3a
 2886 00f0 0B       		.uleb128 0xb
 2887 00f1 3B       		.uleb128 0x3b
 2888 00f2 05       		.uleb128 0x5
 2889 00f3 49       		.uleb128 0x49
 2890 00f4 13       		.uleb128 0x13
 2891 00f5 02       		.uleb128 0x2
 2892 00f6 18       		.uleb128 0x18
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 61


 2893 00f7 00       		.byte	0
 2894 00f8 00       		.byte	0
 2895 00f9 11       		.uleb128 0x11
 2896 00fa 34       		.uleb128 0x34
 2897 00fb 00       		.byte	0
 2898 00fc 03       		.uleb128 0x3
 2899 00fd 0E       		.uleb128 0xe
 2900 00fe 3A       		.uleb128 0x3a
 2901 00ff 0B       		.uleb128 0xb
 2902 0100 3B       		.uleb128 0x3b
 2903 0101 05       		.uleb128 0x5
 2904 0102 49       		.uleb128 0x49
 2905 0103 13       		.uleb128 0x13
 2906 0104 3F       		.uleb128 0x3f
 2907 0105 19       		.uleb128 0x19
 2908 0106 3C       		.uleb128 0x3c
 2909 0107 19       		.uleb128 0x19
 2910 0108 00       		.byte	0
 2911 0109 00       		.byte	0
 2912 010a 12       		.uleb128 0x12
 2913 010b 34       		.uleb128 0x34
 2914 010c 00       		.byte	0
 2915 010d 03       		.uleb128 0x3
 2916 010e 0E       		.uleb128 0xe
 2917 010f 3A       		.uleb128 0x3a
 2918 0110 0B       		.uleb128 0xb
 2919 0111 3B       		.uleb128 0x3b
 2920 0112 0B       		.uleb128 0xb
 2921 0113 49       		.uleb128 0x49
 2922 0114 13       		.uleb128 0x13
 2923 0115 3F       		.uleb128 0x3f
 2924 0116 19       		.uleb128 0x19
 2925 0117 02       		.uleb128 0x2
 2926 0118 18       		.uleb128 0x18
 2927 0119 00       		.byte	0
 2928 011a 00       		.byte	0
 2929 011b 13       		.uleb128 0x13
 2930 011c 01       		.uleb128 0x1
 2931 011d 01       		.byte	0x1
 2932 011e 49       		.uleb128 0x49
 2933 011f 13       		.uleb128 0x13
 2934 0120 01       		.uleb128 0x1
 2935 0121 13       		.uleb128 0x13
 2936 0122 00       		.byte	0
 2937 0123 00       		.byte	0
 2938 0124 14       		.uleb128 0x14
 2939 0125 21       		.uleb128 0x21
 2940 0126 00       		.byte	0
 2941 0127 49       		.uleb128 0x49
 2942 0128 13       		.uleb128 0x13
 2943 0129 2F       		.uleb128 0x2f
 2944 012a 0B       		.uleb128 0xb
 2945 012b 00       		.byte	0
 2946 012c 00       		.byte	0
 2947 012d 15       		.uleb128 0x15
 2948 012e 34       		.uleb128 0x34
 2949 012f 00       		.byte	0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 62


 2950 0130 03       		.uleb128 0x3
 2951 0131 08       		.uleb128 0x8
 2952 0132 3A       		.uleb128 0x3a
 2953 0133 0B       		.uleb128 0xb
 2954 0134 3B       		.uleb128 0x3b
 2955 0135 0B       		.uleb128 0xb
 2956 0136 49       		.uleb128 0x49
 2957 0137 13       		.uleb128 0x13
 2958 0138 3F       		.uleb128 0x3f
 2959 0139 19       		.uleb128 0x19
 2960 013a 02       		.uleb128 0x2
 2961 013b 18       		.uleb128 0x18
 2962 013c 00       		.byte	0
 2963 013d 00       		.byte	0
 2964 013e 00       		.byte	0
 2965              		.section	.debug_aranges,"",%progbits
 2966 0000 3C000000 		.4byte	0x3c
 2967 0004 0200     		.2byte	0x2
 2968 0006 00000000 		.4byte	.Ldebug_info0
 2969 000a 04       		.byte	0x4
 2970 000b 00       		.byte	0
 2971 000c 0000     		.2byte	0
 2972 000e 0000     		.2byte	0
 2973 0010 00000000 		.4byte	.LFB64
 2974 0014 78000000 		.4byte	.LFE64-.LFB64
 2975 0018 00000000 		.4byte	.LFB65
 2976 001c 54000000 		.4byte	.LFE65-.LFB65
 2977 0020 00000000 		.4byte	.LFB66
 2978 0024 6C010000 		.4byte	.LFE66-.LFB66
 2979 0028 00000000 		.4byte	.LFB67
 2980 002c F8020000 		.4byte	.LFE67-.LFB67
 2981 0030 00000000 		.4byte	.LFB68
 2982 0034 B8060000 		.4byte	.LFE68-.LFB68
 2983 0038 00000000 		.4byte	0
 2984 003c 00000000 		.4byte	0
 2985              		.section	.debug_ranges,"",%progbits
 2986              	.Ldebug_ranges0:
 2987 0000 00000000 		.4byte	.LFB64
 2988 0004 78000000 		.4byte	.LFE64
 2989 0008 00000000 		.4byte	.LFB65
 2990 000c 54000000 		.4byte	.LFE65
 2991 0010 00000000 		.4byte	.LFB66
 2992 0014 6C010000 		.4byte	.LFE66
 2993 0018 00000000 		.4byte	.LFB67
 2994 001c F8020000 		.4byte	.LFE67
 2995 0020 00000000 		.4byte	.LFB68
 2996 0024 B8060000 		.4byte	.LFE68
 2997 0028 00000000 		.4byte	0
 2998 002c 00000000 		.4byte	0
 2999              		.section	.debug_line,"",%progbits
 3000              	.Ldebug_line0:
 3001 0000 B4030000 		.section	.debug_str,"MS",%progbits,1
 3001      02004C01 
 3001      00000201 
 3001      FB0E0D00 
 3001      01010101 
 3002              	.LASF17:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 63


 3003 0000 6C6F6E67 		.ascii	"long double\000"
 3003      20646F75 
 3003      626C6500 
 3004              	.LASF35:
 3005 000c 6C6F7765 		.ascii	"lower_check_no\000"
 3005      725F6368 
 3005      65636B5F 
 3005      6E6F00
 3006              	.LASF49:
 3007 001b 63796C5F 		.ascii	"cyl_set\000"
 3007      73657400 
 3008              	.LASF50:
 3009 0023 63796C5F 		.ascii	"cyl_tmp\000"
 3009      746D7000 
 3010              	.LASF40:
 3011 002b 70736F63 		.ascii	"psoc_id\000"
 3011      5F696400 
 3012              	.LASF47:
 3013 0033 70726576 		.ascii	"prev_err\000"
 3013      5F657272 
 3013      00
 3014              	.LASF38:
 3015 003c 64696666 		.ascii	"diff\000"
 3015      00
 3016              	.LASF43:
 3017 0041 6E65775F 		.ascii	"new_pos_set\000"
 3017      706F735F 
 3017      73657400 
 3018              	.LASF54:
 3019 004d 74656D70 		.ascii	"temp\000"
 3019      00
 3020              	.LASF2:
 3021 0052 73686F72 		.ascii	"short int\000"
 3021      7420696E 
 3021      7400
 3022              	.LASF22:
 3023 005c 6F666673 		.ascii	"offset_lower\000"
 3023      65745F6C 
 3023      6F776572 
 3023      00
 3024              	.LASF18:
 3025 0069 73697A65 		.ascii	"sizetype\000"
 3025      74797065 
 3025      00
 3026              	.LASF28:
 3027 0072 6D61696E 		.ascii	"main\000"
 3027      00
 3028              	.LASF60:
 3029 0077 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3029      43313120 
 3029      352E342E 
 3029      31203230 
 3029      31363036 
 3030 00aa 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3030      20726576 
 3030      6973696F 
 3030      6E203233 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 64


 3030      37373135 
 3031 00dd 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3031      66756E63 
 3031      74696F6E 
 3031      2D736563 
 3031      74696F6E 
 3032              	.LASF6:
 3033 0105 6C6F6E67 		.ascii	"long long int\000"
 3033      206C6F6E 
 3033      6720696E 
 3033      7400
 3034              	.LASF55:
 3035 0113 68656C70 		.ascii	"help\000"
 3035      00
 3036              	.LASF12:
 3037 0118 75696E74 		.ascii	"uint16\000"
 3037      313600
 3038              	.LASF42:
 3039 011f 64617461 		.ascii	"data_read_mode\000"
 3039      5F726561 
 3039      645F6D6F 
 3039      646500
 3040              	.LASF20:
 3041 012e 70756C73 		.ascii	"pulse\000"
 3041      6500
 3042              	.LASF11:
 3043 0134 75696E74 		.ascii	"uint8\000"
 3043      3800
 3044              	.LASF19:
 3045 013a 63796C69 		.ascii	"cylinder\000"
 3045      6E646572 
 3045      00
 3046              	.LASF41:
 3047 0143 6572726F 		.ascii	"errorStatus\000"
 3047      72537461 
 3047      74757300 
 3048              	.LASF0:
 3049 014f 7369676E 		.ascii	"signed char\000"
 3049      65642063 
 3049      68617200 
 3050              	.LASF13:
 3051 015b 666C6F61 		.ascii	"float\000"
 3051      7400
 3052              	.LASF23:
 3053 0161 77726974 		.ascii	"writePWM\000"
 3053      6550574D 
 3053      00
 3054              	.LASF52:
 3055 016a 6F666673 		.ascii	"offsets\000"
 3055      65747300 
 3056              	.LASF33:
 3057 0172 75707065 		.ascii	"upper_offset\000"
 3057      725F6F66 
 3057      66736574 
 3057      00
 3058              	.LASF4:
 3059 017f 6C6F6E67 		.ascii	"long int\000"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 65


 3059      20696E74 
 3059      00
 3060              	.LASF57:
 3061 0188 63796C5F 		.ascii	"cyl_no\000"
 3061      6E6F00
 3062              	.LASF32:
 3063 018f 6C6F7765 		.ascii	"lower_offset_set\000"
 3063      725F6F66 
 3063      66736574 
 3063      5F736574 
 3063      00
 3064              	.LASF1:
 3065 01a0 756E7369 		.ascii	"unsigned char\000"
 3065      676E6564 
 3065      20636861 
 3065      7200
 3066              	.LASF45:
 3067 01ae 70756C73 		.ascii	"pulse_temp\000"
 3067      655F7465 
 3067      6D7000
 3068              	.LASF34:
 3069 01b9 6C6F7765 		.ascii	"lower_offset\000"
 3069      725F6F66 
 3069      66736574 
 3069      00
 3070              	.LASF26:
 3071 01c6 72785374 		.ascii	"rxStatus\000"
 3071      61747573 
 3071      00
 3072              	.LASF44:
 3073 01cf 6E65775F 		.ascii	"new_pos\000"
 3073      706F7300 
 3074              	.LASF46:
 3075 01d7 61646356 		.ascii	"adcValue\000"
 3075      616C7565 
 3075      00
 3076              	.LASF7:
 3077 01e0 6C6F6E67 		.ascii	"long long unsigned int\000"
 3077      206C6F6E 
 3077      6720756E 
 3077      7369676E 
 3077      65642069 
 3078              	.LASF8:
 3079 01f7 756E7369 		.ascii	"unsigned int\000"
 3079      676E6564 
 3079      20696E74 
 3079      00
 3080              	.LASF29:
 3081 0204 74696D65 		.ascii	"time\000"
 3081      00
 3082              	.LASF25:
 3083 0209 52784973 		.ascii	"RxIsr\000"
 3083      7200
 3084              	.LASF3:
 3085 020f 73686F72 		.ascii	"short unsigned int\000"
 3085      7420756E 
 3085      7369676E 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 66


 3085      65642069 
 3085      6E7400
 3086              	.LASF62:
 3087 0222 433A5C55 		.ascii	"C:\\Users\\Andrew\\Documents\\GitHub\\Hydraulic-Mim"
 3087      73657273 
 3087      5C416E64 
 3087      7265775C 
 3087      446F6375 
 3088 0250 69632D41 		.ascii	"ic-Arm\\PSOC_arm_project.cydsn\000"
 3088      726D5C50 
 3088      534F435F 
 3088      61726D5F 
 3088      70726F6A 
 3089              	.LASF15:
 3090 026e 63686172 		.ascii	"char\000"
 3090      00
 3091              	.LASF30:
 3092 0273 63616C69 		.ascii	"calib_cyl\000"
 3092      625F6379 
 3092      6C00
 3093              	.LASF10:
 3094 027d 696E7433 		.ascii	"int32_t\000"
 3094      325F7400 
 3095              	.LASF36:
 3096 0285 75707065 		.ascii	"upper_check_no\000"
 3096      725F6368 
 3096      65636B5F 
 3096      6E6F00
 3097              	.LASF61:
 3098 0294 6D61696E 		.ascii	"main.c\000"
 3098      2E6300
 3099              	.LASF16:
 3100 029b 72656738 		.ascii	"reg8\000"
 3100      00
 3101              	.LASF5:
 3102 02a0 6C6F6E67 		.ascii	"long unsigned int\000"
 3102      20756E73 
 3102      69676E65 
 3102      6420696E 
 3102      7400
 3103              	.LASF48:
 3104 02b2 7069645F 		.ascii	"pid_integral\000"
 3104      696E7465 
 3104      6772616C 
 3104      00
 3105              	.LASF37:
 3106 02bf 70726576 		.ascii	"prev_adcValue\000"
 3106      5F616463 
 3106      56616C75 
 3106      6500
 3107              	.LASF9:
 3108 02cd 5F5F696E 		.ascii	"__int32_t\000"
 3108      7433325F 
 3108      7400
 3109              	.LASF21:
 3110 02d7 6F666673 		.ascii	"offset_upper\000"
 3110      65745F75 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\ccSyL13n.s 			page 67


 3110      70706572 
 3110      00
 3111              	.LASF63:
 3112 02e4 70756C73 		.ascii	"pulseCheck\000"
 3112      65436865 
 3112      636B00
 3113              	.LASF56:
 3114 02ef 73746172 		.ascii	"start_calib\000"
 3114      745F6361 
 3114      6C696200 
 3115              	.LASF24:
 3116 02fb 6164635F 		.ascii	"adc_update\000"
 3116      75706461 
 3116      746500
 3117              	.LASF27:
 3118 0306 72784461 		.ascii	"rxData\000"
 3118      746100
 3119              	.LASF58:
 3120 030d 6D6F7669 		.ascii	"moving_median\000"
 3120      6E675F6D 
 3120      65646961 
 3120      6E00
 3121              	.LASF59:
 3122 031b 74656D70 		.ascii	"tempArray\000"
 3122      41727261 
 3122      7900
 3123              	.LASF53:
 3124 0325 73656E64 		.ascii	"sendValue\000"
 3124      56616C75 
 3124      6500
 3125              	.LASF14:
 3126 032f 646F7562 		.ascii	"double\000"
 3126      6C6500
 3127              	.LASF51:
 3128 0336 6474735F 		.ascii	"dts_ct\000"
 3128      637400
 3129              	.LASF39:
 3130 033d 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3130      52784275 
 3130      66666572 
 3130      00
 3131              	.LASF31:
 3132 034a 75707065 		.ascii	"upper_offset_set\000"
 3132      725F6F66 
 3132      66736574 
 3132      5F736574 
 3132      00
 3133              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
