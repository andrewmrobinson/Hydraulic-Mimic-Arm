ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.syntax unified
  20              		.global _printf_float
  21              		.thumb
  22              		.syntax unified
  23              		.global	errorStatus
  24              		.bss
  25              		.type	errorStatus, %object
  26              		.size	errorStatus, 1
  27              	errorStatus:
  28 0000 00       		.space	1
  29              		.section	.text.writePWM,"ax",%progbits
  30              		.align	2
  31              		.global	writePWM
  32              		.thumb
  33              		.thumb_func
  34              		.type	writePWM, %function
  35              	writePWM:
  36              	.LFB64:
  37              		.file 1 "main.c"
   1:main.c        **** 
   2:main.c        **** #include <project.h>
   3:main.c        **** #include <stdio.h>
   4:main.c        **** #include "common.h"
   5:main.c        **** #include <math.h>
   6:main.c        **** #include <stdlib.h>     /* strtod */
   7:main.c        **** 
   8:main.c        **** #define	Frequency 1000000.0			// Frequency of PWMClock
   9:main.c        **** #define	One_ms (Frequency/1000.0)	// 1 ms constant
  10:main.c        **** #define filter_size 7
  11:main.c        **** #define CYL_NO 4                    // Number of connected cylinders
  12:main.c        **** 
  13:main.c        **** /* Add an explicit reference to the floating point printf library to allow
  14:main.c        **** the usage of floating point conversion specifier */
  15:main.c        **** #if defined (__GNUC__)
  16:main.c        ****     asm (".global _printf_float");
  17:main.c        **** #endif
  18:main.c        **** 
  19:main.c        **** uint8 errorStatus = 0u;
  20:main.c        **** 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 2


  21:main.c        **** void writePWM(int cylinder, int pulse){
  38              		.loc 1 21 0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 8
  41              		@ frame_needed = 1, uses_anonymous_args = 0
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 82B0     		sub	sp, sp, #8
  47              		.cfi_def_cfa_offset 16
  48 0004 00AF     		add	r7, sp, #0
  49              		.cfi_def_cfa_register 7
  50 0006 7860     		str	r0, [r7, #4]
  51 0008 3960     		str	r1, [r7]
  22:main.c        ****     switch(cylinder){
  52              		.loc 1 22 0
  53 000a 7B68     		ldr	r3, [r7, #4]
  54 000c 032B     		cmp	r3, #3
  55 000e 2FD8     		bhi	.L8
  56 0010 01A2     		adr	r2, .L4
  57 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  58 0016 00BF     		.p2align 2
  59              	.L4:
  60 0018 29000000 		.word	.L3+1
  61 001c 3B000000 		.word	.L5+1
  62 0020 4D000000 		.word	.L6+1
  63 0024 5F000000 		.word	.L7+1
  64              		.p2align 1
  65              	.L3:
  23:main.c        ****                 case 0:
  24:main.c        ****                     PWM_0_WriteCompare(pulse + 1500);
  66              		.loc 1 24 0
  67 0028 3B68     		ldr	r3, [r7]
  68 002a 9BB2     		uxth	r3, r3
  69 002c 03F2DC53 		addw	r3, r3, #1500
  70 0030 9BB2     		uxth	r3, r3
  71 0032 1846     		mov	r0, r3
  72 0034 FFF7FEFF 		bl	PWM_0_WriteCompare
  25:main.c        ****                     break;
  73              		.loc 1 25 0
  74 0038 1AE0     		b	.L2
  75              	.L5:
  26:main.c        ****                 case 1:
  27:main.c        ****                     PWM_1_WriteCompare(pulse + 1500);
  76              		.loc 1 27 0
  77 003a 3B68     		ldr	r3, [r7]
  78 003c 9BB2     		uxth	r3, r3
  79 003e 03F2DC53 		addw	r3, r3, #1500
  80 0042 9BB2     		uxth	r3, r3
  81 0044 1846     		mov	r0, r3
  82 0046 FFF7FEFF 		bl	PWM_1_WriteCompare
  28:main.c        ****                     break;
  83              		.loc 1 28 0
  84 004a 11E0     		b	.L2
  85              	.L6:
  29:main.c        ****                 case 2:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 3


  30:main.c        ****                     PWM_2_WriteCompare(pulse + 1500);
  86              		.loc 1 30 0
  87 004c 3B68     		ldr	r3, [r7]
  88 004e 9BB2     		uxth	r3, r3
  89 0050 03F2DC53 		addw	r3, r3, #1500
  90 0054 9BB2     		uxth	r3, r3
  91 0056 1846     		mov	r0, r3
  92 0058 FFF7FEFF 		bl	PWM_2_WriteCompare
  31:main.c        ****                     break;
  93              		.loc 1 31 0
  94 005c 08E0     		b	.L2
  95              	.L7:
  32:main.c        ****                 case 3:
  33:main.c        ****                     PWM_3_WriteCompare(pulse + 1500);
  96              		.loc 1 33 0
  97 005e 3B68     		ldr	r3, [r7]
  98 0060 9BB2     		uxth	r3, r3
  99 0062 03F2DC53 		addw	r3, r3, #1500
 100 0066 9BB2     		uxth	r3, r3
 101 0068 1846     		mov	r0, r3
 102 006a FFF7FEFF 		bl	PWM_3_WriteCompare
  34:main.c        ****                     break;
 103              		.loc 1 34 0
 104 006e 00BF     		nop
 105              	.L2:
 106              	.L8:
  35:main.c        ****             }  
  36:main.c        **** }
 107              		.loc 1 36 0
 108 0070 00BF     		nop
 109 0072 0837     		adds	r7, r7, #8
 110              		.cfi_def_cfa_offset 8
 111 0074 BD46     		mov	sp, r7
 112              		.cfi_def_cfa_register 13
 113              		@ sp needed
 114 0076 80BD     		pop	{r7, pc}
 115              		.cfi_endproc
 116              	.LFE64:
 117              		.size	writePWM, .-writePWM
 118              		.section	.text.pulseCheck,"ax",%progbits
 119              		.align	2
 120              		.global	pulseCheck
 121              		.thumb
 122              		.thumb_func
 123              		.type	pulseCheck, %function
 124              	pulseCheck:
 125              	.LFB65:
  37:main.c        **** 
  38:main.c        **** int pulseCheck(int pulse, int offset_upper, int offset_lower) {
 126              		.loc 1 38 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 16
 129              		@ frame_needed = 1, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131 0000 80B4     		push	{r7}
 132              		.cfi_def_cfa_offset 4
 133              		.cfi_offset 7, -4
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 4


 134 0002 85B0     		sub	sp, sp, #20
 135              		.cfi_def_cfa_offset 24
 136 0004 00AF     		add	r7, sp, #0
 137              		.cfi_def_cfa_register 7
 138 0006 F860     		str	r0, [r7, #12]
 139 0008 B960     		str	r1, [r7, #8]
 140 000a 7A60     		str	r2, [r7, #4]
  39:main.c        ****     if(pulse<0){pulse = pulse - offset_lower;}
 141              		.loc 1 39 0
 142 000c FB68     		ldr	r3, [r7, #12]
 143 000e 002B     		cmp	r3, #0
 144 0010 03DA     		bge	.L10
 145              		.loc 1 39 0 is_stmt 0 discriminator 1
 146 0012 FA68     		ldr	r2, [r7, #12]
 147 0014 7B68     		ldr	r3, [r7, #4]
 148 0016 D31A     		subs	r3, r2, r3
 149 0018 FB60     		str	r3, [r7, #12]
 150              	.L10:
  40:main.c        ****         if(pulse>0){pulse = pulse + offset_upper;}
 151              		.loc 1 40 0 is_stmt 1
 152 001a FB68     		ldr	r3, [r7, #12]
 153 001c 002B     		cmp	r3, #0
 154 001e 03DD     		ble	.L11
 155              		.loc 1 40 0 is_stmt 0 discriminator 1
 156 0020 FA68     		ldr	r2, [r7, #12]
 157 0022 BB68     		ldr	r3, [r7, #8]
 158 0024 1344     		add	r3, r3, r2
 159 0026 FB60     		str	r3, [r7, #12]
 160              	.L11:
  41:main.c        ****         if(pulse<-500){pulse=-500;}
 161              		.loc 1 41 0 is_stmt 1
 162 0028 FB68     		ldr	r3, [r7, #12]
 163 002a 13F5FA7F 		cmn	r3, #500
 164 002e 01DA     		bge	.L12
 165              		.loc 1 41 0 is_stmt 0 discriminator 1
 166 0030 074B     		ldr	r3, .L15
 167 0032 FB60     		str	r3, [r7, #12]
 168              	.L12:
  42:main.c        ****         if(pulse>500){pulse=500;}
 169              		.loc 1 42 0 is_stmt 1
 170 0034 FB68     		ldr	r3, [r7, #12]
 171 0036 B3F5FA7F 		cmp	r3, #500
 172 003a 02DD     		ble	.L13
 173              		.loc 1 42 0 is_stmt 0 discriminator 1
 174 003c 4FF4FA73 		mov	r3, #500
 175 0040 FB60     		str	r3, [r7, #12]
 176              	.L13:
  43:main.c        ****     return pulse;
 177              		.loc 1 43 0 is_stmt 1
 178 0042 FB68     		ldr	r3, [r7, #12]
  44:main.c        **** }
 179              		.loc 1 44 0
 180 0044 1846     		mov	r0, r3
 181 0046 1437     		adds	r7, r7, #20
 182              		.cfi_def_cfa_offset 4
 183 0048 BD46     		mov	sp, r7
 184              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 5


 185              		@ sp needed
 186 004a 80BC     		pop	{r7}
 187              		.cfi_restore 7
 188              		.cfi_def_cfa_offset 0
 189 004c 7047     		bx	lr
 190              	.L16:
 191 004e 00BF     		.align	2
 192              	.L15:
 193 0050 0CFEFFFF 		.word	-500
 194              		.cfi_endproc
 195              	.LFE65:
 196              		.size	pulseCheck, .-pulseCheck
 197              		.global	data_read_mode
 198              		.bss
 199 0001 000000   		.align	2
 200              		.type	data_read_mode, %object
 201              		.size	data_read_mode, 4
 202              	data_read_mode:
 203 0004 00000000 		.space	4
 204              		.comm	new_pos_set,16,4
 205              		.comm	new_pos,16,4
 206              		.comm	pos,16,4
 207              		.comm	pulse,16,4
 208              		.comm	pulse_temp,16,4
 209              		.comm	err,32,8
 210              		.comm	adcValue,8,4
 211              		.comm	der,32,8
 212              		.comm	prev_err,32,8
 213              		.comm	pid_integral,32,8
 214              		.global	cyl_set
 215              		.align	2
 216              		.type	cyl_set, %object
 217              		.size	cyl_set, 4
 218              	cyl_set:
 219 0008 00000000 		.space	4
 220              		.comm	cyl_tmp,1,4
 221              		.comm	dts,240,8
 222              		.global	dts_ct
 223              		.align	2
 224              		.type	dts_ct, %object
 225              		.size	dts_ct, 4
 226              	dts_ct:
 227 000c 00000000 		.space	4
 228              		.global	offsets
 229              		.data
 230              		.align	2
 231              		.type	offsets, %object
 232              		.size	offsets, 32
 233              	offsets:
 234 0000 7D000000 		.word	125
 235 0004 B3000000 		.word	179
 236 0008 84000000 		.word	132
 237 000c B0000000 		.word	176
 238 0010 B9000000 		.word	185
 239 0014 AC000000 		.word	172
 240 0018 C3000000 		.word	195
 241 001c A9000000 		.word	169
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 6


 242              		.comm	sendValue,100,4
 243              		.comm	temp,20,4
 244              		.global	nn
 245              		.bss
 246              		.align	2
 247              		.type	nn, %object
 248              		.size	nn, 4
 249              	nn:
 250 0010 00000000 		.space	4
 251              		.global	pid
 252              		.data
 253              		.align	3
 254              		.type	pid, %object
 255              		.size	pid, 24
 256              	pid:
 257 0020 66666666 		.word	1717986918
 258 0024 6666E63F 		.word	1072064102
 259 0028 FCA9F1D2 		.word	-755914244
 260 002c 4D62503F 		.word	1062232653
 261 0030 7B14AE47 		.word	1202590843
 262 0034 E17AA43F 		.word	1067743969
 263              		.comm	help,100,4
 264              		.global	tt
 265              		.bss
 266              		.align	2
 267              		.type	tt, %object
 268              		.size	tt, 4
 269              	tt:
 270 0014 00000000 		.space	4
 271              		.global	start_calib
 272              		.align	2
 273              		.type	start_calib, %object
 274              		.size	start_calib, 4
 275              	start_calib:
 276 0018 00000000 		.space	4
 277              		.global	cyl_no
 278              		.align	2
 279              		.type	cyl_no, %object
 280              		.size	cyl_no, 4
 281              	cyl_no:
 282 001c 00000000 		.space	4
 283              		.global	moving_median
 284              		.align	2
 285              		.type	moving_median, %object
 286              		.size	moving_median, 56
 287              	moving_median:
 288 0020 00000000 		.space	56
 288      00000000 
 288      00000000 
 288      00000000 
 288      00000000 
 289              		.comm	tempArray,14,4
 290              		.comm	tmp,2,2
 291              		.section	.text.adc_update,"ax",%progbits
 292              		.align	2
 293              		.global	adc_update
 294              		.thumb
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 7


 295              		.thumb_func
 296              		.type	adc_update, %function
 297              	adc_update:
 298              	.LFB66:
  45:main.c        **** 
  46:main.c        **** 
  47:main.c        **** int data_read_mode = 0;
  48:main.c        **** 
  49:main.c        **** volatile int new_pos_set[CYL_NO];
  50:main.c        **** int new_pos[CYL_NO];
  51:main.c        **** int pos[CYL_NO];
  52:main.c        **** int pulse[CYL_NO];
  53:main.c        **** int pulse_temp[CYL_NO];
  54:main.c        **** double err[CYL_NO];
  55:main.c        **** uint16 adcValue[CYL_NO];
  56:main.c        **** double der[CYL_NO];
  57:main.c        **** double prev_err[CYL_NO];
  58:main.c        **** double pid_integral[CYL_NO];
  59:main.c        **** 
  60:main.c        **** int cyl_set = 0;
  61:main.c        **** char cyl_tmp[1];
  62:main.c        **** double dts[30];
  63:main.c        **** int dts_ct = 0;
  64:main.c        **** 
  65:main.c        **** int offsets[4][2] = {{125,179},{132,176},{185,172},{195,169}}; //{lower,upper} - both positive
  66:main.c        **** 
  67:main.c        **** char sendValue[100];
  68:main.c        **** char temp[20];
  69:main.c        **** int nn=0;
  70:main.c        **** double pid[3] = {0.7,0.001,0.04};
  71:main.c        **** 
  72:main.c        **** char help[100];
  73:main.c        **** int tt = 0;
  74:main.c        **** 
  75:main.c        **** int start_calib = 0;
  76:main.c        **** int cyl_no = 0;
  77:main.c        **** 
  78:main.c        **** uint16 moving_median[CYL_NO][filter_size] = {0};
  79:main.c        **** uint16 tempArray[filter_size];
  80:main.c        **** uint16 tmp;
  81:main.c        **** 
  82:main.c        **** CY_ISR(adc_update){
 299              		.loc 1 82 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 24
 302              		@ frame_needed = 1, uses_anonymous_args = 0
 303 0000 80B5     		push	{r7, lr}
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 7, -8
 306              		.cfi_offset 14, -4
 307 0002 86B0     		sub	sp, sp, #24
 308              		.cfi_def_cfa_offset 32
 309 0004 00AF     		add	r7, sp, #0
 310              		.cfi_def_cfa_register 7
 311              	.LBB2:
  83:main.c        ****     for(int c = 0;c<CYL_NO;c++){
 312              		.loc 1 83 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 8


 313 0006 0023     		movs	r3, #0
 314 0008 7B61     		str	r3, [r7, #20]
 315 000a 9DE0     		b	.L18
 316              	.L28:
  84:main.c        ****         AMux_0_FastSelect(c);
 317              		.loc 1 84 0
 318 000c 7B69     		ldr	r3, [r7, #20]
 319 000e DBB2     		uxtb	r3, r3
 320 0010 1846     		mov	r0, r3
 321 0012 FFF7FEFF 		bl	AMux_0_FastSelect
 322              	.LBB3:
  85:main.c        ****         
  86:main.c        ****         for(int j=0;j<filter_size-1;j++){
 323              		.loc 1 86 0
 324 0016 0023     		movs	r3, #0
 325 0018 3B61     		str	r3, [r7, #16]
 326 001a 16E0     		b	.L19
 327              	.L20:
  87:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 328              		.loc 1 87 0 discriminator 3
 329 001c 3B69     		ldr	r3, [r7, #16]
 330 001e 591C     		adds	r1, r3, #1
 331 0020 4E48     		ldr	r0, .L29
 332 0022 7A69     		ldr	r2, [r7, #20]
 333 0024 1346     		mov	r3, r2
 334 0026 DB00     		lsls	r3, r3, #3
 335 0028 9B1A     		subs	r3, r3, r2
 336 002a 0B44     		add	r3, r3, r1
 337 002c 30F81300 		ldrh	r0, [r0, r3, lsl #1]
 338 0030 4A49     		ldr	r1, .L29
 339 0032 7A69     		ldr	r2, [r7, #20]
 340 0034 1346     		mov	r3, r2
 341 0036 DB00     		lsls	r3, r3, #3
 342 0038 9B1A     		subs	r3, r3, r2
 343 003a 3A69     		ldr	r2, [r7, #16]
 344 003c 1344     		add	r3, r3, r2
 345 003e 0246     		mov	r2, r0	@ movhi
 346 0040 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
  86:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 347              		.loc 1 86 0 discriminator 3
 348 0044 3B69     		ldr	r3, [r7, #16]
 349 0046 0133     		adds	r3, r3, #1
 350 0048 3B61     		str	r3, [r7, #16]
 351              	.L19:
  86:main.c        ****                 moving_median[c][j] = moving_median[c][j+1]; 
 352              		.loc 1 86 0 is_stmt 0 discriminator 1
 353 004a 3B69     		ldr	r3, [r7, #16]
 354 004c 052B     		cmp	r3, #5
 355 004e E5DD     		ble	.L20
 356              	.LBE3:
  88:main.c        ****         }
  89:main.c        ****         
  90:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 357              		.loc 1 90 0 is_stmt 1
 358 0050 FFF7FEFF 		bl	ADC_0_GetResult16
 359 0054 0346     		mov	r3, r0
 360 0056 98B2     		uxth	r0, r3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 9


 361 0058 4049     		ldr	r1, .L29
 362 005a 7A69     		ldr	r2, [r7, #20]
 363 005c 1346     		mov	r3, r2
 364 005e DB00     		lsls	r3, r3, #3
 365 0060 9B1A     		subs	r3, r3, r2
 366 0062 5B00     		lsls	r3, r3, #1
 367 0064 0B44     		add	r3, r3, r1
 368 0066 0C33     		adds	r3, r3, #12
 369 0068 0246     		mov	r2, r0	@ movhi
 370 006a 1A80     		strh	r2, [r3]	@ movhi
  91:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 371              		.loc 1 91 0
 372 006c FFF7FEFF 		bl	ADC_0_GetResult16
 373 0070 0346     		mov	r3, r0
 374 0072 98B2     		uxth	r0, r3
 375 0074 3949     		ldr	r1, .L29
 376 0076 7A69     		ldr	r2, [r7, #20]
 377 0078 1346     		mov	r3, r2
 378 007a DB00     		lsls	r3, r3, #3
 379 007c 9B1A     		subs	r3, r3, r2
 380 007e 5B00     		lsls	r3, r3, #1
 381 0080 0B44     		add	r3, r3, r1
 382 0082 0C33     		adds	r3, r3, #12
 383 0084 0246     		mov	r2, r0	@ movhi
 384 0086 1A80     		strh	r2, [r3]	@ movhi
  92:main.c        ****         ADC_0_IsEndConversion(ADC_0_WAIT_FOR_RESULT);
 385              		.loc 1 92 0
 386 0088 0020     		movs	r0, #0
 387 008a FFF7FEFF 		bl	ADC_0_IsEndConversion
  93:main.c        ****         moving_median[c][filter_size-1] = ADC_0_GetResult16();
 388              		.loc 1 93 0
 389 008e FFF7FEFF 		bl	ADC_0_GetResult16
 390 0092 0346     		mov	r3, r0
 391 0094 98B2     		uxth	r0, r3
 392 0096 3149     		ldr	r1, .L29
 393 0098 7A69     		ldr	r2, [r7, #20]
 394 009a 1346     		mov	r3, r2
 395 009c DB00     		lsls	r3, r3, #3
 396 009e 9B1A     		subs	r3, r3, r2
 397 00a0 5B00     		lsls	r3, r3, #1
 398 00a2 0B44     		add	r3, r3, r1
 399 00a4 0C33     		adds	r3, r3, #12
 400 00a6 0246     		mov	r2, r0	@ movhi
 401 00a8 1A80     		strh	r2, [r3]	@ movhi
 402              	.LBB4:
  94:main.c        ****         
  95:main.c        ****         for(int j=0;j<filter_size;j++){
 403              		.loc 1 95 0
 404 00aa 0023     		movs	r3, #0
 405 00ac FB60     		str	r3, [r7, #12]
 406 00ae 0FE0     		b	.L21
 407              	.L22:
  96:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 408              		.loc 1 96 0 discriminator 3
 409 00b0 2A49     		ldr	r1, .L29
 410 00b2 7A69     		ldr	r2, [r7, #20]
 411 00b4 1346     		mov	r3, r2
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 10


 412 00b6 DB00     		lsls	r3, r3, #3
 413 00b8 9B1A     		subs	r3, r3, r2
 414 00ba FA68     		ldr	r2, [r7, #12]
 415 00bc 1344     		add	r3, r3, r2
 416 00be 31F81310 		ldrh	r1, [r1, r3, lsl #1]
 417 00c2 274A     		ldr	r2, .L29+4
 418 00c4 FB68     		ldr	r3, [r7, #12]
 419 00c6 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  95:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 420              		.loc 1 95 0 discriminator 3
 421 00ca FB68     		ldr	r3, [r7, #12]
 422 00cc 0133     		adds	r3, r3, #1
 423 00ce FB60     		str	r3, [r7, #12]
 424              	.L21:
  95:main.c        ****                 tempArray[j] = moving_median[c][j]; 
 425              		.loc 1 95 0 is_stmt 0 discriminator 1
 426 00d0 FB68     		ldr	r3, [r7, #12]
 427 00d2 062B     		cmp	r3, #6
 428 00d4 ECDD     		ble	.L22
 429              	.LBE4:
 430              	.LBB5:
  97:main.c        ****         }
  98:main.c        ****         for(int i = 0; i < filter_size; i++){                     //Loop for ascending ordering
 431              		.loc 1 98 0 is_stmt 1
 432 00d6 0023     		movs	r3, #0
 433 00d8 BB60     		str	r3, [r7, #8]
 434 00da 29E0     		b	.L23
 435              	.L27:
 436              	.LBB6:
  99:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 437              		.loc 1 99 0
 438 00dc 0023     		movs	r3, #0
 439 00de 7B60     		str	r3, [r7, #4]
 440 00e0 20E0     		b	.L24
 441              	.L26:
 100:main.c        ****         	{
 101:main.c        ****         		if (tempArray[j] > tempArray[i])                //Comparing other array elements
 442              		.loc 1 101 0
 443 00e2 1F4A     		ldr	r2, .L29+4
 444 00e4 7B68     		ldr	r3, [r7, #4]
 445 00e6 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 446 00ea 1D49     		ldr	r1, .L29+4
 447 00ec BB68     		ldr	r3, [r7, #8]
 448 00ee 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 449 00f2 9A42     		cmp	r2, r3
 450 00f4 13D9     		bls	.L25
 102:main.c        ****         		{
 103:main.c        ****         			tmp = tempArray[i];         //Using temporary variable for storing last value
 451              		.loc 1 103 0
 452 00f6 1A4A     		ldr	r2, .L29+4
 453 00f8 BB68     		ldr	r3, [r7, #8]
 454 00fa 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 455 00fe 194B     		ldr	r3, .L29+8
 456 0100 1A80     		strh	r2, [r3]	@ movhi
 104:main.c        ****         			tempArray[i] = tempArray[j];            //replacing value
 457              		.loc 1 104 0
 458 0102 174A     		ldr	r2, .L29+4
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 11


 459 0104 7B68     		ldr	r3, [r7, #4]
 460 0106 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 461 010a 154A     		ldr	r2, .L29+4
 462 010c BB68     		ldr	r3, [r7, #8]
 463 010e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 105:main.c        ****         			tempArray[j] = tmp;             //storing last value
 464              		.loc 1 105 0
 465 0112 144B     		ldr	r3, .L29+8
 466 0114 1988     		ldrh	r1, [r3]
 467 0116 124A     		ldr	r2, .L29+4
 468 0118 7B68     		ldr	r3, [r7, #4]
 469 011a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 470              	.L25:
  99:main.c        ****         	{
 471              		.loc 1 99 0 discriminator 2
 472 011e 7B68     		ldr	r3, [r7, #4]
 473 0120 0133     		adds	r3, r3, #1
 474 0122 7B60     		str	r3, [r7, #4]
 475              	.L24:
  99:main.c        ****         	{
 476              		.loc 1 99 0 is_stmt 0 discriminator 1
 477 0124 7B68     		ldr	r3, [r7, #4]
 478 0126 062B     		cmp	r3, #6
 479 0128 DBDD     		ble	.L26
 480              	.LBE6:
  98:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 481              		.loc 1 98 0 is_stmt 1 discriminator 2
 482 012a BB68     		ldr	r3, [r7, #8]
 483 012c 0133     		adds	r3, r3, #1
 484 012e BB60     		str	r3, [r7, #8]
 485              	.L23:
  98:main.c        ****         	for (int j = 0; j < filter_size; j++)             //Loop for comparing other values
 486              		.loc 1 98 0 is_stmt 0 discriminator 1
 487 0130 BB68     		ldr	r3, [r7, #8]
 488 0132 062B     		cmp	r3, #6
 489 0134 D2DD     		ble	.L27
 490              	.LBE5:
 106:main.c        ****         		}  
 107:main.c        ****         	}
 108:main.c        ****         }
 109:main.c        ****         adcValue[c] = tempArray[(filter_size-1)/2];
 491              		.loc 1 109 0 is_stmt 1 discriminator 2
 492 0136 0A4B     		ldr	r3, .L29+4
 493 0138 D988     		ldrh	r1, [r3, #6]
 494 013a 0B4A     		ldr	r2, .L29+12
 495 013c 7B69     		ldr	r3, [r7, #20]
 496 013e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
  83:main.c        ****         AMux_0_FastSelect(c);
 497              		.loc 1 83 0 discriminator 2
 498 0142 7B69     		ldr	r3, [r7, #20]
 499 0144 0133     		adds	r3, r3, #1
 500 0146 7B61     		str	r3, [r7, #20]
 501              	.L18:
  83:main.c        ****         AMux_0_FastSelect(c);
 502              		.loc 1 83 0 is_stmt 0 discriminator 1
 503 0148 7B69     		ldr	r3, [r7, #20]
 504 014a 032B     		cmp	r3, #3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 12


 505 014c 7FF75EAF 		ble	.L28
 506              	.LBE2:
 110:main.c        ****     }
 111:main.c        ****     update_median_isr_ClearPending();
 507              		.loc 1 111 0 is_stmt 1
 508 0150 FFF7FEFF 		bl	update_median_isr_ClearPending
 112:main.c        ****     
 113:main.c        **** }
 509              		.loc 1 113 0
 510 0154 00BF     		nop
 511 0156 1837     		adds	r7, r7, #24
 512              		.cfi_def_cfa_offset 8
 513 0158 BD46     		mov	sp, r7
 514              		.cfi_def_cfa_register 13
 515              		@ sp needed
 516 015a 80BD     		pop	{r7, pc}
 517              	.L30:
 518              		.align	2
 519              	.L29:
 520 015c 00000000 		.word	moving_median
 521 0160 00000000 		.word	tempArray
 522 0164 00000000 		.word	tmp
 523 0168 00000000 		.word	adcValue
 524              		.cfi_endproc
 525              	.LFE66:
 526              		.size	adc_update, .-adc_update
 527              		.section	.text.RxIsr,"ax",%progbits
 528              		.align	2
 529              		.global	RxIsr
 530              		.thumb
 531              		.thumb_func
 532              		.type	RxIsr, %function
 533              	RxIsr:
 534              	.LFB67:
 114:main.c        **** 
 115:main.c        **** 
 116:main.c        **** CY_ISR(RxIsr)
 117:main.c        **** {
 535              		.loc 1 117 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 8
 538              		@ frame_needed = 1, uses_anonymous_args = 0
 539 0000 90B5     		push	{r4, r7, lr}
 540              		.cfi_def_cfa_offset 12
 541              		.cfi_offset 4, -12
 542              		.cfi_offset 7, -8
 543              		.cfi_offset 14, -4
 544 0002 83B0     		sub	sp, sp, #12
 545              		.cfi_def_cfa_offset 24
 546 0004 00AF     		add	r7, sp, #0
 547              		.cfi_def_cfa_register 7
 548              	.L63:
 118:main.c        ****     uint8 rxStatus;         
 119:main.c        ****     uint8 rxData;           
 120:main.c        ****     
 121:main.c        ****     do
 122:main.c        ****     {
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 13


 123:main.c        ****         /* Read receiver status register */
 124:main.c        ****         rxStatus = UART_RXSTATUS_REG;
 549              		.loc 1 124 0
 550 0006 A24B     		ldr	r3, .L66
 551 0008 1B78     		ldrb	r3, [r3]
 552 000a FB70     		strb	r3, [r7, #3]
 125:main.c        **** 
 126:main.c        ****         if((rxStatus & (UART_RX_STS_BREAK      | UART_RX_STS_PAR_ERROR |
 127:main.c        ****                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 553              		.loc 1 127 0
 554 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 555 000e 03F01E03 		and	r3, r3, #30
 126:main.c        ****                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 556              		.loc 1 126 0
 557 0012 002B     		cmp	r3, #0
 558 0014 0CD0     		beq	.L32
 128:main.c        ****         {
 129:main.c        ****             /* ERROR handling. */
 130:main.c        ****             errorStatus |= rxStatus & ( UART_RX_STS_BREAK      | UART_RX_STS_PAR_ERROR | 
 559              		.loc 1 130 0
 560 0016 97F90330 		ldrsb	r3, [r7, #3]
 561 001a 03F01E03 		and	r3, r3, #30
 562 001e 5AB2     		sxtb	r2, r3
 563 0020 9C4B     		ldr	r3, .L66+4
 564 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 565 0024 5BB2     		sxtb	r3, r3
 566 0026 1343     		orrs	r3, r3, r2
 567 0028 5BB2     		sxtb	r3, r3
 568 002a DAB2     		uxtb	r2, r3
 569 002c 994B     		ldr	r3, .L66+4
 570 002e 1A70     		strb	r2, [r3]
 571              	.L32:
 131:main.c        ****                                         UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN);
 132:main.c        ****         }
 133:main.c        ****         
 134:main.c        ****         if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 572              		.loc 1 134 0
 573 0030 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 574 0032 03F02003 		and	r3, r3, #32
 575 0036 002B     		cmp	r3, #0
 576 0038 00F01F81 		beq	.L33
 135:main.c        ****         {
 136:main.c        ****             /* Read data from the RX data register */
 137:main.c        ****             rxData = UART_RXDATA_REG;
 577              		.loc 1 137 0
 578 003c 964B     		ldr	r3, .L66+8
 579 003e 1B78     		ldrb	r3, [r3]
 580 0040 BB70     		strb	r3, [r7, #2]
 138:main.c        ****             help[tt] = rxData;
 581              		.loc 1 138 0
 582 0042 964B     		ldr	r3, .L66+12
 583 0044 1B68     		ldr	r3, [r3]
 584 0046 9649     		ldr	r1, .L66+16
 585 0048 BA78     		ldrb	r2, [r7, #2]
 586 004a CA54     		strb	r2, [r1, r3]
 139:main.c        ****             tt++;
 587              		.loc 1 139 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 14


 588 004c 934B     		ldr	r3, .L66+12
 589 004e 1B68     		ldr	r3, [r3]
 590 0050 0133     		adds	r3, r3, #1
 591 0052 924A     		ldr	r2, .L66+12
 592 0054 1360     		str	r3, [r2]
 140:main.c        ****             if(tt==99){tt=0;}
 593              		.loc 1 140 0
 594 0056 914B     		ldr	r3, .L66+12
 595 0058 1B68     		ldr	r3, [r3]
 596 005a 632B     		cmp	r3, #99
 597 005c 02D1     		bne	.L34
 598              		.loc 1 140 0 is_stmt 0 discriminator 1
 599 005e 8F4B     		ldr	r3, .L66+12
 600 0060 0022     		movs	r2, #0
 601 0062 1A60     		str	r2, [r3]
 602              	.L34:
 141:main.c        ****             if(rxData=='b' ){start_calib=1;};
 603              		.loc 1 141 0 is_stmt 1
 604 0064 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 605 0066 622B     		cmp	r3, #98
 606 0068 02D1     		bne	.L35
 607              		.loc 1 141 0 is_stmt 0 discriminator 1
 608 006a 8E4B     		ldr	r3, .L66+20
 609 006c 0122     		movs	r2, #1
 610 006e 1A60     		str	r2, [r3]
 611              	.L35:
 142:main.c        ****             switch(data_read_mode)
 612              		.loc 1 142 0 is_stmt 1
 613 0070 8D4B     		ldr	r3, .L66+24
 614 0072 1B68     		ldr	r3, [r3]
 615 0074 062B     		cmp	r3, #6
 616 0076 00F20081 		bhi	.L33
 617 007a 01A2     		adr	r2, .L38
 618 007c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 619              		.p2align 2
 620              	.L38:
 621 0080 9D000000 		.word	.L37+1
 622 0084 D3000000 		.word	.L39+1
 623 0088 1B010000 		.word	.L40+1
 624 008c 6D010000 		.word	.L41+1
 625 0090 AF010000 		.word	.L42+1
 626 0094 F1010000 		.word	.L43+1
 627 0098 33020000 		.word	.L44+1
 628              		.p2align 1
 629              	.L37:
 143:main.c        ****             {
 144:main.c        ****                 case 0:
 145:main.c        ****                     if(rxData=='{' )
 630              		.loc 1 145 0
 631 009c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 632 009e 7B2B     		cmp	r3, #123
 633 00a0 40F0E880 		bne	.L64
 634              	.LBB7:
 146:main.c        ****                     {
 147:main.c        ****                         //aaaa
 148:main.c        ****                         for(int pp=1;pp<20;pp++){
 635              		.loc 1 148 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 15


 636 00a4 0123     		movs	r3, #1
 637 00a6 7B60     		str	r3, [r7, #4]
 638 00a8 07E0     		b	.L46
 639              	.L47:
 149:main.c        ****                             temp[pp] = ' ';
 640              		.loc 1 149 0 discriminator 3
 641 00aa 804A     		ldr	r2, .L66+28
 642 00ac 7B68     		ldr	r3, [r7, #4]
 643 00ae 1344     		add	r3, r3, r2
 644 00b0 2022     		movs	r2, #32
 645 00b2 1A70     		strb	r2, [r3]
 148:main.c        ****                             temp[pp] = ' ';
 646              		.loc 1 148 0 discriminator 3
 647 00b4 7B68     		ldr	r3, [r7, #4]
 648 00b6 0133     		adds	r3, r3, #1
 649 00b8 7B60     		str	r3, [r7, #4]
 650              	.L46:
 148:main.c        ****                             temp[pp] = ' ';
 651              		.loc 1 148 0 is_stmt 0 discriminator 1
 652 00ba 7B68     		ldr	r3, [r7, #4]
 653 00bc 132B     		cmp	r3, #19
 654 00be F4DD     		ble	.L47
 655              	.LBE7:
 150:main.c        ****                         }
 151:main.c        ****                         temp[0] = '\0';
 656              		.loc 1 151 0 is_stmt 1
 657 00c0 7A4B     		ldr	r3, .L66+28
 658 00c2 0022     		movs	r2, #0
 659 00c4 1A70     		strb	r2, [r3]
 152:main.c        ****                         data_read_mode++;
 660              		.loc 1 152 0
 661 00c6 784B     		ldr	r3, .L66+24
 662 00c8 1B68     		ldr	r3, [r3]
 663 00ca 0133     		adds	r3, r3, #1
 664 00cc 764A     		ldr	r2, .L66+24
 665 00ce 1360     		str	r3, [r2]
 153:main.c        ****                     }
 154:main.c        ****                 break;
 666              		.loc 1 154 0
 667 00d0 D0E0     		b	.L64
 668              	.L39:
 155:main.c        ****                 case 1:
 156:main.c        ****                     if(rxData=='x'){
 669              		.loc 1 156 0
 670 00d2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 671 00d4 782B     		cmp	r3, #120
 672 00d6 03D1     		bne	.L48
 157:main.c        ****                         data_read_mode = 2;}
 673              		.loc 1 157 0
 674 00d8 734B     		ldr	r3, .L66+24
 675 00da 0222     		movs	r2, #2
 676 00dc 1A60     		str	r2, [r3]
 158:main.c        ****                     else if(rxData=='p'){
 159:main.c        ****                         data_read_mode = 3;}
 160:main.c        ****                     else if(rxData=='i'){
 161:main.c        ****                         data_read_mode = 4;}
 162:main.c        ****                     else if(rxData=='d'){
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 16


 163:main.c        ****                         data_read_mode = 5;}
 164:main.c        ****                     else if(rxData=='c'){
 165:main.c        ****                         data_read_mode = 6;}
 166:main.c        ****                 break;
 677              		.loc 1 166 0
 678 00de CBE0     		b	.L65
 679              	.L48:
 158:main.c        ****                     else if(rxData=='p'){
 680              		.loc 1 158 0
 681 00e0 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 682 00e2 702B     		cmp	r3, #112
 683 00e4 03D1     		bne	.L50
 159:main.c        ****                     else if(rxData=='i'){
 684              		.loc 1 159 0
 685 00e6 704B     		ldr	r3, .L66+24
 686 00e8 0322     		movs	r2, #3
 687 00ea 1A60     		str	r2, [r3]
 688              		.loc 1 166 0
 689 00ec C4E0     		b	.L65
 690              	.L50:
 160:main.c        ****                         data_read_mode = 4;}
 691              		.loc 1 160 0
 692 00ee BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 693 00f0 692B     		cmp	r3, #105
 694 00f2 03D1     		bne	.L51
 161:main.c        ****                     else if(rxData=='d'){
 695              		.loc 1 161 0
 696 00f4 6C4B     		ldr	r3, .L66+24
 697 00f6 0422     		movs	r2, #4
 698 00f8 1A60     		str	r2, [r3]
 699              		.loc 1 166 0
 700 00fa BDE0     		b	.L65
 701              	.L51:
 162:main.c        ****                         data_read_mode = 5;}
 702              		.loc 1 162 0
 703 00fc BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 704 00fe 642B     		cmp	r3, #100
 705 0100 03D1     		bne	.L52
 163:main.c        ****                     else if(rxData=='c'){
 706              		.loc 1 163 0
 707 0102 694B     		ldr	r3, .L66+24
 708 0104 0522     		movs	r2, #5
 709 0106 1A60     		str	r2, [r3]
 710              		.loc 1 166 0
 711 0108 B6E0     		b	.L65
 712              	.L52:
 164:main.c        ****                         data_read_mode = 6;}
 713              		.loc 1 164 0
 714 010a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 715 010c 632B     		cmp	r3, #99
 716 010e 40F0B380 		bne	.L65
 165:main.c        ****                 break;
 717              		.loc 1 165 0
 718 0112 654B     		ldr	r3, .L66+24
 719 0114 0622     		movs	r2, #6
 720 0116 1A60     		str	r2, [r3]
 721              		.loc 1 166 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 17


 722 0118 AEE0     		b	.L65
 723              	.L40:
 167:main.c        ****                 case 2: //x
 168:main.c        ****                     if(rxData != '}'){
 724              		.loc 1 168 0
 725 011a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 726 011c 7D2B     		cmp	r3, #125
 727 011e 0AD0     		beq	.L53
 169:main.c        ****                         temp[nn] = rxData;
 728              		.loc 1 169 0
 729 0120 634B     		ldr	r3, .L66+32
 730 0122 1B68     		ldr	r3, [r3]
 731 0124 6149     		ldr	r1, .L66+28
 732 0126 BA78     		ldrb	r2, [r7, #2]
 733 0128 CA54     		strb	r2, [r1, r3]
 170:main.c        ****                         nn++;
 734              		.loc 1 170 0
 735 012a 614B     		ldr	r3, .L66+32
 736 012c 1B68     		ldr	r3, [r3]
 737 012e 0133     		adds	r3, r3, #1
 738 0130 5F4A     		ldr	r2, .L66+32
 739 0132 1360     		str	r3, [r2]
 171:main.c        ****                     }
 172:main.c        ****                     else {
 173:main.c        ****                         
 174:main.c        ****                         new_pos[cyl_no] = (int) strtol(temp, (char **)NULL, 10);
 175:main.c        ****                         new_pos_set[cyl_no] = 1;
 176:main.c        ****                         nn=0; 
 177:main.c        ****                         temp[0] = '\0';
 178:main.c        ****                         data_read_mode = 0;
 179:main.c        ****                         
 180:main.c        ****                     }
 181:main.c        ****                   
 182:main.c        ****                 break;
 740              		.loc 1 182 0
 741 0134 A1E0     		b	.L33
 742              	.L53:
 174:main.c        ****                         new_pos_set[cyl_no] = 1;
 743              		.loc 1 174 0
 744 0136 5F4B     		ldr	r3, .L66+36
 745 0138 1C68     		ldr	r4, [r3]
 746 013a 0A22     		movs	r2, #10
 747 013c 0021     		movs	r1, #0
 748 013e 5B48     		ldr	r0, .L66+28
 749 0140 FFF7FEFF 		bl	strtol
 750 0144 0246     		mov	r2, r0
 751 0146 5C4B     		ldr	r3, .L66+40
 752 0148 43F82420 		str	r2, [r3, r4, lsl #2]
 175:main.c        ****                         nn=0; 
 753              		.loc 1 175 0
 754 014c 594B     		ldr	r3, .L66+36
 755 014e 1B68     		ldr	r3, [r3]
 756 0150 5A4A     		ldr	r2, .L66+44
 757 0152 0121     		movs	r1, #1
 758 0154 42F82310 		str	r1, [r2, r3, lsl #2]
 176:main.c        ****                         temp[0] = '\0';
 759              		.loc 1 176 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 18


 760 0158 554B     		ldr	r3, .L66+32
 761 015a 0022     		movs	r2, #0
 762 015c 1A60     		str	r2, [r3]
 177:main.c        ****                         data_read_mode = 0;
 763              		.loc 1 177 0
 764 015e 534B     		ldr	r3, .L66+28
 765 0160 0022     		movs	r2, #0
 766 0162 1A70     		strb	r2, [r3]
 178:main.c        ****                         
 767              		.loc 1 178 0
 768 0164 504B     		ldr	r3, .L66+24
 769 0166 0022     		movs	r2, #0
 770 0168 1A60     		str	r2, [r3]
 771              		.loc 1 182 0
 772 016a 86E0     		b	.L33
 773              	.L41:
 183:main.c        ****                 case 3: //p
 184:main.c        ****                     if(rxData != '}'){
 774              		.loc 1 184 0
 775 016c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 776 016e 7D2B     		cmp	r3, #125
 777 0170 0AD0     		beq	.L55
 185:main.c        ****                         temp[nn] = rxData;
 778              		.loc 1 185 0
 779 0172 4F4B     		ldr	r3, .L66+32
 780 0174 1B68     		ldr	r3, [r3]
 781 0176 4D49     		ldr	r1, .L66+28
 782 0178 BA78     		ldrb	r2, [r7, #2]
 783 017a CA54     		strb	r2, [r1, r3]
 186:main.c        ****                         nn++;
 784              		.loc 1 186 0
 785 017c 4C4B     		ldr	r3, .L66+32
 786 017e 1B68     		ldr	r3, [r3]
 787 0180 0133     		adds	r3, r3, #1
 788 0182 4B4A     		ldr	r2, .L66+32
 789 0184 1360     		str	r3, [r2]
 187:main.c        ****                     }
 188:main.c        ****                     else {
 189:main.c        ****                         pid[0] = strtod(temp, NULL);
 190:main.c        ****                         nn=0;
 191:main.c        ****                         temp[0] = '\0';
 192:main.c        ****                         data_read_mode = 0;
 193:main.c        ****                     }
 194:main.c        ****                     
 195:main.c        ****                 break;
 790              		.loc 1 195 0
 791 0186 78E0     		b	.L33
 792              	.L55:
 189:main.c        ****                         nn=0;
 793              		.loc 1 189 0
 794 0188 0021     		movs	r1, #0
 795 018a 4848     		ldr	r0, .L66+28
 796 018c FFF7FEFF 		bl	strtod
 797 0190 0346     		mov	r3, r0
 798 0192 0C46     		mov	r4, r1
 799 0194 4A4A     		ldr	r2, .L66+48
 800 0196 C2E90034 		strd	r3, [r2]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 19


 190:main.c        ****                         temp[0] = '\0';
 801              		.loc 1 190 0
 802 019a 454B     		ldr	r3, .L66+32
 803 019c 0022     		movs	r2, #0
 804 019e 1A60     		str	r2, [r3]
 191:main.c        ****                         data_read_mode = 0;
 805              		.loc 1 191 0
 806 01a0 424B     		ldr	r3, .L66+28
 807 01a2 0022     		movs	r2, #0
 808 01a4 1A70     		strb	r2, [r3]
 192:main.c        ****                     }
 809              		.loc 1 192 0
 810 01a6 404B     		ldr	r3, .L66+24
 811 01a8 0022     		movs	r2, #0
 812 01aa 1A60     		str	r2, [r3]
 813              		.loc 1 195 0
 814 01ac 65E0     		b	.L33
 815              	.L42:
 196:main.c        ****                 case 4: //i
 197:main.c        ****                     if(rxData != '}'){
 816              		.loc 1 197 0
 817 01ae BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 818 01b0 7D2B     		cmp	r3, #125
 819 01b2 0AD0     		beq	.L57
 198:main.c        ****                         temp[nn] = rxData;
 820              		.loc 1 198 0
 821 01b4 3E4B     		ldr	r3, .L66+32
 822 01b6 1B68     		ldr	r3, [r3]
 823 01b8 3C49     		ldr	r1, .L66+28
 824 01ba BA78     		ldrb	r2, [r7, #2]
 825 01bc CA54     		strb	r2, [r1, r3]
 199:main.c        ****                         nn++;
 826              		.loc 1 199 0
 827 01be 3C4B     		ldr	r3, .L66+32
 828 01c0 1B68     		ldr	r3, [r3]
 829 01c2 0133     		adds	r3, r3, #1
 830 01c4 3A4A     		ldr	r2, .L66+32
 831 01c6 1360     		str	r3, [r2]
 200:main.c        ****                     }
 201:main.c        ****                     else {
 202:main.c        ****                         pid[1] = strtod(temp, NULL);
 203:main.c        ****                         nn=0;
 204:main.c        ****                         temp[0] = '\0';
 205:main.c        ****                         data_read_mode = 0;
 206:main.c        ****                     }
 207:main.c        ****                 break;
 832              		.loc 1 207 0
 833 01c8 57E0     		b	.L33
 834              	.L57:
 202:main.c        ****                         nn=0;
 835              		.loc 1 202 0
 836 01ca 0021     		movs	r1, #0
 837 01cc 3748     		ldr	r0, .L66+28
 838 01ce FFF7FEFF 		bl	strtod
 839 01d2 0346     		mov	r3, r0
 840 01d4 0C46     		mov	r4, r1
 841 01d6 3A4A     		ldr	r2, .L66+48
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 20


 842 01d8 C2E90234 		strd	r3, [r2, #8]
 203:main.c        ****                         temp[0] = '\0';
 843              		.loc 1 203 0
 844 01dc 344B     		ldr	r3, .L66+32
 845 01de 0022     		movs	r2, #0
 846 01e0 1A60     		str	r2, [r3]
 204:main.c        ****                         data_read_mode = 0;
 847              		.loc 1 204 0
 848 01e2 324B     		ldr	r3, .L66+28
 849 01e4 0022     		movs	r2, #0
 850 01e6 1A70     		strb	r2, [r3]
 205:main.c        ****                     }
 851              		.loc 1 205 0
 852 01e8 2F4B     		ldr	r3, .L66+24
 853 01ea 0022     		movs	r2, #0
 854 01ec 1A60     		str	r2, [r3]
 855              		.loc 1 207 0
 856 01ee 44E0     		b	.L33
 857              	.L43:
 208:main.c        ****                 case 5: //d
 209:main.c        ****                     if(rxData != '}'){
 858              		.loc 1 209 0
 859 01f0 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 860 01f2 7D2B     		cmp	r3, #125
 861 01f4 0AD0     		beq	.L59
 210:main.c        ****                         temp[nn] = rxData;
 862              		.loc 1 210 0
 863 01f6 2E4B     		ldr	r3, .L66+32
 864 01f8 1B68     		ldr	r3, [r3]
 865 01fa 2C49     		ldr	r1, .L66+28
 866 01fc BA78     		ldrb	r2, [r7, #2]
 867 01fe CA54     		strb	r2, [r1, r3]
 211:main.c        ****                         nn++;
 868              		.loc 1 211 0
 869 0200 2B4B     		ldr	r3, .L66+32
 870 0202 1B68     		ldr	r3, [r3]
 871 0204 0133     		adds	r3, r3, #1
 872 0206 2A4A     		ldr	r2, .L66+32
 873 0208 1360     		str	r3, [r2]
 212:main.c        ****                     }
 213:main.c        ****                     else {
 214:main.c        ****                         pid[2] = strtod(temp, NULL);
 215:main.c        ****                         nn=0;
 216:main.c        ****                         temp[0] = '\0';
 217:main.c        ****                         data_read_mode = 0;
 218:main.c        ****                     }
 219:main.c        ****                 break;
 874              		.loc 1 219 0
 875 020a 36E0     		b	.L33
 876              	.L59:
 214:main.c        ****                         nn=0;
 877              		.loc 1 214 0
 878 020c 0021     		movs	r1, #0
 879 020e 2748     		ldr	r0, .L66+28
 880 0210 FFF7FEFF 		bl	strtod
 881 0214 0346     		mov	r3, r0
 882 0216 0C46     		mov	r4, r1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 21


 883 0218 294A     		ldr	r2, .L66+48
 884 021a C2E90434 		strd	r3, [r2, #16]
 215:main.c        ****                         temp[0] = '\0';
 885              		.loc 1 215 0
 886 021e 244B     		ldr	r3, .L66+32
 887 0220 0022     		movs	r2, #0
 888 0222 1A60     		str	r2, [r3]
 216:main.c        ****                         data_read_mode = 0;
 889              		.loc 1 216 0
 890 0224 214B     		ldr	r3, .L66+28
 891 0226 0022     		movs	r2, #0
 892 0228 1A70     		strb	r2, [r3]
 217:main.c        ****                     }
 893              		.loc 1 217 0
 894 022a 1F4B     		ldr	r3, .L66+24
 895 022c 0022     		movs	r2, #0
 896 022e 1A60     		str	r2, [r3]
 897              		.loc 1 219 0
 898 0230 23E0     		b	.L33
 899              	.L44:
 220:main.c        ****                 case 6: //c
 221:main.c        ****                     if(rxData != '}'){
 900              		.loc 1 221 0
 901 0232 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 902 0234 7D2B     		cmp	r3, #125
 903 0236 0AD0     		beq	.L61
 222:main.c        ****                         temp[nn] = rxData;
 904              		.loc 1 222 0
 905 0238 1D4B     		ldr	r3, .L66+32
 906 023a 1B68     		ldr	r3, [r3]
 907 023c 1B49     		ldr	r1, .L66+28
 908 023e BA78     		ldrb	r2, [r7, #2]
 909 0240 CA54     		strb	r2, [r1, r3]
 223:main.c        ****                         nn++;
 910              		.loc 1 223 0
 911 0242 1B4B     		ldr	r3, .L66+32
 912 0244 1B68     		ldr	r3, [r3]
 913 0246 0133     		adds	r3, r3, #1
 914 0248 194A     		ldr	r2, .L66+32
 915 024a 1360     		str	r3, [r2]
 224:main.c        ****                     }
 225:main.c        ****                     else {
 226:main.c        ****                         cyl_no = (int) strtol(temp, (char **)NULL, 10);
 227:main.c        ****                         nn=0; 
 228:main.c        ****                         temp[0] = '\0';
 229:main.c        ****                         data_read_mode = 0;
 230:main.c        ****                     }
 231:main.c        ****                   
 232:main.c        ****                 break;
 916              		.loc 1 232 0
 917 024c 15E0     		b	.L33
 918              	.L61:
 226:main.c        ****                         nn=0; 
 919              		.loc 1 226 0
 920 024e 0A22     		movs	r2, #10
 921 0250 0021     		movs	r1, #0
 922 0252 1648     		ldr	r0, .L66+28
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 22


 923 0254 FFF7FEFF 		bl	strtol
 924 0258 0246     		mov	r2, r0
 925 025a 164B     		ldr	r3, .L66+36
 926 025c 1A60     		str	r2, [r3]
 227:main.c        ****                         temp[0] = '\0';
 927              		.loc 1 227 0
 928 025e 144B     		ldr	r3, .L66+32
 929 0260 0022     		movs	r2, #0
 930 0262 1A60     		str	r2, [r3]
 228:main.c        ****                         data_read_mode = 0;
 931              		.loc 1 228 0
 932 0264 114B     		ldr	r3, .L66+28
 933 0266 0022     		movs	r2, #0
 934 0268 1A70     		strb	r2, [r3]
 229:main.c        ****                     }
 935              		.loc 1 229 0
 936 026a 0F4B     		ldr	r3, .L66+24
 937 026c 0022     		movs	r2, #0
 938 026e 1A60     		str	r2, [r3]
 939              		.loc 1 232 0
 940 0270 00BF     		nop
 941 0272 02E0     		b	.L33
 942              	.L64:
 154:main.c        ****                 case 1:
 943              		.loc 1 154 0
 944 0274 00BF     		nop
 945 0276 00E0     		b	.L33
 946              	.L65:
 166:main.c        ****                 case 2: //x
 947              		.loc 1 166 0
 948 0278 00BF     		nop
 949              	.L33:
 233:main.c        ****             }
 234:main.c        ****             
 235:main.c        ****             if(errorStatus == 0u)
 236:main.c        ****             {
 237:main.c        ****                 /* Send data backward */
 238:main.c        ****                 //UART_TXDATA_REG = rxData;
 239:main.c        ****             }
 240:main.c        ****         }
 241:main.c        ****     }while((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u);
 950              		.loc 1 241 0
 951 027a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 952 027c 03F02003 		and	r3, r3, #32
 953 0280 002B     		cmp	r3, #0
 954 0282 7FF4C0AE 		bne	.L63
 242:main.c        **** }
 955              		.loc 1 242 0
 956 0286 00BF     		nop
 957 0288 0C37     		adds	r7, r7, #12
 958              		.cfi_def_cfa_offset 12
 959 028a BD46     		mov	sp, r7
 960              		.cfi_def_cfa_register 13
 961              		@ sp needed
 962 028c 90BD     		pop	{r4, r7, pc}
 963              	.L67:
 964 028e 00BF     		.align	2
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 23


 965              	.L66:
 966 0290 69650040 		.word	1073767785
 967 0294 00000000 		.word	errorStatus
 968 0298 4A650040 		.word	1073767754
 969 029c 00000000 		.word	tt
 970 02a0 00000000 		.word	help
 971 02a4 00000000 		.word	start_calib
 972 02a8 00000000 		.word	data_read_mode
 973 02ac 00000000 		.word	temp
 974 02b0 00000000 		.word	nn
 975 02b4 00000000 		.word	cyl_no
 976 02b8 00000000 		.word	new_pos
 977 02bc 00000000 		.word	new_pos_set
 978 02c0 00000000 		.word	pid
 979              		.cfi_endproc
 980              	.LFE67:
 981              		.size	RxIsr, .-RxIsr
 982              		.section	.rodata
 983              		.align	2
 984              	.LC0:
 985 0000 25303864 		.ascii	"%08d\011%08.2f\011%08d\011%08.2f\000"
 985      09253038 
 985      2E326609 
 985      25303864 
 985      09253038 
 986              		.align	2
 987              	.LC1:
 988 0018 25303864 		.ascii	"%08d\011%08.2d\011%08d\011%08.2d\012\000"
 988      09253038 
 988      2E326409 
 988      25303864 
 988      09253038 
 989              		.global	__aeabi_i2d
 990              		.global	__aeabi_dsub
 991              		.global	__aeabi_dmul
 992              		.global	__aeabi_dadd
 993              		.global	__aeabi_ddiv
 994              		.global	__aeabi_d2iz
 995 0031 000000   		.align	2
 996              	.LC2:
 997 0034 55505045 		.ascii	"UPPER:\011Lower Offset: %d \011Upper Offset: %d \011"
 997      523A094C 
 997      6F776572 
 997      204F6666 
 997      7365743A 
 998 005f 20414443 		.ascii	" ADC Diff: %d\012\000"
 998      20446966 
 998      663A2025 
 998      640A00
 999 006e 0000     		.align	2
 1000              	.LC3:
 1001 0070 4C4F5745 		.ascii	"LOWER:\011Lower Offset: %d \011Upper Offset: %d \011"
 1001      523A094C 
 1001      6F776572 
 1001      204F6666 
 1001      7365743A 
 1002 009b 20414443 		.ascii	" ADC Diff: %d\012\000"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 24


 1002      20446966 
 1002      663A2025 
 1002      640A00
 1003 00aa 0000     		.align	2
 1004              	.LC4:
 1005 00ac 4C6F7765 		.ascii	"Lower Offset: %d \011 Upper Offset: %d \012\000"
 1005      72204F66 
 1005      66736574 
 1005      3A202564 
 1005      20092055 
 1006              		.global	__aeabi_ui2d
 1007              		.section	.text.main,"ax",%progbits
 1008              		.align	2
 1009              		.global	main
 1010              		.thumb
 1011              		.thumb_func
 1012              		.type	main, %function
 1013              	main:
 1014              	.LFB68:
 243:main.c        **** 
 244:main.c        **** int main()
 245:main.c        **** {
 1015              		.loc 1 245 0
 1016              		.cfi_startproc
 1017              		@ args = 0, pretend = 0, frame = 64
 1018              		@ frame_needed = 1, uses_anonymous_args = 0
 1019 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1020              		.cfi_def_cfa_offset 20
 1021              		.cfi_offset 4, -20
 1022              		.cfi_offset 5, -16
 1023              		.cfi_offset 6, -12
 1024              		.cfi_offset 7, -8
 1025              		.cfi_offset 14, -4
 1026 0002 97B0     		sub	sp, sp, #92
 1027              		.cfi_def_cfa_offset 112
 1028 0004 06AF     		add	r7, sp, #24
 1029              		.cfi_def_cfa 7, 88
 1030              	.LBB8:
 246:main.c        ****     //initializing variables
 247:main.c        ****     for(int g = 0;g<CYL_NO;g++){
 1031              		.loc 1 247 0
 1032 0006 0023     		movs	r3, #0
 1033 0008 FB63     		str	r3, [r7, #60]
 1034 000a 49E0     		b	.L69
 1035              	.L70:
 248:main.c        ****         new_pos_set[g]  = 0;
 1036              		.loc 1 248 0 discriminator 3
 1037 000c 524A     		ldr	r2, .L89+8
 1038 000e FB6B     		ldr	r3, [r7, #60]
 1039 0010 0021     		movs	r1, #0
 1040 0012 42F82310 		str	r1, [r2, r3, lsl #2]
 249:main.c        ****         new_pos[g]      = 0;
 1041              		.loc 1 249 0 discriminator 3
 1042 0016 514A     		ldr	r2, .L89+12
 1043 0018 FB6B     		ldr	r3, [r7, #60]
 1044 001a 0021     		movs	r1, #0
 1045 001c 42F82310 		str	r1, [r2, r3, lsl #2]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 25


 250:main.c        ****         pos[g]          = 2000;
 1046              		.loc 1 250 0 discriminator 3
 1047 0020 4F4A     		ldr	r2, .L89+16
 1048 0022 FB6B     		ldr	r3, [r7, #60]
 1049 0024 4FF4FA61 		mov	r1, #2000
 1050 0028 42F82310 		str	r1, [r2, r3, lsl #2]
 251:main.c        ****         pulse[g]        = 0;
 1051              		.loc 1 251 0 discriminator 3
 1052 002c 4D4A     		ldr	r2, .L89+20
 1053 002e FB6B     		ldr	r3, [r7, #60]
 1054 0030 0021     		movs	r1, #0
 1055 0032 42F82310 		str	r1, [r2, r3, lsl #2]
 252:main.c        ****         pulse_temp[g]   = 0;
 1056              		.loc 1 252 0 discriminator 3
 1057 0036 4C4A     		ldr	r2, .L89+24
 1058 0038 FB6B     		ldr	r3, [r7, #60]
 1059 003a 0021     		movs	r1, #0
 1060 003c 42F82310 		str	r1, [r2, r3, lsl #2]
 253:main.c        ****         err[g]          = 0;
 1061              		.loc 1 253 0 discriminator 3
 1062 0040 4A4A     		ldr	r2, .L89+28
 1063 0042 FB6B     		ldr	r3, [r7, #60]
 1064 0044 DB00     		lsls	r3, r3, #3
 1065 0046 1A44     		add	r2, r2, r3
 1066 0048 4FF00003 		mov	r3, #0
 1067 004c 4FF00004 		mov	r4, #0
 1068 0050 C2E90034 		strd	r3, [r2]
 254:main.c        ****         adcValue[g]     = 0;
 1069              		.loc 1 254 0 discriminator 3
 1070 0054 464A     		ldr	r2, .L89+32
 1071 0056 FB6B     		ldr	r3, [r7, #60]
 1072 0058 0021     		movs	r1, #0
 1073 005a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 255:main.c        ****         der[g]          = 0;
 1074              		.loc 1 255 0 discriminator 3
 1075 005e 454A     		ldr	r2, .L89+36
 1076 0060 FB6B     		ldr	r3, [r7, #60]
 1077 0062 DB00     		lsls	r3, r3, #3
 1078 0064 1A44     		add	r2, r2, r3
 1079 0066 4FF00003 		mov	r3, #0
 1080 006a 4FF00004 		mov	r4, #0
 1081 006e C2E90034 		strd	r3, [r2]
 256:main.c        ****         prev_err[g]     = 0;
 1082              		.loc 1 256 0 discriminator 3
 1083 0072 414A     		ldr	r2, .L89+40
 1084 0074 FB6B     		ldr	r3, [r7, #60]
 1085 0076 DB00     		lsls	r3, r3, #3
 1086 0078 1A44     		add	r2, r2, r3
 1087 007a 4FF00003 		mov	r3, #0
 1088 007e 4FF00004 		mov	r4, #0
 1089 0082 C2E90034 		strd	r3, [r2]
 257:main.c        ****         pid_integral[g] = 0;
 1090              		.loc 1 257 0 discriminator 3
 1091 0086 3D4A     		ldr	r2, .L89+44
 1092 0088 FB6B     		ldr	r3, [r7, #60]
 1093 008a DB00     		lsls	r3, r3, #3
 1094 008c 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 26


 1095 008e 4FF00003 		mov	r3, #0
 1096 0092 4FF00004 		mov	r4, #0
 1097 0096 C2E90034 		strd	r3, [r2]
 247:main.c        ****         new_pos_set[g]  = 0;
 1098              		.loc 1 247 0 discriminator 3
 1099 009a FB6B     		ldr	r3, [r7, #60]
 1100 009c 0133     		adds	r3, r3, #1
 1101 009e FB63     		str	r3, [r7, #60]
 1102              	.L69:
 247:main.c        ****         new_pos_set[g]  = 0;
 1103              		.loc 1 247 0 is_stmt 0 discriminator 1
 1104 00a0 FB6B     		ldr	r3, [r7, #60]
 1105 00a2 032B     		cmp	r3, #3
 1106 00a4 B2DD     		ble	.L70
 1107              	.LBE8:
 258:main.c        ****     }
 259:main.c        ****     //PWM variables
 260:main.c        ****     PWM_0_Start();
 1108              		.loc 1 260 0 is_stmt 1
 1109 00a6 FFF7FEFF 		bl	PWM_0_Start
 261:main.c        ****     PWM_1_Start();
 1110              		.loc 1 261 0
 1111 00aa FFF7FEFF 		bl	PWM_1_Start
 262:main.c        ****     PWM_2_Start();
 1112              		.loc 1 262 0
 1113 00ae FFF7FEFF 		bl	PWM_2_Start
 263:main.c        ****     PWM_3_Start();
 1114              		.loc 1 263 0
 1115 00b2 FFF7FEFF 		bl	PWM_3_Start
 264:main.c        ****     ADC_0_Start();
 1116              		.loc 1 264 0
 1117 00b6 FFF7FEFF 		bl	ADC_0_Start
 265:main.c        ****     ADC_0_StartConvert();
 1118              		.loc 1 265 0
 1119 00ba FFF7FEFF 		bl	ADC_0_StartConvert
 266:main.c        ****     AMux_0_Init();
 1120              		.loc 1 266 0
 1121 00be FFF7FEFF 		bl	AMux_0_Start
 267:main.c        ****     
 268:main.c        ****     UART_Start();           /* Start communication component */
 1122              		.loc 1 268 0
 1123 00c2 FFF7FEFF 		bl	UART_Start
 269:main.c        **** 
 270:main.c        **** #if(INTERRUPT_CODE_ENABLED == ENABLED)
 271:main.c        ****     isr_rx_StartEx(RxIsr);
 1124              		.loc 1 271 0
 1125 00c6 2E48     		ldr	r0, .L89+48
 1126 00c8 FFF7FEFF 		bl	isr_rx_StartEx
 272:main.c        ****     update_median_isr_StartEx(adc_update);
 1127              		.loc 1 272 0
 1128 00cc 2D48     		ldr	r0, .L89+52
 1129 00ce FFF7FEFF 		bl	update_median_isr_StartEx
 273:main.c        **** #endif /* INTERRUPT_CODE_ENABLED == ENABLED */
 274:main.c        ****     
 275:main.c        ****     CyGlobalIntEnable;      /* Enable global interrupts. */
 1130              		.loc 1 275 0
 1131              		.syntax unified
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 27


 1132              	@ 275 "main.c" 1
 1133 00d2 62B6     		CPSIE   i
 1134              	@ 0 "" 2
 276:main.c        ****     
 277:main.c        ****     double dt;
 278:main.c        ****     double time;
 279:main.c        ****     
 280:main.c        ****     dt = 0.025; //initialised dt, corrected by timer  below
 1135              		.loc 1 280 0
 1136              		.thumb
 1137              		.syntax unified
 1138 00d4 1EA4     		adr	r4, .L89
 1139 00d6 D4E90034 		ldrd	r3, [r4]
 1140 00da C7E90C34 		strd	r3, [r7, #48]
 281:main.c        **** 
 282:main.c        ****     sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[1],err[1]);
 1141              		.loc 1 282 0
 1142 00de 244B     		ldr	r3, .L89+32
 1143 00e0 1B88     		ldrh	r3, [r3]
 1144 00e2 1D46     		mov	r5, r3
 1145 00e4 214B     		ldr	r3, .L89+28
 1146 00e6 18CB     		ldmia	r3, {r3-r4}
 1147 00e8 214A     		ldr	r2, .L89+32
 1148 00ea 5288     		ldrh	r2, [r2, #2]
 1149 00ec 1046     		mov	r0, r2
 1150 00ee 1F4A     		ldr	r2, .L89+28
 1151 00f0 D2E90212 		ldrd	r1, [r2, #8]
 1152 00f4 CDE90412 		strd	r1, [sp, #16]
 1153 00f8 0290     		str	r0, [sp, #8]
 1154 00fa CDE90034 		strd	r3, [sp]
 1155 00fe 2A46     		mov	r2, r5
 1156 0100 2149     		ldr	r1, .L89+56
 1157 0102 2248     		ldr	r0, .L89+60
 1158 0104 FFF7FEFF 		bl	sprintf
 283:main.c        ****     UART_PutString(sendValue);
 1159              		.loc 1 283 0
 1160 0108 2048     		ldr	r0, .L89+60
 1161 010a FFF7FEFF 		bl	UART_PutString
 284:main.c        ****     
 285:main.c        ****     median_timer_Start();
 1162              		.loc 1 285 0
 1163 010e FFF7FEFF 		bl	median_timer_Start
 286:main.c        ****     Timer_1_Start();
 1164              		.loc 1 286 0
 1165 0112 FFF7FEFF 		bl	Timer_1_Start
 1166              	.L88:
 287:main.c        ****     
 288:main.c        ****     for(;;)
 289:main.c        ****     {
 290:main.c        ****         Timer_1_WriteCounter(65535);
 1167              		.loc 1 290 0
 1168 0116 4FF6FF70 		movw	r0, #65535
 1169 011a FFF7FEFF 		bl	Timer_1_WriteCounter
 291:main.c        ****         //sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[1],err[1]);
 292:main.c        ****         sprintf(sendValue,"%08d\t%08.2d\t%08d\t%08.2d\n",adcValue[0],adcValue[1],adcValue[2],adcVal
 1170              		.loc 1 292 0
 1171 011e 144B     		ldr	r3, .L89+32
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 28


 1172 0120 1B88     		ldrh	r3, [r3]
 1173 0122 1946     		mov	r1, r3
 1174 0124 124B     		ldr	r3, .L89+32
 1175 0126 5B88     		ldrh	r3, [r3, #2]
 1176 0128 1846     		mov	r0, r3
 1177 012a 114B     		ldr	r3, .L89+32
 1178 012c 9B88     		ldrh	r3, [r3, #4]
 1179 012e 1A46     		mov	r2, r3
 1180 0130 0F4B     		ldr	r3, .L89+32
 1181 0132 DB88     		ldrh	r3, [r3, #6]
 1182 0134 0193     		str	r3, [sp, #4]
 1183 0136 0092     		str	r2, [sp]
 1184 0138 0346     		mov	r3, r0
 1185 013a 0A46     		mov	r2, r1
 1186 013c 1449     		ldr	r1, .L89+64
 1187 013e 1348     		ldr	r0, .L89+60
 1188 0140 FFF7FEFF 		bl	sprintf
 293:main.c        ****         
 294:main.c        ****         UART_PutString(sendValue);
 1189              		.loc 1 294 0
 1190 0144 1148     		ldr	r0, .L89+60
 1191 0146 FFF7FEFF 		bl	UART_PutString
 1192              	.LBB9:
 295:main.c        ****         //sprintf(sendValue,"%08d\t%08.2f\t%08d\t%08.2f",adcValue[0],err[0],adcValue[1],err[1]);
 296:main.c        ****         //UART_PutString(sendValue);
 297:main.c        ****         /* START PID CODE */
 298:main.c        ****         for(int cyl = 0;cyl<CYL_NO;cyl++){
 1193              		.loc 1 298 0
 1194 014a 0023     		movs	r3, #0
 1195 014c FB62     		str	r3, [r7, #44]
 1196 014e F9E0     		b	.L71
 1197              	.L90:
 1198              		.align	3
 1199              	.L89:
 1200 0150 9A999999 		.word	-1717986918
 1201 0154 9999993F 		.word	1067030937
 1202 0158 00000000 		.word	new_pos_set
 1203 015c 00000000 		.word	new_pos
 1204 0160 00000000 		.word	pos
 1205 0164 00000000 		.word	pulse
 1206 0168 00000000 		.word	pulse_temp
 1207 016c 00000000 		.word	err
 1208 0170 00000000 		.word	adcValue
 1209 0174 00000000 		.word	der
 1210 0178 00000000 		.word	prev_err
 1211 017c 00000000 		.word	pid_integral
 1212 0180 00000000 		.word	RxIsr
 1213 0184 00000000 		.word	adc_update
 1214 0188 00000000 		.word	.LC0
 1215 018c 00000000 		.word	sendValue
 1216 0190 18000000 		.word	.LC1
 1217              	.L73:
 299:main.c        ****             if(new_pos_set[cyl]){
 1218              		.loc 1 299 0
 1219 0194 934A     		ldr	r2, .L91
 1220 0196 FB6A     		ldr	r3, [r7, #44]
 1221 0198 52F82330 		ldr	r3, [r2, r3, lsl #2]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 29


 1222 019c 002B     		cmp	r3, #0
 1223 019e 0CD0     		beq	.L72
 300:main.c        ****                 pos[cyl] = new_pos[cyl];
 1224              		.loc 1 300 0
 1225 01a0 914A     		ldr	r2, .L91+4
 1226 01a2 FB6A     		ldr	r3, [r7, #44]
 1227 01a4 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1228 01a8 9049     		ldr	r1, .L91+8
 1229 01aa FB6A     		ldr	r3, [r7, #44]
 1230 01ac 41F82320 		str	r2, [r1, r3, lsl #2]
 301:main.c        ****                 new_pos_set[cyl] = 0;
 1231              		.loc 1 301 0
 1232 01b0 8C4A     		ldr	r2, .L91
 1233 01b2 FB6A     		ldr	r3, [r7, #44]
 1234 01b4 0021     		movs	r1, #0
 1235 01b6 42F82310 		str	r1, [r2, r3, lsl #2]
 1236              	.L72:
 302:main.c        ****             }
 303:main.c        ****             
 304:main.c        ****             err[cyl] = -pos[cyl] + adcValue[cyl];
 1237              		.loc 1 304 0 discriminator 2
 1238 01ba 8D4A     		ldr	r2, .L91+12
 1239 01bc FB6A     		ldr	r3, [r7, #44]
 1240 01be 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1241 01c2 1946     		mov	r1, r3
 1242 01c4 894A     		ldr	r2, .L91+8
 1243 01c6 FB6A     		ldr	r3, [r7, #44]
 1244 01c8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1245 01cc CB1A     		subs	r3, r1, r3
 1246 01ce 1846     		mov	r0, r3
 1247 01d0 FFF7FEFF 		bl	__aeabi_i2d
 1248 01d4 0346     		mov	r3, r0
 1249 01d6 0C46     		mov	r4, r1
 1250 01d8 8649     		ldr	r1, .L91+16
 1251 01da FA6A     		ldr	r2, [r7, #44]
 1252 01dc D200     		lsls	r2, r2, #3
 1253 01de 0A44     		add	r2, r2, r1
 1254 01e0 C2E90034 		strd	r3, [r2]
 305:main.c        ****             der[cyl] = err[cyl] - prev_err[cyl];
 1255              		.loc 1 305 0 discriminator 2
 1256 01e4 834A     		ldr	r2, .L91+16
 1257 01e6 FB6A     		ldr	r3, [r7, #44]
 1258 01e8 DB00     		lsls	r3, r3, #3
 1259 01ea 1344     		add	r3, r3, r2
 1260 01ec D3E90001 		ldrd	r0, [r3]
 1261 01f0 814A     		ldr	r2, .L91+20
 1262 01f2 FB6A     		ldr	r3, [r7, #44]
 1263 01f4 DB00     		lsls	r3, r3, #3
 1264 01f6 1344     		add	r3, r3, r2
 1265 01f8 18CB     		ldmia	r3, {r3-r4}
 1266 01fa 1A46     		mov	r2, r3
 1267 01fc 2346     		mov	r3, r4
 1268 01fe FFF7FEFF 		bl	__aeabi_dsub
 1269 0202 0346     		mov	r3, r0
 1270 0204 0C46     		mov	r4, r1
 1271 0206 7D49     		ldr	r1, .L91+24
 1272 0208 FA6A     		ldr	r2, [r7, #44]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 30


 1273 020a D200     		lsls	r2, r2, #3
 1274 020c 0A44     		add	r2, r2, r1
 1275 020e C2E90034 		strd	r3, [r2]
 306:main.c        ****             pid_integral[cyl] = err[cyl]* dt + pid_integral[cyl];
 1276              		.loc 1 306 0 discriminator 2
 1277 0212 784A     		ldr	r2, .L91+16
 1278 0214 FB6A     		ldr	r3, [r7, #44]
 1279 0216 DB00     		lsls	r3, r3, #3
 1280 0218 1344     		add	r3, r3, r2
 1281 021a D3E90001 		ldrd	r0, [r3]
 1282 021e D7E90C23 		ldrd	r2, [r7, #48]
 1283 0222 FFF7FEFF 		bl	__aeabi_dmul
 1284 0226 0346     		mov	r3, r0
 1285 0228 0C46     		mov	r4, r1
 1286 022a 1846     		mov	r0, r3
 1287 022c 2146     		mov	r1, r4
 1288 022e 744A     		ldr	r2, .L91+28
 1289 0230 FB6A     		ldr	r3, [r7, #44]
 1290 0232 DB00     		lsls	r3, r3, #3
 1291 0234 1344     		add	r3, r3, r2
 1292 0236 18CB     		ldmia	r3, {r3-r4}
 1293 0238 1A46     		mov	r2, r3
 1294 023a 2346     		mov	r3, r4
 1295 023c FFF7FEFF 		bl	__aeabi_dadd
 1296 0240 0346     		mov	r3, r0
 1297 0242 0C46     		mov	r4, r1
 1298 0244 6E49     		ldr	r1, .L91+28
 1299 0246 FA6A     		ldr	r2, [r7, #44]
 1300 0248 D200     		lsls	r2, r2, #3
 1301 024a 0A44     		add	r2, r2, r1
 1302 024c C2E90034 		strd	r3, [r2]
 307:main.c        ****             pulse_temp[cyl] = pid[0] * err[cyl] + ( pid[1] * pid_integral[cyl] ) + ( pid[2] * der[c
 1303              		.loc 1 307 0 discriminator 2
 1304 0250 6C4B     		ldr	r3, .L91+32
 1305 0252 D3E90001 		ldrd	r0, [r3]
 1306 0256 674A     		ldr	r2, .L91+16
 1307 0258 FB6A     		ldr	r3, [r7, #44]
 1308 025a DB00     		lsls	r3, r3, #3
 1309 025c 1344     		add	r3, r3, r2
 1310 025e 18CB     		ldmia	r3, {r3-r4}
 1311 0260 1A46     		mov	r2, r3
 1312 0262 2346     		mov	r3, r4
 1313 0264 FFF7FEFF 		bl	__aeabi_dmul
 1314 0268 0346     		mov	r3, r0
 1315 026a 0C46     		mov	r4, r1
 1316 026c 1D46     		mov	r5, r3
 1317 026e 2646     		mov	r6, r4
 1318 0270 644B     		ldr	r3, .L91+32
 1319 0272 D3E90201 		ldrd	r0, [r3, #8]
 1320 0276 624A     		ldr	r2, .L91+28
 1321 0278 FB6A     		ldr	r3, [r7, #44]
 1322 027a DB00     		lsls	r3, r3, #3
 1323 027c 1344     		add	r3, r3, r2
 1324 027e 18CB     		ldmia	r3, {r3-r4}
 1325 0280 1A46     		mov	r2, r3
 1326 0282 2346     		mov	r3, r4
 1327 0284 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 31


 1328 0288 0346     		mov	r3, r0
 1329 028a 0C46     		mov	r4, r1
 1330 028c 1A46     		mov	r2, r3
 1331 028e 2346     		mov	r3, r4
 1332 0290 2846     		mov	r0, r5
 1333 0292 3146     		mov	r1, r6
 1334 0294 FFF7FEFF 		bl	__aeabi_dadd
 1335 0298 0346     		mov	r3, r0
 1336 029a 0C46     		mov	r4, r1
 1337 029c 1D46     		mov	r5, r3
 1338 029e 2646     		mov	r6, r4
 1339 02a0 584B     		ldr	r3, .L91+32
 1340 02a2 D3E90401 		ldrd	r0, [r3, #16]
 1341 02a6 554A     		ldr	r2, .L91+24
 1342 02a8 FB6A     		ldr	r3, [r7, #44]
 1343 02aa DB00     		lsls	r3, r3, #3
 1344 02ac 1344     		add	r3, r3, r2
 1345 02ae 18CB     		ldmia	r3, {r3-r4}
 1346 02b0 1A46     		mov	r2, r3
 1347 02b2 2346     		mov	r3, r4
 1348 02b4 FFF7FEFF 		bl	__aeabi_dmul
 1349 02b8 0346     		mov	r3, r0
 1350 02ba 0C46     		mov	r4, r1
 1351 02bc 1846     		mov	r0, r3
 1352 02be 2146     		mov	r1, r4
 1353 02c0 D7E90C23 		ldrd	r2, [r7, #48]
 1354 02c4 FFF7FEFF 		bl	__aeabi_ddiv
 1355 02c8 0346     		mov	r3, r0
 1356 02ca 0C46     		mov	r4, r1
 1357 02cc 1A46     		mov	r2, r3
 1358 02ce 2346     		mov	r3, r4
 1359 02d0 2846     		mov	r0, r5
 1360 02d2 3146     		mov	r1, r6
 1361 02d4 FFF7FEFF 		bl	__aeabi_dadd
 1362 02d8 0346     		mov	r3, r0
 1363 02da 0C46     		mov	r4, r1
 1364 02dc 1846     		mov	r0, r3
 1365 02de 2146     		mov	r1, r4
 1366 02e0 FFF7FEFF 		bl	__aeabi_d2iz
 1367 02e4 0146     		mov	r1, r0
 1368 02e6 484A     		ldr	r2, .L91+36
 1369 02e8 FB6A     		ldr	r3, [r7, #44]
 1370 02ea 42F82310 		str	r1, [r2, r3, lsl #2]
 308:main.c        ****             
 309:main.c        ****             pulse[cyl] = pulseCheck(pulse_temp[cyl],offsets[cyl][1],offsets[cyl][0]);
 1371              		.loc 1 309 0 discriminator 2
 1372 02ee 464A     		ldr	r2, .L91+36
 1373 02f0 FB6A     		ldr	r3, [r7, #44]
 1374 02f2 52F82300 		ldr	r0, [r2, r3, lsl #2]
 1375 02f6 454A     		ldr	r2, .L91+40
 1376 02f8 FB6A     		ldr	r3, [r7, #44]
 1377 02fa DB00     		lsls	r3, r3, #3
 1378 02fc 1344     		add	r3, r3, r2
 1379 02fe 5968     		ldr	r1, [r3, #4]
 1380 0300 424A     		ldr	r2, .L91+40
 1381 0302 FB6A     		ldr	r3, [r7, #44]
 1382 0304 52F83330 		ldr	r3, [r2, r3, lsl #3]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 32


 1383 0308 1A46     		mov	r2, r3
 1384 030a FFF7FEFF 		bl	pulseCheck
 1385 030e 0146     		mov	r1, r0
 1386 0310 3F4A     		ldr	r2, .L91+44
 1387 0312 FB6A     		ldr	r3, [r7, #44]
 1388 0314 42F82310 		str	r1, [r2, r3, lsl #2]
 310:main.c        ****             
 311:main.c        ****             writePWM(cyl,pulse[cyl]);
 1389              		.loc 1 311 0 discriminator 2
 1390 0318 3D4A     		ldr	r2, .L91+44
 1391 031a FB6A     		ldr	r3, [r7, #44]
 1392 031c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1393 0320 1946     		mov	r1, r3
 1394 0322 F86A     		ldr	r0, [r7, #44]
 1395 0324 FFF7FEFF 		bl	writePWM
 312:main.c        ****             prev_err[cyl] = err[cyl];
 1396              		.loc 1 312 0 discriminator 2
 1397 0328 324A     		ldr	r2, .L91+16
 1398 032a FB6A     		ldr	r3, [r7, #44]
 1399 032c DB00     		lsls	r3, r3, #3
 1400 032e 1344     		add	r3, r3, r2
 1401 0330 18CB     		ldmia	r3, {r3-r4}
 1402 0332 3149     		ldr	r1, .L91+20
 1403 0334 FA6A     		ldr	r2, [r7, #44]
 1404 0336 D200     		lsls	r2, r2, #3
 1405 0338 0A44     		add	r2, r2, r1
 1406 033a C2E90034 		strd	r3, [r2]
 298:main.c        ****             if(new_pos_set[cyl]){
 1407              		.loc 1 298 0 discriminator 2
 1408 033e FB6A     		ldr	r3, [r7, #44]
 1409 0340 0133     		adds	r3, r3, #1
 1410 0342 FB62     		str	r3, [r7, #44]
 1411              	.L71:
 298:main.c        ****             if(new_pos_set[cyl]){
 1412              		.loc 1 298 0 is_stmt 0 discriminator 1
 1413 0344 FB6A     		ldr	r3, [r7, #44]
 1414 0346 032B     		cmp	r3, #3
 1415 0348 7FF724AF 		ble	.L73
 1416              	.LBE9:
 313:main.c        ****         }
 314:main.c        ****         
 315:main.c        ****         
 316:main.c        ****         /* END PID CODE */
 317:main.c        ****         if(start_calib){
 1417              		.loc 1 317 0 is_stmt 1
 1418 034c 314B     		ldr	r3, .L91+48
 1419 034e 1B68     		ldr	r3, [r3]
 1420 0350 002B     		cmp	r3, #0
 1421 0352 00F0D380 		beq	.L74
 1422              	.LBB10:
 318:main.c        ****                 
 319:main.c        ****             int calib_cyl = 1;
 1423              		.loc 1 319 0
 1424 0356 0123     		movs	r3, #1
 1425 0358 FB60     		str	r3, [r7, #12]
 320:main.c        ****             int upper_offset_set = 0;
 1426              		.loc 1 320 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 33


 1427 035a 0023     		movs	r3, #0
 1428 035c BB62     		str	r3, [r7, #40]
 321:main.c        ****             int lower_offset_set = 0;
 1429              		.loc 1 321 0
 1430 035e 0023     		movs	r3, #0
 1431 0360 7B62     		str	r3, [r7, #36]
 322:main.c        ****             int upper_offset = 160;
 1432              		.loc 1 322 0
 1433 0362 A023     		movs	r3, #160
 1434 0364 3B62     		str	r3, [r7, #32]
 323:main.c        ****             int lower_offset = -110;
 1435              		.loc 1 323 0
 1436 0366 6FF06D03 		mvn	r3, #109
 1437 036a FB61     		str	r3, [r7, #28]
 324:main.c        ****             int lower_check_no = 0;
 1438              		.loc 1 324 0
 1439 036c 0023     		movs	r3, #0
 1440 036e BB61     		str	r3, [r7, #24]
 325:main.c        ****             int upper_check_no = 0;
 1441              		.loc 1 325 0
 1442 0370 0023     		movs	r3, #0
 1443 0372 7B61     		str	r3, [r7, #20]
 326:main.c        ****             uint16 prev_adcValue = adcValue[0];
 1444              		.loc 1 326 0
 1445 0374 1E4B     		ldr	r3, .L91+12
 1446 0376 1B88     		ldrh	r3, [r3]	@ movhi
 1447 0378 7B81     		strh	r3, [r7, #10]	@ movhi
 327:main.c        ****             uint16 diff = 0;
 1448              		.loc 1 327 0
 1449 037a 0023     		movs	r3, #0
 1450 037c 3B81     		strh	r3, [r7, #8]	@ movhi
 1451              	.LBB11:
 328:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1452              		.loc 1 328 0
 1453 037e 0023     		movs	r3, #0
 1454 0380 3B61     		str	r3, [r7, #16]
 1455 0382 06E0     		b	.L75
 1456              	.L76:
 329:main.c        ****                 writePWM(g,0);
 1457              		.loc 1 329 0 discriminator 3
 1458 0384 0021     		movs	r1, #0
 1459 0386 3869     		ldr	r0, [r7, #16]
 1460 0388 FFF7FEFF 		bl	writePWM
 328:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1461              		.loc 1 328 0 discriminator 3
 1462 038c 3B69     		ldr	r3, [r7, #16]
 1463 038e 0133     		adds	r3, r3, #1
 1464 0390 3B61     		str	r3, [r7, #16]
 1465              	.L75:
 328:main.c        ****             for(int g = 0;g<CYL_NO;g++)
 1466              		.loc 1 328 0 is_stmt 0 discriminator 1
 1467 0392 3B69     		ldr	r3, [r7, #16]
 1468 0394 032B     		cmp	r3, #3
 1469 0396 F5DD     		ble	.L76
 1470              	.LBE11:
 330:main.c        ****                 
 331:main.c        ****             CyDelay(1000);
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 34


 1471              		.loc 1 331 0 is_stmt 1
 1472 0398 4FF47A70 		mov	r0, #1000
 1473 039c FFF7FEFF 		bl	CyDelay
 332:main.c        ****         
 333:main.c        ****             while(upper_offset_set==0 || lower_offset_set==0){
 1474              		.loc 1 333 0
 1475 03a0 94E0     		b	.L77
 1476              	.L86:
 334:main.c        ****                 
 335:main.c        ****                 prev_adcValue = adcValue[calib_cyl];
 1477              		.loc 1 335 0
 1478 03a2 134A     		ldr	r2, .L91+12
 1479 03a4 FB68     		ldr	r3, [r7, #12]
 1480 03a6 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 1481 03aa 7B81     		strh	r3, [r7, #10]	@ movhi
 336:main.c        ****                 if(upper_offset_set==0){
 1482              		.loc 1 336 0
 1483 03ac BB6A     		ldr	r3, [r7, #40]
 1484 03ae 002B     		cmp	r3, #0
 1485 03b0 42D1     		bne	.L78
 337:main.c        ****                     writePWM(calib_cyl,upper_offset);
 1486              		.loc 1 337 0
 1487 03b2 396A     		ldr	r1, [r7, #32]
 1488 03b4 F868     		ldr	r0, [r7, #12]
 1489 03b6 FFF7FEFF 		bl	writePWM
 338:main.c        ****                     CyDelay(200);
 1490              		.loc 1 338 0
 1491 03ba C820     		movs	r0, #200
 1492 03bc FFF7FEFF 		bl	CyDelay
 339:main.c        ****                     diff = abs(prev_adcValue-adcValue[calib_cyl]);
 1493              		.loc 1 339 0
 1494 03c0 7B89     		ldrh	r3, [r7, #10]
 1495 03c2 0B49     		ldr	r1, .L91+12
 1496 03c4 FA68     		ldr	r2, [r7, #12]
 1497 03c6 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1498 03ca 9B1A     		subs	r3, r3, r2
 1499 03cc 002B     		cmp	r3, #0
 1500 03ce B8BF     		it	lt
 1501 03d0 5B42     		rsblt	r3, r3, #0
 1502 03d2 3B81     		strh	r3, [r7, #8]	@ movhi
 340:main.c        ****                     if(diff>10){
 1503              		.loc 1 340 0
 1504 03d4 3B89     		ldrh	r3, [r7, #8]
 1505 03d6 0A2B     		cmp	r3, #10
 1506 03d8 1ED9     		bls	.L79
 341:main.c        ****                         upper_check_no ++;;
 1507              		.loc 1 341 0
 1508 03da 7B69     		ldr	r3, [r7, #20]
 1509 03dc 0133     		adds	r3, r3, #1
 1510 03de 7B61     		str	r3, [r7, #20]
 1511 03e0 1FE0     		b	.L80
 1512              	.L92:
 1513 03e2 00BF     		.align	2
 1514              	.L91:
 1515 03e4 00000000 		.word	new_pos_set
 1516 03e8 00000000 		.word	new_pos
 1517 03ec 00000000 		.word	pos
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 35


 1518 03f0 00000000 		.word	adcValue
 1519 03f4 00000000 		.word	err
 1520 03f8 00000000 		.word	prev_err
 1521 03fc 00000000 		.word	der
 1522 0400 00000000 		.word	pid_integral
 1523 0404 00000000 		.word	pid
 1524 0408 00000000 		.word	pulse_temp
 1525 040c 00000000 		.word	offsets
 1526 0410 00000000 		.word	pulse
 1527 0414 00000000 		.word	start_calib
 1528              	.L79:
 342:main.c        ****                     }else{
 343:main.c        ****                         upper_offset = upper_offset + 1;
 1529              		.loc 1 343 0
 1530 0418 3B6A     		ldr	r3, [r7, #32]
 1531 041a 0133     		adds	r3, r3, #1
 1532 041c 3B62     		str	r3, [r7, #32]
 344:main.c        ****                         upper_check_no=0;
 1533              		.loc 1 344 0
 1534 041e 0023     		movs	r3, #0
 1535 0420 7B61     		str	r3, [r7, #20]
 1536              	.L80:
 345:main.c        ****                     }
 346:main.c        ****                     sprintf(sendValue,"UPPER:\tLower Offset: %d \tUpper Offset: %d \t ADC Diff: %d\
 1537              		.loc 1 346 0
 1538 0422 3B89     		ldrh	r3, [r7, #8]
 1539 0424 0093     		str	r3, [sp]
 1540 0426 3B6A     		ldr	r3, [r7, #32]
 1541 0428 FA69     		ldr	r2, [r7, #28]
 1542 042a 5549     		ldr	r1, .L93+16
 1543 042c 5548     		ldr	r0, .L93+20
 1544 042e FFF7FEFF 		bl	sprintf
 347:main.c        ****                     UART_PutString(sendValue);
 1545              		.loc 1 347 0
 1546 0432 5448     		ldr	r0, .L93+20
 1547 0434 FFF7FEFF 		bl	UART_PutString
 1548              	.L78:
 348:main.c        ****                 }
 349:main.c        ****                 writePWM(calib_cyl,0);
 1549              		.loc 1 349 0
 1550 0438 0021     		movs	r1, #0
 1551 043a F868     		ldr	r0, [r7, #12]
 1552 043c FFF7FEFF 		bl	writePWM
 350:main.c        ****                 CyDelay(500);
 1553              		.loc 1 350 0
 1554 0440 4FF4FA70 		mov	r0, #500
 1555 0444 FFF7FEFF 		bl	CyDelay
 351:main.c        ****                 
 352:main.c        ****                 prev_adcValue = adcValue[calib_cyl];
 1556              		.loc 1 352 0
 1557 0448 4F4A     		ldr	r2, .L93+24
 1558 044a FB68     		ldr	r3, [r7, #12]
 1559 044c 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 1560 0450 7B81     		strh	r3, [r7, #10]	@ movhi
 353:main.c        ****                 if(lower_offset_set==0){
 1561              		.loc 1 353 0
 1562 0452 7B6A     		ldr	r3, [r7, #36]
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 36


 1563 0454 002B     		cmp	r3, #0
 1564 0456 27D1     		bne	.L81
 354:main.c        ****                     writePWM(calib_cyl,lower_offset);
 1565              		.loc 1 354 0
 1566 0458 F969     		ldr	r1, [r7, #28]
 1567 045a F868     		ldr	r0, [r7, #12]
 1568 045c FFF7FEFF 		bl	writePWM
 355:main.c        ****                     CyDelay(200);
 1569              		.loc 1 355 0
 1570 0460 C820     		movs	r0, #200
 1571 0462 FFF7FEFF 		bl	CyDelay
 356:main.c        ****                     diff = abs(prev_adcValue-adcValue[calib_cyl]);
 1572              		.loc 1 356 0
 1573 0466 7B89     		ldrh	r3, [r7, #10]
 1574 0468 4749     		ldr	r1, .L93+24
 1575 046a FA68     		ldr	r2, [r7, #12]
 1576 046c 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 1577 0470 9B1A     		subs	r3, r3, r2
 1578 0472 002B     		cmp	r3, #0
 1579 0474 B8BF     		it	lt
 1580 0476 5B42     		rsblt	r3, r3, #0
 1581 0478 3B81     		strh	r3, [r7, #8]	@ movhi
 357:main.c        ****                     if(diff>10){
 1582              		.loc 1 357 0
 1583 047a 3B89     		ldrh	r3, [r7, #8]
 1584 047c 0A2B     		cmp	r3, #10
 1585 047e 03D9     		bls	.L82
 358:main.c        ****                         lower_check_no++;
 1586              		.loc 1 358 0
 1587 0480 BB69     		ldr	r3, [r7, #24]
 1588 0482 0133     		adds	r3, r3, #1
 1589 0484 BB61     		str	r3, [r7, #24]
 1590 0486 04E0     		b	.L83
 1591              	.L82:
 359:main.c        ****                     }else{
 360:main.c        ****                         lower_offset = lower_offset - 1;
 1592              		.loc 1 360 0
 1593 0488 FB69     		ldr	r3, [r7, #28]
 1594 048a 013B     		subs	r3, r3, #1
 1595 048c FB61     		str	r3, [r7, #28]
 361:main.c        ****                         lower_check_no = 0;
 1596              		.loc 1 361 0
 1597 048e 0023     		movs	r3, #0
 1598 0490 BB61     		str	r3, [r7, #24]
 1599              	.L83:
 362:main.c        ****                     }
 363:main.c        ****                     sprintf(sendValue,"LOWER:\tLower Offset: %d \tUpper Offset: %d \t ADC Diff: %d\
 1600              		.loc 1 363 0
 1601 0492 3B89     		ldrh	r3, [r7, #8]
 1602 0494 0093     		str	r3, [sp]
 1603 0496 3B6A     		ldr	r3, [r7, #32]
 1604 0498 FA69     		ldr	r2, [r7, #28]
 1605 049a 3C49     		ldr	r1, .L93+28
 1606 049c 3948     		ldr	r0, .L93+20
 1607 049e FFF7FEFF 		bl	sprintf
 364:main.c        ****                     UART_PutString(sendValue);
 1608              		.loc 1 364 0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 37


 1609 04a2 3848     		ldr	r0, .L93+20
 1610 04a4 FFF7FEFF 		bl	UART_PutString
 1611              	.L81:
 365:main.c        ****             
 366:main.c        ****                 }
 367:main.c        ****                 
 368:main.c        ****                 if(upper_check_no>2){
 1612              		.loc 1 368 0
 1613 04a8 7B69     		ldr	r3, [r7, #20]
 1614 04aa 022B     		cmp	r3, #2
 1615 04ac 01DD     		ble	.L84
 369:main.c        ****                     upper_offset_set=1;}
 1616              		.loc 1 369 0
 1617 04ae 0123     		movs	r3, #1
 1618 04b0 BB62     		str	r3, [r7, #40]
 1619              	.L84:
 370:main.c        ****                 if(lower_check_no>2){
 1620              		.loc 1 370 0
 1621 04b2 BB69     		ldr	r3, [r7, #24]
 1622 04b4 022B     		cmp	r3, #2
 1623 04b6 01DD     		ble	.L85
 371:main.c        ****                     lower_offset_set=1;}
 1624              		.loc 1 371 0
 1625 04b8 0123     		movs	r3, #1
 1626 04ba 7B62     		str	r3, [r7, #36]
 1627              	.L85:
 372:main.c        ****                 
 373:main.c        ****                 writePWM(calib_cyl,0);
 1628              		.loc 1 373 0
 1629 04bc 0021     		movs	r1, #0
 1630 04be F868     		ldr	r0, [r7, #12]
 1631 04c0 FFF7FEFF 		bl	writePWM
 374:main.c        ****                 CyDelay(500);
 1632              		.loc 1 374 0
 1633 04c4 4FF4FA70 		mov	r0, #500
 1634 04c8 FFF7FEFF 		bl	CyDelay
 1635              	.L77:
 333:main.c        ****                 
 1636              		.loc 1 333 0
 1637 04cc BB6A     		ldr	r3, [r7, #40]
 1638 04ce 002B     		cmp	r3, #0
 1639 04d0 3FF467AF 		beq	.L86
 333:main.c        ****                 
 1640              		.loc 1 333 0 is_stmt 0 discriminator 1
 1641 04d4 7B6A     		ldr	r3, [r7, #36]
 1642 04d6 002B     		cmp	r3, #0
 1643 04d8 3FF463AF 		beq	.L86
 375:main.c        ****                 
 376:main.c        ****             }
 377:main.c        ****             
 378:main.c        ****             sprintf(sendValue,"Lower Offset: %d \t Upper Offset: %d \n",lower_offset,upper_offset);
 1644              		.loc 1 378 0 is_stmt 1
 1645 04dc 3B6A     		ldr	r3, [r7, #32]
 1646 04de FA69     		ldr	r2, [r7, #28]
 1647 04e0 2B49     		ldr	r1, .L93+32
 1648 04e2 2848     		ldr	r0, .L93+20
 1649 04e4 FFF7FEFF 		bl	sprintf
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 38


 379:main.c        ****             UART_PutString(sendValue);
 1650              		.loc 1 379 0
 1651 04e8 2648     		ldr	r0, .L93+20
 1652 04ea FFF7FEFF 		bl	UART_PutString
 380:main.c        ****             
 381:main.c        ****             //while(1){CyDelay(100);};
 382:main.c        ****             start_calib = 0;
 1653              		.loc 1 382 0
 1654 04ee 294B     		ldr	r3, .L93+36
 1655 04f0 0022     		movs	r2, #0
 1656 04f2 1A60     		str	r2, [r3]
 383:main.c        ****             CyDelay(15000);
 1657              		.loc 1 383 0
 1658 04f4 43F69820 		movw	r0, #15000
 1659 04f8 FFF7FEFF 		bl	CyDelay
 1660              	.L74:
 1661              	.LBE10:
 384:main.c        ****         }
 385:main.c        ****         CyDelay(5);
 1662              		.loc 1 385 0
 1663 04fc 0520     		movs	r0, #5
 1664 04fe FFF7FEFF 		bl	CyDelay
 386:main.c        ****         time = Timer_1_ReadCounter();
 1665              		.loc 1 386 0
 1666 0502 FFF7FEFF 		bl	Timer_1_ReadCounter
 1667 0506 0346     		mov	r3, r0
 1668 0508 1846     		mov	r0, r3
 1669 050a FFF7FEFF 		bl	__aeabi_ui2d
 1670 050e 0346     		mov	r3, r0
 1671 0510 0C46     		mov	r4, r1
 1672 0512 C7E90034 		strd	r3, [r7]
 387:main.c        ****         dt=(double)(65535-time)/1000000;
 1673              		.loc 1 387 0
 1674 0516 D7E90023 		ldrd	r2, [r7]
 1675 051a 15A1     		adr	r1, .L93
 1676 051c D1E90001 		ldrd	r0, [r1]
 1677 0520 FFF7FEFF 		bl	__aeabi_dsub
 1678 0524 0346     		mov	r3, r0
 1679 0526 0C46     		mov	r4, r1
 1680 0528 1846     		mov	r0, r3
 1681 052a 2146     		mov	r1, r4
 1682 052c 12A3     		adr	r3, .L93+8
 1683 052e D3E90023 		ldrd	r2, [r3]
 1684 0532 FFF7FEFF 		bl	__aeabi_ddiv
 1685 0536 0346     		mov	r3, r0
 1686 0538 0C46     		mov	r4, r1
 1687 053a C7E90C34 		strd	r3, [r7, #48]
 388:main.c        ****         dts[dts_ct] = dt;
 1688              		.loc 1 388 0
 1689 053e 164B     		ldr	r3, .L93+40
 1690 0540 1B68     		ldr	r3, [r3]
 1691 0542 164A     		ldr	r2, .L93+44
 1692 0544 DB00     		lsls	r3, r3, #3
 1693 0546 1A44     		add	r2, r2, r3
 1694 0548 D7E90C34 		ldrd	r3, [r7, #48]
 1695 054c C2E90034 		strd	r3, [r2]
 389:main.c        ****         dts_ct++;
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 39


 1696              		.loc 1 389 0
 1697 0550 114B     		ldr	r3, .L93+40
 1698 0552 1B68     		ldr	r3, [r3]
 1699 0554 0133     		adds	r3, r3, #1
 1700 0556 104A     		ldr	r2, .L93+40
 1701 0558 1360     		str	r3, [r2]
 390:main.c        ****         if(dts_ct>29){
 1702              		.loc 1 390 0
 1703 055a 0F4B     		ldr	r3, .L93+40
 1704 055c 1B68     		ldr	r3, [r3]
 1705 055e 1D2B     		cmp	r3, #29
 1706 0560 7FF7D9AD 		ble	.L88
 391:main.c        ****             dts_ct=0;
 1707              		.loc 1 391 0
 1708 0564 0C4B     		ldr	r3, .L93+40
 1709 0566 0022     		movs	r2, #0
 1710 0568 1A60     		str	r2, [r3]
 392:main.c        ****         }
 393:main.c        ****     }
 1711              		.loc 1 393 0
 1712 056a D4E5     		b	.L88
 1713              	.L94:
 1714 056c AFF30080 		.align	3
 1715              	.L93:
 1716 0570 00000000 		.word	0
 1717 0574 E0FFEF40 		.word	1089470432
 1718 0578 00000000 		.word	0
 1719 057c 80842E41 		.word	1093567616
 1720 0580 34000000 		.word	.LC2
 1721 0584 00000000 		.word	sendValue
 1722 0588 00000000 		.word	adcValue
 1723 058c 70000000 		.word	.LC3
 1724 0590 AC000000 		.word	.LC4
 1725 0594 00000000 		.word	start_calib
 1726 0598 00000000 		.word	dts_ct
 1727 059c 00000000 		.word	dts
 1728              		.cfi_endproc
 1729              	.LFE68:
 1730              		.size	main, .-main
 1731              		.text
 1732              	.Letext0:
 1733              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1734              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1735              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1736              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 1737              		.section	.debug_info,"",%progbits
 1738              	.Ldebug_info0:
 1739 0000 F2050000 		.4byte	0x5f2
 1740 0004 0400     		.2byte	0x4
 1741 0006 00000000 		.4byte	.Ldebug_abbrev0
 1742 000a 04       		.byte	0x4
 1743 000b 01       		.uleb128 0x1
 1744 000c 6F000000 		.4byte	.LASF59
 1745 0010 0C       		.byte	0xc
 1746 0011 8C020000 		.4byte	.LASF60
 1747 0015 1A020000 		.4byte	.LASF61
 1748 0019 00000000 		.4byte	.Ldebug_ranges0+0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 40


 1749 001d 00000000 		.4byte	0
 1750 0021 00000000 		.4byte	.Ldebug_line0
 1751 0025 02       		.uleb128 0x2
 1752 0026 01       		.byte	0x1
 1753 0027 06       		.byte	0x6
 1754 0028 47010000 		.4byte	.LASF0
 1755 002c 02       		.uleb128 0x2
 1756 002d 01       		.byte	0x1
 1757 002e 08       		.byte	0x8
 1758 002f 98010000 		.4byte	.LASF1
 1759 0033 02       		.uleb128 0x2
 1760 0034 02       		.byte	0x2
 1761 0035 05       		.byte	0x5
 1762 0036 4A000000 		.4byte	.LASF2
 1763 003a 02       		.uleb128 0x2
 1764 003b 02       		.byte	0x2
 1765 003c 07       		.byte	0x7
 1766 003d 07020000 		.4byte	.LASF3
 1767 0041 03       		.uleb128 0x3
 1768 0042 C5020000 		.4byte	.LASF9
 1769 0046 02       		.byte	0x2
 1770 0047 3F       		.byte	0x3f
 1771 0048 4C000000 		.4byte	0x4c
 1772 004c 02       		.uleb128 0x2
 1773 004d 04       		.byte	0x4
 1774 004e 05       		.byte	0x5
 1775 004f 77010000 		.4byte	.LASF4
 1776 0053 02       		.uleb128 0x2
 1777 0054 04       		.byte	0x4
 1778 0055 07       		.byte	0x7
 1779 0056 98020000 		.4byte	.LASF5
 1780 005a 02       		.uleb128 0x2
 1781 005b 08       		.byte	0x8
 1782 005c 05       		.byte	0x5
 1783 005d FD000000 		.4byte	.LASF6
 1784 0061 02       		.uleb128 0x2
 1785 0062 08       		.byte	0x8
 1786 0063 07       		.byte	0x7
 1787 0064 D8010000 		.4byte	.LASF7
 1788 0068 04       		.uleb128 0x4
 1789 0069 04       		.byte	0x4
 1790 006a 05       		.byte	0x5
 1791 006b 696E7400 		.ascii	"int\000"
 1792 006f 02       		.uleb128 0x2
 1793 0070 04       		.byte	0x4
 1794 0071 07       		.byte	0x7
 1795 0072 EF010000 		.4byte	.LASF8
 1796 0076 03       		.uleb128 0x3
 1797 0077 75020000 		.4byte	.LASF10
 1798 007b 03       		.byte	0x3
 1799 007c 2C       		.byte	0x2c
 1800 007d 41000000 		.4byte	0x41
 1801 0081 05       		.uleb128 0x5
 1802 0082 2C010000 		.4byte	.LASF11
 1803 0086 04       		.byte	0x4
 1804 0087 9201     		.2byte	0x192
 1805 0089 2C000000 		.4byte	0x2c
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 41


 1806 008d 05       		.uleb128 0x5
 1807 008e 10010000 		.4byte	.LASF12
 1808 0092 04       		.byte	0x4
 1809 0093 9301     		.2byte	0x193
 1810 0095 3A000000 		.4byte	0x3a
 1811 0099 02       		.uleb128 0x2
 1812 009a 04       		.byte	0x4
 1813 009b 04       		.byte	0x4
 1814 009c 53010000 		.4byte	.LASF13
 1815 00a0 02       		.uleb128 0x2
 1816 00a1 08       		.byte	0x8
 1817 00a2 04       		.byte	0x4
 1818 00a3 27030000 		.4byte	.LASF14
 1819 00a7 02       		.uleb128 0x2
 1820 00a8 01       		.byte	0x1
 1821 00a9 08       		.byte	0x8
 1822 00aa 66020000 		.4byte	.LASF15
 1823 00ae 05       		.uleb128 0x5
 1824 00af 93020000 		.4byte	.LASF16
 1825 00b3 04       		.byte	0x4
 1826 00b4 3C02     		.2byte	0x23c
 1827 00b6 BA000000 		.4byte	0xba
 1828 00ba 06       		.uleb128 0x6
 1829 00bb 81000000 		.4byte	0x81
 1830 00bf 02       		.uleb128 0x2
 1831 00c0 08       		.byte	0x8
 1832 00c1 04       		.byte	0x4
 1833 00c2 00000000 		.4byte	.LASF17
 1834 00c6 02       		.uleb128 0x2
 1835 00c7 04       		.byte	0x4
 1836 00c8 07       		.byte	0x7
 1837 00c9 61000000 		.4byte	.LASF18
 1838 00cd 07       		.uleb128 0x7
 1839 00ce 59010000 		.4byte	.LASF23
 1840 00d2 01       		.byte	0x1
 1841 00d3 15       		.byte	0x15
 1842 00d4 00000000 		.4byte	.LFB64
 1843 00d8 78000000 		.4byte	.LFE64-.LFB64
 1844 00dc 01       		.uleb128 0x1
 1845 00dd 9C       		.byte	0x9c
 1846 00de FF000000 		.4byte	0xff
 1847 00e2 08       		.uleb128 0x8
 1848 00e3 32010000 		.4byte	.LASF19
 1849 00e7 01       		.byte	0x1
 1850 00e8 15       		.byte	0x15
 1851 00e9 68000000 		.4byte	0x68
 1852 00ed 02       		.uleb128 0x2
 1853 00ee 91       		.byte	0x91
 1854 00ef 74       		.sleb128 -12
 1855 00f0 08       		.uleb128 0x8
 1856 00f1 26010000 		.4byte	.LASF20
 1857 00f5 01       		.byte	0x1
 1858 00f6 15       		.byte	0x15
 1859 00f7 68000000 		.4byte	0x68
 1860 00fb 02       		.uleb128 0x2
 1861 00fc 91       		.byte	0x91
 1862 00fd 70       		.sleb128 -16
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 42


 1863 00fe 00       		.byte	0
 1864 00ff 09       		.uleb128 0x9
 1865 0100 DC020000 		.4byte	.LASF62
 1866 0104 01       		.byte	0x1
 1867 0105 26       		.byte	0x26
 1868 0106 68000000 		.4byte	0x68
 1869 010a 00000000 		.4byte	.LFB65
 1870 010e 54000000 		.4byte	.LFE65-.LFB65
 1871 0112 01       		.uleb128 0x1
 1872 0113 9C       		.byte	0x9c
 1873 0114 43010000 		.4byte	0x143
 1874 0118 08       		.uleb128 0x8
 1875 0119 26010000 		.4byte	.LASF20
 1876 011d 01       		.byte	0x1
 1877 011e 26       		.byte	0x26
 1878 011f 68000000 		.4byte	0x68
 1879 0123 02       		.uleb128 0x2
 1880 0124 91       		.byte	0x91
 1881 0125 74       		.sleb128 -12
 1882 0126 08       		.uleb128 0x8
 1883 0127 CF020000 		.4byte	.LASF21
 1884 012b 01       		.byte	0x1
 1885 012c 26       		.byte	0x26
 1886 012d 68000000 		.4byte	0x68
 1887 0131 02       		.uleb128 0x2
 1888 0132 91       		.byte	0x91
 1889 0133 70       		.sleb128 -16
 1890 0134 08       		.uleb128 0x8
 1891 0135 54000000 		.4byte	.LASF22
 1892 0139 01       		.byte	0x1
 1893 013a 26       		.byte	0x26
 1894 013b 68000000 		.4byte	0x68
 1895 013f 02       		.uleb128 0x2
 1896 0140 91       		.byte	0x91
 1897 0141 6C       		.sleb128 -20
 1898 0142 00       		.byte	0
 1899 0143 07       		.uleb128 0x7
 1900 0144 F3020000 		.4byte	.LASF24
 1901 0148 01       		.byte	0x1
 1902 0149 52       		.byte	0x52
 1903 014a 00000000 		.4byte	.LFB66
 1904 014e 6C010000 		.4byte	.LFE66-.LFB66
 1905 0152 01       		.uleb128 0x1
 1906 0153 9C       		.byte	0x9c
 1907 0154 CF010000 		.4byte	0x1cf
 1908 0158 0A       		.uleb128 0xa
 1909 0159 06000000 		.4byte	.LBB2
 1910 015d 4A010000 		.4byte	.LBE2-.LBB2
 1911 0161 0B       		.uleb128 0xb
 1912 0162 6300     		.ascii	"c\000"
 1913 0164 01       		.byte	0x1
 1914 0165 53       		.byte	0x53
 1915 0166 68000000 		.4byte	0x68
 1916 016a 02       		.uleb128 0x2
 1917 016b 91       		.byte	0x91
 1918 016c 74       		.sleb128 -12
 1919 016d 0C       		.uleb128 0xc
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 43


 1920 016e 16000000 		.4byte	.LBB3
 1921 0172 3A000000 		.4byte	.LBE3-.LBB3
 1922 0176 87010000 		.4byte	0x187
 1923 017a 0B       		.uleb128 0xb
 1924 017b 6A00     		.ascii	"j\000"
 1925 017d 01       		.byte	0x1
 1926 017e 56       		.byte	0x56
 1927 017f 68000000 		.4byte	0x68
 1928 0183 02       		.uleb128 0x2
 1929 0184 91       		.byte	0x91
 1930 0185 70       		.sleb128 -16
 1931 0186 00       		.byte	0
 1932 0187 0C       		.uleb128 0xc
 1933 0188 AA000000 		.4byte	.LBB4
 1934 018c 2C000000 		.4byte	.LBE4-.LBB4
 1935 0190 A1010000 		.4byte	0x1a1
 1936 0194 0B       		.uleb128 0xb
 1937 0195 6A00     		.ascii	"j\000"
 1938 0197 01       		.byte	0x1
 1939 0198 5F       		.byte	0x5f
 1940 0199 68000000 		.4byte	0x68
 1941 019d 02       		.uleb128 0x2
 1942 019e 91       		.byte	0x91
 1943 019f 6C       		.sleb128 -20
 1944 01a0 00       		.byte	0
 1945 01a1 0A       		.uleb128 0xa
 1946 01a2 D6000000 		.4byte	.LBB5
 1947 01a6 60000000 		.4byte	.LBE5-.LBB5
 1948 01aa 0B       		.uleb128 0xb
 1949 01ab 6900     		.ascii	"i\000"
 1950 01ad 01       		.byte	0x1
 1951 01ae 62       		.byte	0x62
 1952 01af 68000000 		.4byte	0x68
 1953 01b3 02       		.uleb128 0x2
 1954 01b4 91       		.byte	0x91
 1955 01b5 68       		.sleb128 -24
 1956 01b6 0A       		.uleb128 0xa
 1957 01b7 DC000000 		.4byte	.LBB6
 1958 01bb 4E000000 		.4byte	.LBE6-.LBB6
 1959 01bf 0B       		.uleb128 0xb
 1960 01c0 6A00     		.ascii	"j\000"
 1961 01c2 01       		.byte	0x1
 1962 01c3 63       		.byte	0x63
 1963 01c4 68000000 		.4byte	0x68
 1964 01c8 02       		.uleb128 0x2
 1965 01c9 91       		.byte	0x91
 1966 01ca 64       		.sleb128 -28
 1967 01cb 00       		.byte	0
 1968 01cc 00       		.byte	0
 1969 01cd 00       		.byte	0
 1970 01ce 00       		.byte	0
 1971 01cf 07       		.uleb128 0x7
 1972 01d0 01020000 		.4byte	.LASF25
 1973 01d4 01       		.byte	0x1
 1974 01d5 74       		.byte	0x74
 1975 01d6 00000000 		.4byte	.LFB67
 1976 01da C4020000 		.4byte	.LFE67-.LFB67
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 44


 1977 01de 01       		.uleb128 0x1
 1978 01df 9C       		.byte	0x9c
 1979 01e0 18020000 		.4byte	0x218
 1980 01e4 0D       		.uleb128 0xd
 1981 01e5 BE010000 		.4byte	.LASF26
 1982 01e9 01       		.byte	0x1
 1983 01ea 76       		.byte	0x76
 1984 01eb 81000000 		.4byte	0x81
 1985 01ef 02       		.uleb128 0x2
 1986 01f0 91       		.byte	0x91
 1987 01f1 6B       		.sleb128 -21
 1988 01f2 0D       		.uleb128 0xd
 1989 01f3 FE020000 		.4byte	.LASF27
 1990 01f7 01       		.byte	0x1
 1991 01f8 77       		.byte	0x77
 1992 01f9 81000000 		.4byte	0x81
 1993 01fd 02       		.uleb128 0x2
 1994 01fe 91       		.byte	0x91
 1995 01ff 6A       		.sleb128 -22
 1996 0200 0A       		.uleb128 0xa
 1997 0201 A4000000 		.4byte	.LBB7
 1998 0205 1C000000 		.4byte	.LBE7-.LBB7
 1999 0209 0B       		.uleb128 0xb
 2000 020a 707000   		.ascii	"pp\000"
 2001 020d 01       		.byte	0x1
 2002 020e 94       		.byte	0x94
 2003 020f 68000000 		.4byte	0x68
 2004 0213 02       		.uleb128 0x2
 2005 0214 91       		.byte	0x91
 2006 0215 6C       		.sleb128 -20
 2007 0216 00       		.byte	0
 2008 0217 00       		.byte	0
 2009 0218 0E       		.uleb128 0xe
 2010 0219 6A000000 		.4byte	.LASF28
 2011 021d 01       		.byte	0x1
 2012 021e F4       		.byte	0xf4
 2013 021f 68000000 		.4byte	0x68
 2014 0223 00000000 		.4byte	.LFB68
 2015 0227 A0050000 		.4byte	.LFE68-.LFB68
 2016 022b 01       		.uleb128 0x1
 2017 022c 9C       		.byte	0x9c
 2018 022d 34030000 		.4byte	0x334
 2019 0231 0F       		.uleb128 0xf
 2020 0232 647400   		.ascii	"dt\000"
 2021 0235 01       		.byte	0x1
 2022 0236 1501     		.2byte	0x115
 2023 0238 A0000000 		.4byte	0xa0
 2024 023c 02       		.uleb128 0x2
 2025 023d 91       		.byte	0x91
 2026 023e 58       		.sleb128 -40
 2027 023f 10       		.uleb128 0x10
 2028 0240 FC010000 		.4byte	.LASF29
 2029 0244 01       		.byte	0x1
 2030 0245 1601     		.2byte	0x116
 2031 0247 A0000000 		.4byte	0xa0
 2032 024b 03       		.uleb128 0x3
 2033 024c 91       		.byte	0x91
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 45


 2034 024d A87F     		.sleb128 -88
 2035 024f 0C       		.uleb128 0xc
 2036 0250 06000000 		.4byte	.LBB8
 2037 0254 A0000000 		.4byte	.LBE8-.LBB8
 2038 0258 69020000 		.4byte	0x269
 2039 025c 0B       		.uleb128 0xb
 2040 025d 6700     		.ascii	"g\000"
 2041 025f 01       		.byte	0x1
 2042 0260 F7       		.byte	0xf7
 2043 0261 68000000 		.4byte	0x68
 2044 0265 02       		.uleb128 0x2
 2045 0266 91       		.byte	0x91
 2046 0267 64       		.sleb128 -28
 2047 0268 00       		.byte	0
 2048 0269 0C       		.uleb128 0xc
 2049 026a 4A010000 		.4byte	.LBB9
 2050 026e 02020000 		.4byte	.LBE9-.LBB9
 2051 0272 86020000 		.4byte	0x286
 2052 0276 0F       		.uleb128 0xf
 2053 0277 63796C00 		.ascii	"cyl\000"
 2054 027b 01       		.byte	0x1
 2055 027c 2A01     		.2byte	0x12a
 2056 027e 68000000 		.4byte	0x68
 2057 0282 02       		.uleb128 0x2
 2058 0283 91       		.byte	0x91
 2059 0284 54       		.sleb128 -44
 2060 0285 00       		.byte	0
 2061 0286 0A       		.uleb128 0xa
 2062 0287 56030000 		.4byte	.LBB10
 2063 028b A6010000 		.4byte	.LBE10-.LBB10
 2064 028f 10       		.uleb128 0x10
 2065 0290 6B020000 		.4byte	.LASF30
 2066 0294 01       		.byte	0x1
 2067 0295 3F01     		.2byte	0x13f
 2068 0297 68000000 		.4byte	0x68
 2069 029b 03       		.uleb128 0x3
 2070 029c 91       		.byte	0x91
 2071 029d B47F     		.sleb128 -76
 2072 029f 10       		.uleb128 0x10
 2073 02a0 42030000 		.4byte	.LASF31
 2074 02a4 01       		.byte	0x1
 2075 02a5 4001     		.2byte	0x140
 2076 02a7 68000000 		.4byte	0x68
 2077 02ab 02       		.uleb128 0x2
 2078 02ac 91       		.byte	0x91
 2079 02ad 50       		.sleb128 -48
 2080 02ae 10       		.uleb128 0x10
 2081 02af 87010000 		.4byte	.LASF32
 2082 02b3 01       		.byte	0x1
 2083 02b4 4101     		.2byte	0x141
 2084 02b6 68000000 		.4byte	0x68
 2085 02ba 02       		.uleb128 0x2
 2086 02bb 91       		.byte	0x91
 2087 02bc 4C       		.sleb128 -52
 2088 02bd 10       		.uleb128 0x10
 2089 02be 6A010000 		.4byte	.LASF33
 2090 02c2 01       		.byte	0x1
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 46


 2091 02c3 4201     		.2byte	0x142
 2092 02c5 68000000 		.4byte	0x68
 2093 02c9 02       		.uleb128 0x2
 2094 02ca 91       		.byte	0x91
 2095 02cb 48       		.sleb128 -56
 2096 02cc 10       		.uleb128 0x10
 2097 02cd B1010000 		.4byte	.LASF34
 2098 02d1 01       		.byte	0x1
 2099 02d2 4301     		.2byte	0x143
 2100 02d4 68000000 		.4byte	0x68
 2101 02d8 02       		.uleb128 0x2
 2102 02d9 91       		.byte	0x91
 2103 02da 44       		.sleb128 -60
 2104 02db 10       		.uleb128 0x10
 2105 02dc 0C000000 		.4byte	.LASF35
 2106 02e0 01       		.byte	0x1
 2107 02e1 4401     		.2byte	0x144
 2108 02e3 68000000 		.4byte	0x68
 2109 02e7 02       		.uleb128 0x2
 2110 02e8 91       		.byte	0x91
 2111 02e9 40       		.sleb128 -64
 2112 02ea 10       		.uleb128 0x10
 2113 02eb 7D020000 		.4byte	.LASF36
 2114 02ef 01       		.byte	0x1
 2115 02f0 4501     		.2byte	0x145
 2116 02f2 68000000 		.4byte	0x68
 2117 02f6 03       		.uleb128 0x3
 2118 02f7 91       		.byte	0x91
 2119 02f8 BC7F     		.sleb128 -68
 2120 02fa 10       		.uleb128 0x10
 2121 02fb B7020000 		.4byte	.LASF37
 2122 02ff 01       		.byte	0x1
 2123 0300 4601     		.2byte	0x146
 2124 0302 8D000000 		.4byte	0x8d
 2125 0306 03       		.uleb128 0x3
 2126 0307 91       		.byte	0x91
 2127 0308 B27F     		.sleb128 -78
 2128 030a 10       		.uleb128 0x10
 2129 030b 34000000 		.4byte	.LASF38
 2130 030f 01       		.byte	0x1
 2131 0310 4701     		.2byte	0x147
 2132 0312 8D000000 		.4byte	0x8d
 2133 0316 03       		.uleb128 0x3
 2134 0317 91       		.byte	0x91
 2135 0318 B07F     		.sleb128 -80
 2136 031a 0A       		.uleb128 0xa
 2137 031b 7E030000 		.4byte	.LBB11
 2138 031f 1A000000 		.4byte	.LBE11-.LBB11
 2139 0323 0F       		.uleb128 0xf
 2140 0324 6700     		.ascii	"g\000"
 2141 0326 01       		.byte	0x1
 2142 0327 4801     		.2byte	0x148
 2143 0329 68000000 		.4byte	0x68
 2144 032d 03       		.uleb128 0x3
 2145 032e 91       		.byte	0x91
 2146 032f B87F     		.sleb128 -72
 2147 0331 00       		.byte	0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 47


 2148 0332 00       		.byte	0
 2149 0333 00       		.byte	0
 2150 0334 11       		.uleb128 0x11
 2151 0335 35030000 		.4byte	.LASF39
 2152 0339 05       		.byte	0x5
 2153 033a 1207     		.2byte	0x712
 2154 033c 40030000 		.4byte	0x340
 2155 0340 06       		.uleb128 0x6
 2156 0341 76000000 		.4byte	0x76
 2157 0345 12       		.uleb128 0x12
 2158 0346 3B010000 		.4byte	.LASF40
 2159 034a 01       		.byte	0x1
 2160 034b 13       		.byte	0x13
 2161 034c 81000000 		.4byte	0x81
 2162 0350 05       		.uleb128 0x5
 2163 0351 03       		.byte	0x3
 2164 0352 00000000 		.4byte	errorStatus
 2165 0356 12       		.uleb128 0x12
 2166 0357 17010000 		.4byte	.LASF41
 2167 035b 01       		.byte	0x1
 2168 035c 2F       		.byte	0x2f
 2169 035d 68000000 		.4byte	0x68
 2170 0361 05       		.uleb128 0x5
 2171 0362 03       		.byte	0x3
 2172 0363 00000000 		.4byte	data_read_mode
 2173 0367 13       		.uleb128 0x13
 2174 0368 77030000 		.4byte	0x377
 2175 036c 77030000 		.4byte	0x377
 2176 0370 14       		.uleb128 0x14
 2177 0371 C6000000 		.4byte	0xc6
 2178 0375 03       		.byte	0x3
 2179 0376 00       		.byte	0
 2180 0377 06       		.uleb128 0x6
 2181 0378 68000000 		.4byte	0x68
 2182 037c 12       		.uleb128 0x12
 2183 037d 39000000 		.4byte	.LASF42
 2184 0381 01       		.byte	0x1
 2185 0382 31       		.byte	0x31
 2186 0383 8D030000 		.4byte	0x38d
 2187 0387 05       		.uleb128 0x5
 2188 0388 03       		.byte	0x3
 2189 0389 00000000 		.4byte	new_pos_set
 2190 038d 06       		.uleb128 0x6
 2191 038e 67030000 		.4byte	0x367
 2192 0392 13       		.uleb128 0x13
 2193 0393 68000000 		.4byte	0x68
 2194 0397 A2030000 		.4byte	0x3a2
 2195 039b 14       		.uleb128 0x14
 2196 039c C6000000 		.4byte	0xc6
 2197 03a0 03       		.byte	0x3
 2198 03a1 00       		.byte	0
 2199 03a2 12       		.uleb128 0x12
 2200 03a3 C7010000 		.4byte	.LASF43
 2201 03a7 01       		.byte	0x1
 2202 03a8 32       		.byte	0x32
 2203 03a9 92030000 		.4byte	0x392
 2204 03ad 05       		.uleb128 0x5
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 48


 2205 03ae 03       		.byte	0x3
 2206 03af 00000000 		.4byte	new_pos
 2207 03b3 15       		.uleb128 0x15
 2208 03b4 706F7300 		.ascii	"pos\000"
 2209 03b8 01       		.byte	0x1
 2210 03b9 33       		.byte	0x33
 2211 03ba 92030000 		.4byte	0x392
 2212 03be 05       		.uleb128 0x5
 2213 03bf 03       		.byte	0x3
 2214 03c0 00000000 		.4byte	pos
 2215 03c4 12       		.uleb128 0x12
 2216 03c5 26010000 		.4byte	.LASF20
 2217 03c9 01       		.byte	0x1
 2218 03ca 34       		.byte	0x34
 2219 03cb 92030000 		.4byte	0x392
 2220 03cf 05       		.uleb128 0x5
 2221 03d0 03       		.byte	0x3
 2222 03d1 00000000 		.4byte	pulse
 2223 03d5 12       		.uleb128 0x12
 2224 03d6 A6010000 		.4byte	.LASF44
 2225 03da 01       		.byte	0x1
 2226 03db 35       		.byte	0x35
 2227 03dc 92030000 		.4byte	0x392
 2228 03e0 05       		.uleb128 0x5
 2229 03e1 03       		.byte	0x3
 2230 03e2 00000000 		.4byte	pulse_temp
 2231 03e6 13       		.uleb128 0x13
 2232 03e7 A0000000 		.4byte	0xa0
 2233 03eb F6030000 		.4byte	0x3f6
 2234 03ef 14       		.uleb128 0x14
 2235 03f0 C6000000 		.4byte	0xc6
 2236 03f4 03       		.byte	0x3
 2237 03f5 00       		.byte	0
 2238 03f6 15       		.uleb128 0x15
 2239 03f7 65727200 		.ascii	"err\000"
 2240 03fb 01       		.byte	0x1
 2241 03fc 36       		.byte	0x36
 2242 03fd E6030000 		.4byte	0x3e6
 2243 0401 05       		.uleb128 0x5
 2244 0402 03       		.byte	0x3
 2245 0403 00000000 		.4byte	err
 2246 0407 13       		.uleb128 0x13
 2247 0408 8D000000 		.4byte	0x8d
 2248 040c 17040000 		.4byte	0x417
 2249 0410 14       		.uleb128 0x14
 2250 0411 C6000000 		.4byte	0xc6
 2251 0415 03       		.byte	0x3
 2252 0416 00       		.byte	0
 2253 0417 12       		.uleb128 0x12
 2254 0418 CF010000 		.4byte	.LASF45
 2255 041c 01       		.byte	0x1
 2256 041d 37       		.byte	0x37
 2257 041e 07040000 		.4byte	0x407
 2258 0422 05       		.uleb128 0x5
 2259 0423 03       		.byte	0x3
 2260 0424 00000000 		.4byte	adcValue
 2261 0428 15       		.uleb128 0x15
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 49


 2262 0429 64657200 		.ascii	"der\000"
 2263 042d 01       		.byte	0x1
 2264 042e 38       		.byte	0x38
 2265 042f E6030000 		.4byte	0x3e6
 2266 0433 05       		.uleb128 0x5
 2267 0434 03       		.byte	0x3
 2268 0435 00000000 		.4byte	der
 2269 0439 12       		.uleb128 0x12
 2270 043a 2B000000 		.4byte	.LASF46
 2271 043e 01       		.byte	0x1
 2272 043f 39       		.byte	0x39
 2273 0440 E6030000 		.4byte	0x3e6
 2274 0444 05       		.uleb128 0x5
 2275 0445 03       		.byte	0x3
 2276 0446 00000000 		.4byte	prev_err
 2277 044a 12       		.uleb128 0x12
 2278 044b AA020000 		.4byte	.LASF47
 2279 044f 01       		.byte	0x1
 2280 0450 3A       		.byte	0x3a
 2281 0451 E6030000 		.4byte	0x3e6
 2282 0455 05       		.uleb128 0x5
 2283 0456 03       		.byte	0x3
 2284 0457 00000000 		.4byte	pid_integral
 2285 045b 12       		.uleb128 0x12
 2286 045c 1B000000 		.4byte	.LASF48
 2287 0460 01       		.byte	0x1
 2288 0461 3C       		.byte	0x3c
 2289 0462 68000000 		.4byte	0x68
 2290 0466 05       		.uleb128 0x5
 2291 0467 03       		.byte	0x3
 2292 0468 00000000 		.4byte	cyl_set
 2293 046c 13       		.uleb128 0x13
 2294 046d A7000000 		.4byte	0xa7
 2295 0471 7C040000 		.4byte	0x47c
 2296 0475 14       		.uleb128 0x14
 2297 0476 C6000000 		.4byte	0xc6
 2298 047a 00       		.byte	0
 2299 047b 00       		.byte	0
 2300 047c 12       		.uleb128 0x12
 2301 047d 23000000 		.4byte	.LASF49
 2302 0481 01       		.byte	0x1
 2303 0482 3D       		.byte	0x3d
 2304 0483 6C040000 		.4byte	0x46c
 2305 0487 05       		.uleb128 0x5
 2306 0488 03       		.byte	0x3
 2307 0489 00000000 		.4byte	cyl_tmp
 2308 048d 13       		.uleb128 0x13
 2309 048e A0000000 		.4byte	0xa0
 2310 0492 9D040000 		.4byte	0x49d
 2311 0496 14       		.uleb128 0x14
 2312 0497 C6000000 		.4byte	0xc6
 2313 049b 1D       		.byte	0x1d
 2314 049c 00       		.byte	0
 2315 049d 15       		.uleb128 0x15
 2316 049e 64747300 		.ascii	"dts\000"
 2317 04a2 01       		.byte	0x1
 2318 04a3 3E       		.byte	0x3e
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 50


 2319 04a4 8D040000 		.4byte	0x48d
 2320 04a8 05       		.uleb128 0x5
 2321 04a9 03       		.byte	0x3
 2322 04aa 00000000 		.4byte	dts
 2323 04ae 12       		.uleb128 0x12
 2324 04af 2E030000 		.4byte	.LASF50
 2325 04b3 01       		.byte	0x1
 2326 04b4 3F       		.byte	0x3f
 2327 04b5 68000000 		.4byte	0x68
 2328 04b9 05       		.uleb128 0x5
 2329 04ba 03       		.byte	0x3
 2330 04bb 00000000 		.4byte	dts_ct
 2331 04bf 13       		.uleb128 0x13
 2332 04c0 68000000 		.4byte	0x68
 2333 04c4 D5040000 		.4byte	0x4d5
 2334 04c8 14       		.uleb128 0x14
 2335 04c9 C6000000 		.4byte	0xc6
 2336 04cd 03       		.byte	0x3
 2337 04ce 14       		.uleb128 0x14
 2338 04cf C6000000 		.4byte	0xc6
 2339 04d3 01       		.byte	0x1
 2340 04d4 00       		.byte	0
 2341 04d5 12       		.uleb128 0x12
 2342 04d6 62010000 		.4byte	.LASF51
 2343 04da 01       		.byte	0x1
 2344 04db 41       		.byte	0x41
 2345 04dc BF040000 		.4byte	0x4bf
 2346 04e0 05       		.uleb128 0x5
 2347 04e1 03       		.byte	0x3
 2348 04e2 00000000 		.4byte	offsets
 2349 04e6 13       		.uleb128 0x13
 2350 04e7 A7000000 		.4byte	0xa7
 2351 04eb F6040000 		.4byte	0x4f6
 2352 04ef 14       		.uleb128 0x14
 2353 04f0 C6000000 		.4byte	0xc6
 2354 04f4 63       		.byte	0x63
 2355 04f5 00       		.byte	0
 2356 04f6 12       		.uleb128 0x12
 2357 04f7 1D030000 		.4byte	.LASF52
 2358 04fb 01       		.byte	0x1
 2359 04fc 43       		.byte	0x43
 2360 04fd E6040000 		.4byte	0x4e6
 2361 0501 05       		.uleb128 0x5
 2362 0502 03       		.byte	0x3
 2363 0503 00000000 		.4byte	sendValue
 2364 0507 13       		.uleb128 0x13
 2365 0508 A7000000 		.4byte	0xa7
 2366 050c 17050000 		.4byte	0x517
 2367 0510 14       		.uleb128 0x14
 2368 0511 C6000000 		.4byte	0xc6
 2369 0515 13       		.byte	0x13
 2370 0516 00       		.byte	0
 2371 0517 12       		.uleb128 0x12
 2372 0518 45000000 		.4byte	.LASF53
 2373 051c 01       		.byte	0x1
 2374 051d 44       		.byte	0x44
 2375 051e 07050000 		.4byte	0x507
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 51


 2376 0522 05       		.uleb128 0x5
 2377 0523 03       		.byte	0x3
 2378 0524 00000000 		.4byte	temp
 2379 0528 15       		.uleb128 0x15
 2380 0529 6E6E00   		.ascii	"nn\000"
 2381 052c 01       		.byte	0x1
 2382 052d 45       		.byte	0x45
 2383 052e 68000000 		.4byte	0x68
 2384 0532 05       		.uleb128 0x5
 2385 0533 03       		.byte	0x3
 2386 0534 00000000 		.4byte	nn
 2387 0538 13       		.uleb128 0x13
 2388 0539 A0000000 		.4byte	0xa0
 2389 053d 48050000 		.4byte	0x548
 2390 0541 14       		.uleb128 0x14
 2391 0542 C6000000 		.4byte	0xc6
 2392 0546 02       		.byte	0x2
 2393 0547 00       		.byte	0
 2394 0548 15       		.uleb128 0x15
 2395 0549 70696400 		.ascii	"pid\000"
 2396 054d 01       		.byte	0x1
 2397 054e 46       		.byte	0x46
 2398 054f 38050000 		.4byte	0x538
 2399 0553 05       		.uleb128 0x5
 2400 0554 03       		.byte	0x3
 2401 0555 00000000 		.4byte	pid
 2402 0559 12       		.uleb128 0x12
 2403 055a 0B010000 		.4byte	.LASF54
 2404 055e 01       		.byte	0x1
 2405 055f 48       		.byte	0x48
 2406 0560 E6040000 		.4byte	0x4e6
 2407 0564 05       		.uleb128 0x5
 2408 0565 03       		.byte	0x3
 2409 0566 00000000 		.4byte	help
 2410 056a 15       		.uleb128 0x15
 2411 056b 747400   		.ascii	"tt\000"
 2412 056e 01       		.byte	0x1
 2413 056f 49       		.byte	0x49
 2414 0570 68000000 		.4byte	0x68
 2415 0574 05       		.uleb128 0x5
 2416 0575 03       		.byte	0x3
 2417 0576 00000000 		.4byte	tt
 2418 057a 12       		.uleb128 0x12
 2419 057b E7020000 		.4byte	.LASF55
 2420 057f 01       		.byte	0x1
 2421 0580 4B       		.byte	0x4b
 2422 0581 68000000 		.4byte	0x68
 2423 0585 05       		.uleb128 0x5
 2424 0586 03       		.byte	0x3
 2425 0587 00000000 		.4byte	start_calib
 2426 058b 12       		.uleb128 0x12
 2427 058c 80010000 		.4byte	.LASF56
 2428 0590 01       		.byte	0x1
 2429 0591 4C       		.byte	0x4c
 2430 0592 68000000 		.4byte	0x68
 2431 0596 05       		.uleb128 0x5
 2432 0597 03       		.byte	0x3
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 52


 2433 0598 00000000 		.4byte	cyl_no
 2434 059c 13       		.uleb128 0x13
 2435 059d 8D000000 		.4byte	0x8d
 2436 05a1 B2050000 		.4byte	0x5b2
 2437 05a5 14       		.uleb128 0x14
 2438 05a6 C6000000 		.4byte	0xc6
 2439 05aa 03       		.byte	0x3
 2440 05ab 14       		.uleb128 0x14
 2441 05ac C6000000 		.4byte	0xc6
 2442 05b0 06       		.byte	0x6
 2443 05b1 00       		.byte	0
 2444 05b2 12       		.uleb128 0x12
 2445 05b3 05030000 		.4byte	.LASF57
 2446 05b7 01       		.byte	0x1
 2447 05b8 4E       		.byte	0x4e
 2448 05b9 9C050000 		.4byte	0x59c
 2449 05bd 05       		.uleb128 0x5
 2450 05be 03       		.byte	0x3
 2451 05bf 00000000 		.4byte	moving_median
 2452 05c3 13       		.uleb128 0x13
 2453 05c4 8D000000 		.4byte	0x8d
 2454 05c8 D3050000 		.4byte	0x5d3
 2455 05cc 14       		.uleb128 0x14
 2456 05cd C6000000 		.4byte	0xc6
 2457 05d1 06       		.byte	0x6
 2458 05d2 00       		.byte	0
 2459 05d3 12       		.uleb128 0x12
 2460 05d4 13030000 		.4byte	.LASF58
 2461 05d8 01       		.byte	0x1
 2462 05d9 4F       		.byte	0x4f
 2463 05da C3050000 		.4byte	0x5c3
 2464 05de 05       		.uleb128 0x5
 2465 05df 03       		.byte	0x3
 2466 05e0 00000000 		.4byte	tempArray
 2467 05e4 15       		.uleb128 0x15
 2468 05e5 746D7000 		.ascii	"tmp\000"
 2469 05e9 01       		.byte	0x1
 2470 05ea 50       		.byte	0x50
 2471 05eb 8D000000 		.4byte	0x8d
 2472 05ef 05       		.uleb128 0x5
 2473 05f0 03       		.byte	0x3
 2474 05f1 00000000 		.4byte	tmp
 2475 05f5 00       		.byte	0
 2476              		.section	.debug_abbrev,"",%progbits
 2477              	.Ldebug_abbrev0:
 2478 0000 01       		.uleb128 0x1
 2479 0001 11       		.uleb128 0x11
 2480 0002 01       		.byte	0x1
 2481 0003 25       		.uleb128 0x25
 2482 0004 0E       		.uleb128 0xe
 2483 0005 13       		.uleb128 0x13
 2484 0006 0B       		.uleb128 0xb
 2485 0007 03       		.uleb128 0x3
 2486 0008 0E       		.uleb128 0xe
 2487 0009 1B       		.uleb128 0x1b
 2488 000a 0E       		.uleb128 0xe
 2489 000b 55       		.uleb128 0x55
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 53


 2490 000c 17       		.uleb128 0x17
 2491 000d 11       		.uleb128 0x11
 2492 000e 01       		.uleb128 0x1
 2493 000f 10       		.uleb128 0x10
 2494 0010 17       		.uleb128 0x17
 2495 0011 00       		.byte	0
 2496 0012 00       		.byte	0
 2497 0013 02       		.uleb128 0x2
 2498 0014 24       		.uleb128 0x24
 2499 0015 00       		.byte	0
 2500 0016 0B       		.uleb128 0xb
 2501 0017 0B       		.uleb128 0xb
 2502 0018 3E       		.uleb128 0x3e
 2503 0019 0B       		.uleb128 0xb
 2504 001a 03       		.uleb128 0x3
 2505 001b 0E       		.uleb128 0xe
 2506 001c 00       		.byte	0
 2507 001d 00       		.byte	0
 2508 001e 03       		.uleb128 0x3
 2509 001f 16       		.uleb128 0x16
 2510 0020 00       		.byte	0
 2511 0021 03       		.uleb128 0x3
 2512 0022 0E       		.uleb128 0xe
 2513 0023 3A       		.uleb128 0x3a
 2514 0024 0B       		.uleb128 0xb
 2515 0025 3B       		.uleb128 0x3b
 2516 0026 0B       		.uleb128 0xb
 2517 0027 49       		.uleb128 0x49
 2518 0028 13       		.uleb128 0x13
 2519 0029 00       		.byte	0
 2520 002a 00       		.byte	0
 2521 002b 04       		.uleb128 0x4
 2522 002c 24       		.uleb128 0x24
 2523 002d 00       		.byte	0
 2524 002e 0B       		.uleb128 0xb
 2525 002f 0B       		.uleb128 0xb
 2526 0030 3E       		.uleb128 0x3e
 2527 0031 0B       		.uleb128 0xb
 2528 0032 03       		.uleb128 0x3
 2529 0033 08       		.uleb128 0x8
 2530 0034 00       		.byte	0
 2531 0035 00       		.byte	0
 2532 0036 05       		.uleb128 0x5
 2533 0037 16       		.uleb128 0x16
 2534 0038 00       		.byte	0
 2535 0039 03       		.uleb128 0x3
 2536 003a 0E       		.uleb128 0xe
 2537 003b 3A       		.uleb128 0x3a
 2538 003c 0B       		.uleb128 0xb
 2539 003d 3B       		.uleb128 0x3b
 2540 003e 05       		.uleb128 0x5
 2541 003f 49       		.uleb128 0x49
 2542 0040 13       		.uleb128 0x13
 2543 0041 00       		.byte	0
 2544 0042 00       		.byte	0
 2545 0043 06       		.uleb128 0x6
 2546 0044 35       		.uleb128 0x35
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 54


 2547 0045 00       		.byte	0
 2548 0046 49       		.uleb128 0x49
 2549 0047 13       		.uleb128 0x13
 2550 0048 00       		.byte	0
 2551 0049 00       		.byte	0
 2552 004a 07       		.uleb128 0x7
 2553 004b 2E       		.uleb128 0x2e
 2554 004c 01       		.byte	0x1
 2555 004d 3F       		.uleb128 0x3f
 2556 004e 19       		.uleb128 0x19
 2557 004f 03       		.uleb128 0x3
 2558 0050 0E       		.uleb128 0xe
 2559 0051 3A       		.uleb128 0x3a
 2560 0052 0B       		.uleb128 0xb
 2561 0053 3B       		.uleb128 0x3b
 2562 0054 0B       		.uleb128 0xb
 2563 0055 27       		.uleb128 0x27
 2564 0056 19       		.uleb128 0x19
 2565 0057 11       		.uleb128 0x11
 2566 0058 01       		.uleb128 0x1
 2567 0059 12       		.uleb128 0x12
 2568 005a 06       		.uleb128 0x6
 2569 005b 40       		.uleb128 0x40
 2570 005c 18       		.uleb128 0x18
 2571 005d 9642     		.uleb128 0x2116
 2572 005f 19       		.uleb128 0x19
 2573 0060 01       		.uleb128 0x1
 2574 0061 13       		.uleb128 0x13
 2575 0062 00       		.byte	0
 2576 0063 00       		.byte	0
 2577 0064 08       		.uleb128 0x8
 2578 0065 05       		.uleb128 0x5
 2579 0066 00       		.byte	0
 2580 0067 03       		.uleb128 0x3
 2581 0068 0E       		.uleb128 0xe
 2582 0069 3A       		.uleb128 0x3a
 2583 006a 0B       		.uleb128 0xb
 2584 006b 3B       		.uleb128 0x3b
 2585 006c 0B       		.uleb128 0xb
 2586 006d 49       		.uleb128 0x49
 2587 006e 13       		.uleb128 0x13
 2588 006f 02       		.uleb128 0x2
 2589 0070 18       		.uleb128 0x18
 2590 0071 00       		.byte	0
 2591 0072 00       		.byte	0
 2592 0073 09       		.uleb128 0x9
 2593 0074 2E       		.uleb128 0x2e
 2594 0075 01       		.byte	0x1
 2595 0076 3F       		.uleb128 0x3f
 2596 0077 19       		.uleb128 0x19
 2597 0078 03       		.uleb128 0x3
 2598 0079 0E       		.uleb128 0xe
 2599 007a 3A       		.uleb128 0x3a
 2600 007b 0B       		.uleb128 0xb
 2601 007c 3B       		.uleb128 0x3b
 2602 007d 0B       		.uleb128 0xb
 2603 007e 27       		.uleb128 0x27
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 55


 2604 007f 19       		.uleb128 0x19
 2605 0080 49       		.uleb128 0x49
 2606 0081 13       		.uleb128 0x13
 2607 0082 11       		.uleb128 0x11
 2608 0083 01       		.uleb128 0x1
 2609 0084 12       		.uleb128 0x12
 2610 0085 06       		.uleb128 0x6
 2611 0086 40       		.uleb128 0x40
 2612 0087 18       		.uleb128 0x18
 2613 0088 9742     		.uleb128 0x2117
 2614 008a 19       		.uleb128 0x19
 2615 008b 01       		.uleb128 0x1
 2616 008c 13       		.uleb128 0x13
 2617 008d 00       		.byte	0
 2618 008e 00       		.byte	0
 2619 008f 0A       		.uleb128 0xa
 2620 0090 0B       		.uleb128 0xb
 2621 0091 01       		.byte	0x1
 2622 0092 11       		.uleb128 0x11
 2623 0093 01       		.uleb128 0x1
 2624 0094 12       		.uleb128 0x12
 2625 0095 06       		.uleb128 0x6
 2626 0096 00       		.byte	0
 2627 0097 00       		.byte	0
 2628 0098 0B       		.uleb128 0xb
 2629 0099 34       		.uleb128 0x34
 2630 009a 00       		.byte	0
 2631 009b 03       		.uleb128 0x3
 2632 009c 08       		.uleb128 0x8
 2633 009d 3A       		.uleb128 0x3a
 2634 009e 0B       		.uleb128 0xb
 2635 009f 3B       		.uleb128 0x3b
 2636 00a0 0B       		.uleb128 0xb
 2637 00a1 49       		.uleb128 0x49
 2638 00a2 13       		.uleb128 0x13
 2639 00a3 02       		.uleb128 0x2
 2640 00a4 18       		.uleb128 0x18
 2641 00a5 00       		.byte	0
 2642 00a6 00       		.byte	0
 2643 00a7 0C       		.uleb128 0xc
 2644 00a8 0B       		.uleb128 0xb
 2645 00a9 01       		.byte	0x1
 2646 00aa 11       		.uleb128 0x11
 2647 00ab 01       		.uleb128 0x1
 2648 00ac 12       		.uleb128 0x12
 2649 00ad 06       		.uleb128 0x6
 2650 00ae 01       		.uleb128 0x1
 2651 00af 13       		.uleb128 0x13
 2652 00b0 00       		.byte	0
 2653 00b1 00       		.byte	0
 2654 00b2 0D       		.uleb128 0xd
 2655 00b3 34       		.uleb128 0x34
 2656 00b4 00       		.byte	0
 2657 00b5 03       		.uleb128 0x3
 2658 00b6 0E       		.uleb128 0xe
 2659 00b7 3A       		.uleb128 0x3a
 2660 00b8 0B       		.uleb128 0xb
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 56


 2661 00b9 3B       		.uleb128 0x3b
 2662 00ba 0B       		.uleb128 0xb
 2663 00bb 49       		.uleb128 0x49
 2664 00bc 13       		.uleb128 0x13
 2665 00bd 02       		.uleb128 0x2
 2666 00be 18       		.uleb128 0x18
 2667 00bf 00       		.byte	0
 2668 00c0 00       		.byte	0
 2669 00c1 0E       		.uleb128 0xe
 2670 00c2 2E       		.uleb128 0x2e
 2671 00c3 01       		.byte	0x1
 2672 00c4 3F       		.uleb128 0x3f
 2673 00c5 19       		.uleb128 0x19
 2674 00c6 03       		.uleb128 0x3
 2675 00c7 0E       		.uleb128 0xe
 2676 00c8 3A       		.uleb128 0x3a
 2677 00c9 0B       		.uleb128 0xb
 2678 00ca 3B       		.uleb128 0x3b
 2679 00cb 0B       		.uleb128 0xb
 2680 00cc 49       		.uleb128 0x49
 2681 00cd 13       		.uleb128 0x13
 2682 00ce 11       		.uleb128 0x11
 2683 00cf 01       		.uleb128 0x1
 2684 00d0 12       		.uleb128 0x12
 2685 00d1 06       		.uleb128 0x6
 2686 00d2 40       		.uleb128 0x40
 2687 00d3 18       		.uleb128 0x18
 2688 00d4 9642     		.uleb128 0x2116
 2689 00d6 19       		.uleb128 0x19
 2690 00d7 01       		.uleb128 0x1
 2691 00d8 13       		.uleb128 0x13
 2692 00d9 00       		.byte	0
 2693 00da 00       		.byte	0
 2694 00db 0F       		.uleb128 0xf
 2695 00dc 34       		.uleb128 0x34
 2696 00dd 00       		.byte	0
 2697 00de 03       		.uleb128 0x3
 2698 00df 08       		.uleb128 0x8
 2699 00e0 3A       		.uleb128 0x3a
 2700 00e1 0B       		.uleb128 0xb
 2701 00e2 3B       		.uleb128 0x3b
 2702 00e3 05       		.uleb128 0x5
 2703 00e4 49       		.uleb128 0x49
 2704 00e5 13       		.uleb128 0x13
 2705 00e6 02       		.uleb128 0x2
 2706 00e7 18       		.uleb128 0x18
 2707 00e8 00       		.byte	0
 2708 00e9 00       		.byte	0
 2709 00ea 10       		.uleb128 0x10
 2710 00eb 34       		.uleb128 0x34
 2711 00ec 00       		.byte	0
 2712 00ed 03       		.uleb128 0x3
 2713 00ee 0E       		.uleb128 0xe
 2714 00ef 3A       		.uleb128 0x3a
 2715 00f0 0B       		.uleb128 0xb
 2716 00f1 3B       		.uleb128 0x3b
 2717 00f2 05       		.uleb128 0x5
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 57


 2718 00f3 49       		.uleb128 0x49
 2719 00f4 13       		.uleb128 0x13
 2720 00f5 02       		.uleb128 0x2
 2721 00f6 18       		.uleb128 0x18
 2722 00f7 00       		.byte	0
 2723 00f8 00       		.byte	0
 2724 00f9 11       		.uleb128 0x11
 2725 00fa 34       		.uleb128 0x34
 2726 00fb 00       		.byte	0
 2727 00fc 03       		.uleb128 0x3
 2728 00fd 0E       		.uleb128 0xe
 2729 00fe 3A       		.uleb128 0x3a
 2730 00ff 0B       		.uleb128 0xb
 2731 0100 3B       		.uleb128 0x3b
 2732 0101 05       		.uleb128 0x5
 2733 0102 49       		.uleb128 0x49
 2734 0103 13       		.uleb128 0x13
 2735 0104 3F       		.uleb128 0x3f
 2736 0105 19       		.uleb128 0x19
 2737 0106 3C       		.uleb128 0x3c
 2738 0107 19       		.uleb128 0x19
 2739 0108 00       		.byte	0
 2740 0109 00       		.byte	0
 2741 010a 12       		.uleb128 0x12
 2742 010b 34       		.uleb128 0x34
 2743 010c 00       		.byte	0
 2744 010d 03       		.uleb128 0x3
 2745 010e 0E       		.uleb128 0xe
 2746 010f 3A       		.uleb128 0x3a
 2747 0110 0B       		.uleb128 0xb
 2748 0111 3B       		.uleb128 0x3b
 2749 0112 0B       		.uleb128 0xb
 2750 0113 49       		.uleb128 0x49
 2751 0114 13       		.uleb128 0x13
 2752 0115 3F       		.uleb128 0x3f
 2753 0116 19       		.uleb128 0x19
 2754 0117 02       		.uleb128 0x2
 2755 0118 18       		.uleb128 0x18
 2756 0119 00       		.byte	0
 2757 011a 00       		.byte	0
 2758 011b 13       		.uleb128 0x13
 2759 011c 01       		.uleb128 0x1
 2760 011d 01       		.byte	0x1
 2761 011e 49       		.uleb128 0x49
 2762 011f 13       		.uleb128 0x13
 2763 0120 01       		.uleb128 0x1
 2764 0121 13       		.uleb128 0x13
 2765 0122 00       		.byte	0
 2766 0123 00       		.byte	0
 2767 0124 14       		.uleb128 0x14
 2768 0125 21       		.uleb128 0x21
 2769 0126 00       		.byte	0
 2770 0127 49       		.uleb128 0x49
 2771 0128 13       		.uleb128 0x13
 2772 0129 2F       		.uleb128 0x2f
 2773 012a 0B       		.uleb128 0xb
 2774 012b 00       		.byte	0
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 58


 2775 012c 00       		.byte	0
 2776 012d 15       		.uleb128 0x15
 2777 012e 34       		.uleb128 0x34
 2778 012f 00       		.byte	0
 2779 0130 03       		.uleb128 0x3
 2780 0131 08       		.uleb128 0x8
 2781 0132 3A       		.uleb128 0x3a
 2782 0133 0B       		.uleb128 0xb
 2783 0134 3B       		.uleb128 0x3b
 2784 0135 0B       		.uleb128 0xb
 2785 0136 49       		.uleb128 0x49
 2786 0137 13       		.uleb128 0x13
 2787 0138 3F       		.uleb128 0x3f
 2788 0139 19       		.uleb128 0x19
 2789 013a 02       		.uleb128 0x2
 2790 013b 18       		.uleb128 0x18
 2791 013c 00       		.byte	0
 2792 013d 00       		.byte	0
 2793 013e 00       		.byte	0
 2794              		.section	.debug_aranges,"",%progbits
 2795 0000 3C000000 		.4byte	0x3c
 2796 0004 0200     		.2byte	0x2
 2797 0006 00000000 		.4byte	.Ldebug_info0
 2798 000a 04       		.byte	0x4
 2799 000b 00       		.byte	0
 2800 000c 0000     		.2byte	0
 2801 000e 0000     		.2byte	0
 2802 0010 00000000 		.4byte	.LFB64
 2803 0014 78000000 		.4byte	.LFE64-.LFB64
 2804 0018 00000000 		.4byte	.LFB65
 2805 001c 54000000 		.4byte	.LFE65-.LFB65
 2806 0020 00000000 		.4byte	.LFB66
 2807 0024 6C010000 		.4byte	.LFE66-.LFB66
 2808 0028 00000000 		.4byte	.LFB67
 2809 002c C4020000 		.4byte	.LFE67-.LFB67
 2810 0030 00000000 		.4byte	.LFB68
 2811 0034 A0050000 		.4byte	.LFE68-.LFB68
 2812 0038 00000000 		.4byte	0
 2813 003c 00000000 		.4byte	0
 2814              		.section	.debug_ranges,"",%progbits
 2815              	.Ldebug_ranges0:
 2816 0000 00000000 		.4byte	.LFB64
 2817 0004 78000000 		.4byte	.LFE64
 2818 0008 00000000 		.4byte	.LFB65
 2819 000c 54000000 		.4byte	.LFE65
 2820 0010 00000000 		.4byte	.LFB66
 2821 0014 6C010000 		.4byte	.LFE66
 2822 0018 00000000 		.4byte	.LFB67
 2823 001c C4020000 		.4byte	.LFE67
 2824 0020 00000000 		.4byte	.LFB68
 2825 0024 A0050000 		.4byte	.LFE68
 2826 0028 00000000 		.4byte	0
 2827 002c 00000000 		.4byte	0
 2828              		.section	.debug_line,"",%progbits
 2829              	.Ldebug_line0:
 2830 0000 A8030000 		.section	.debug_str,"MS",%progbits,1
 2830      02004C01 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 59


 2830      00000201 
 2830      FB0E0D00 
 2830      01010101 
 2831              	.LASF17:
 2832 0000 6C6F6E67 		.ascii	"long double\000"
 2832      20646F75 
 2832      626C6500 
 2833              	.LASF35:
 2834 000c 6C6F7765 		.ascii	"lower_check_no\000"
 2834      725F6368 
 2834      65636B5F 
 2834      6E6F00
 2835              	.LASF48:
 2836 001b 63796C5F 		.ascii	"cyl_set\000"
 2836      73657400 
 2837              	.LASF49:
 2838 0023 63796C5F 		.ascii	"cyl_tmp\000"
 2838      746D7000 
 2839              	.LASF46:
 2840 002b 70726576 		.ascii	"prev_err\000"
 2840      5F657272 
 2840      00
 2841              	.LASF38:
 2842 0034 64696666 		.ascii	"diff\000"
 2842      00
 2843              	.LASF42:
 2844 0039 6E65775F 		.ascii	"new_pos_set\000"
 2844      706F735F 
 2844      73657400 
 2845              	.LASF53:
 2846 0045 74656D70 		.ascii	"temp\000"
 2846      00
 2847              	.LASF2:
 2848 004a 73686F72 		.ascii	"short int\000"
 2848      7420696E 
 2848      7400
 2849              	.LASF22:
 2850 0054 6F666673 		.ascii	"offset_lower\000"
 2850      65745F6C 
 2850      6F776572 
 2850      00
 2851              	.LASF18:
 2852 0061 73697A65 		.ascii	"sizetype\000"
 2852      74797065 
 2852      00
 2853              	.LASF28:
 2854 006a 6D61696E 		.ascii	"main\000"
 2854      00
 2855              	.LASF59:
 2856 006f 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2856      43313120 
 2856      352E342E 
 2856      31203230 
 2856      31363036 
 2857 00a2 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2857      20726576 
 2857      6973696F 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 60


 2857      6E203233 
 2857      37373135 
 2858 00d5 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2858      66756E63 
 2858      74696F6E 
 2858      2D736563 
 2858      74696F6E 
 2859              	.LASF6:
 2860 00fd 6C6F6E67 		.ascii	"long long int\000"
 2860      206C6F6E 
 2860      6720696E 
 2860      7400
 2861              	.LASF54:
 2862 010b 68656C70 		.ascii	"help\000"
 2862      00
 2863              	.LASF12:
 2864 0110 75696E74 		.ascii	"uint16\000"
 2864      313600
 2865              	.LASF41:
 2866 0117 64617461 		.ascii	"data_read_mode\000"
 2866      5F726561 
 2866      645F6D6F 
 2866      646500
 2867              	.LASF20:
 2868 0126 70756C73 		.ascii	"pulse\000"
 2868      6500
 2869              	.LASF11:
 2870 012c 75696E74 		.ascii	"uint8\000"
 2870      3800
 2871              	.LASF19:
 2872 0132 63796C69 		.ascii	"cylinder\000"
 2872      6E646572 
 2872      00
 2873              	.LASF40:
 2874 013b 6572726F 		.ascii	"errorStatus\000"
 2874      72537461 
 2874      74757300 
 2875              	.LASF0:
 2876 0147 7369676E 		.ascii	"signed char\000"
 2876      65642063 
 2876      68617200 
 2877              	.LASF13:
 2878 0153 666C6F61 		.ascii	"float\000"
 2878      7400
 2879              	.LASF23:
 2880 0159 77726974 		.ascii	"writePWM\000"
 2880      6550574D 
 2880      00
 2881              	.LASF51:
 2882 0162 6F666673 		.ascii	"offsets\000"
 2882      65747300 
 2883              	.LASF33:
 2884 016a 75707065 		.ascii	"upper_offset\000"
 2884      725F6F66 
 2884      66736574 
 2884      00
 2885              	.LASF4:
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 61


 2886 0177 6C6F6E67 		.ascii	"long int\000"
 2886      20696E74 
 2886      00
 2887              	.LASF56:
 2888 0180 63796C5F 		.ascii	"cyl_no\000"
 2888      6E6F00
 2889              	.LASF32:
 2890 0187 6C6F7765 		.ascii	"lower_offset_set\000"
 2890      725F6F66 
 2890      66736574 
 2890      5F736574 
 2890      00
 2891              	.LASF1:
 2892 0198 756E7369 		.ascii	"unsigned char\000"
 2892      676E6564 
 2892      20636861 
 2892      7200
 2893              	.LASF44:
 2894 01a6 70756C73 		.ascii	"pulse_temp\000"
 2894      655F7465 
 2894      6D7000
 2895              	.LASF34:
 2896 01b1 6C6F7765 		.ascii	"lower_offset\000"
 2896      725F6F66 
 2896      66736574 
 2896      00
 2897              	.LASF26:
 2898 01be 72785374 		.ascii	"rxStatus\000"
 2898      61747573 
 2898      00
 2899              	.LASF43:
 2900 01c7 6E65775F 		.ascii	"new_pos\000"
 2900      706F7300 
 2901              	.LASF45:
 2902 01cf 61646356 		.ascii	"adcValue\000"
 2902      616C7565 
 2902      00
 2903              	.LASF7:
 2904 01d8 6C6F6E67 		.ascii	"long long unsigned int\000"
 2904      206C6F6E 
 2904      6720756E 
 2904      7369676E 
 2904      65642069 
 2905              	.LASF8:
 2906 01ef 756E7369 		.ascii	"unsigned int\000"
 2906      676E6564 
 2906      20696E74 
 2906      00
 2907              	.LASF29:
 2908 01fc 74696D65 		.ascii	"time\000"
 2908      00
 2909              	.LASF25:
 2910 0201 52784973 		.ascii	"RxIsr\000"
 2910      7200
 2911              	.LASF3:
 2912 0207 73686F72 		.ascii	"short unsigned int\000"
 2912      7420756E 
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 62


 2912      7369676E 
 2912      65642069 
 2912      6E7400
 2913              	.LASF61:
 2914 021a 433A5C55 		.ascii	"C:\\Users\\Andrew\\Documents\\GitHub\\Hydraulic-Mim"
 2914      73657273 
 2914      5C416E64 
 2914      7265775C 
 2914      446F6375 
 2915 0248 69632D41 		.ascii	"ic-Arm\\PSOC_arm_project.cydsn\000"
 2915      726D5C50 
 2915      534F435F 
 2915      61726D5F 
 2915      70726F6A 
 2916              	.LASF15:
 2917 0266 63686172 		.ascii	"char\000"
 2917      00
 2918              	.LASF30:
 2919 026b 63616C69 		.ascii	"calib_cyl\000"
 2919      625F6379 
 2919      6C00
 2920              	.LASF10:
 2921 0275 696E7433 		.ascii	"int32_t\000"
 2921      325F7400 
 2922              	.LASF36:
 2923 027d 75707065 		.ascii	"upper_check_no\000"
 2923      725F6368 
 2923      65636B5F 
 2923      6E6F00
 2924              	.LASF60:
 2925 028c 6D61696E 		.ascii	"main.c\000"
 2925      2E6300
 2926              	.LASF16:
 2927 0293 72656738 		.ascii	"reg8\000"
 2927      00
 2928              	.LASF5:
 2929 0298 6C6F6E67 		.ascii	"long unsigned int\000"
 2929      20756E73 
 2929      69676E65 
 2929      6420696E 
 2929      7400
 2930              	.LASF47:
 2931 02aa 7069645F 		.ascii	"pid_integral\000"
 2931      696E7465 
 2931      6772616C 
 2931      00
 2932              	.LASF37:
 2933 02b7 70726576 		.ascii	"prev_adcValue\000"
 2933      5F616463 
 2933      56616C75 
 2933      6500
 2934              	.LASF9:
 2935 02c5 5F5F696E 		.ascii	"__int32_t\000"
 2935      7433325F 
 2935      7400
 2936              	.LASF21:
 2937 02cf 6F666673 		.ascii	"offset_upper\000"
ARM GAS  C:\Users\Andrew\AppData\Local\Temp\cceI8MTg.s 			page 63


 2937      65745F75 
 2937      70706572 
 2937      00
 2938              	.LASF62:
 2939 02dc 70756C73 		.ascii	"pulseCheck\000"
 2939      65436865 
 2939      636B00
 2940              	.LASF55:
 2941 02e7 73746172 		.ascii	"start_calib\000"
 2941      745F6361 
 2941      6C696200 
 2942              	.LASF24:
 2943 02f3 6164635F 		.ascii	"adc_update\000"
 2943      75706461 
 2943      746500
 2944              	.LASF27:
 2945 02fe 72784461 		.ascii	"rxData\000"
 2945      746100
 2946              	.LASF57:
 2947 0305 6D6F7669 		.ascii	"moving_median\000"
 2947      6E675F6D 
 2947      65646961 
 2947      6E00
 2948              	.LASF58:
 2949 0313 74656D70 		.ascii	"tempArray\000"
 2949      41727261 
 2949      7900
 2950              	.LASF52:
 2951 031d 73656E64 		.ascii	"sendValue\000"
 2951      56616C75 
 2951      6500
 2952              	.LASF14:
 2953 0327 646F7562 		.ascii	"double\000"
 2953      6C6500
 2954              	.LASF50:
 2955 032e 6474735F 		.ascii	"dts_ct\000"
 2955      637400
 2956              	.LASF39:
 2957 0335 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2957      52784275 
 2957      66666572 
 2957      00
 2958              	.LASF31:
 2959 0342 75707065 		.ascii	"upper_offset_set\000"
 2959      725F6F66 
 2959      66736574 
 2959      5F736574 
 2959      00
 2960              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
